#if INCLUDE_ASN1C
#include "Collection.h"
#endif

#include "autogen/simple.hpp"

#include "catch2/catch.hpp"

#include <vector>

const std::initializer_list<uint8_t> large_test_collection_packet = {
    0x30, 0x82, 0x08, 0x37, 0x80, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x81,
    0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x20, 0x62, 0x79, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x82, 0x01, 0x05,
    0x83, 0x01, 0xff, 0xa4, 0x05, 0x80, 0x01, 0xd6, 0xa1, 0x00, 0xa5, 0x82, 0x07, 0xf2, 0x80, 0x04, 0x3b, 0x9a, 0xc9,
    0xff, 0xa1, 0x82, 0x07, 0xe8, 0x04, 0x03, 0x54, 0x68, 0x65, 0x04, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x04,
    0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x04, 0x82, 0x07, 0xd0, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0xa6, 0x13, 0x81, 0x11,
    0x49, 0x20, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x61, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21};

const std::initializer_list<uint8_t> small_test_collection_packet = {
    0x30, 0x3e, 0x80, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21,
    0x81, 0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x20, 0x62, 0x79, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64,
    0x21, 0x82, 0x01, 0x05, 0x83, 0x01, 0xff, 0xa4, 0x02, 0xa1, 0x00, 0xa6, 0x13, 0x81, 0x11, 0x49,
    0x20, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x61, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21};

const int iterations = 1000000;

TEST_CASE("Benchmark: Decode Performance")
{
    bool success = false;

    BENCHMARK("fast_ber        - decode " + std::to_string(large_test_collection_packet.size()) + " byte packet")
    {
        for (int i = 0; i < iterations; i++)
        {
            fast_ber::Simple::Collection<> collection;
            success = fast_ber::decode(
                          absl::MakeSpan(large_test_collection_packet.begin(), large_test_collection_packet.size()),
                          collection)
                          .success;
        }
    }
    REQUIRE(success);

#ifdef INCLUDE_ASN1C
    asn_dec_rval_t rval = {};
    BENCHMARK("asn1c           - decode " + std::to_string(large_test_collection_packet.size()) + " byte packet")
    {
        for (int i = 0; i < iterations; i++)
        {
            Collection_t* collection = nullptr;
            rval = asn_DEF_Collection.ber_decoder(nullptr, &asn_DEF_Collection, reinterpret_cast<void**>(&collection),
                                                  large_test_collection_packet.begin(),
                                                  large_test_collection_packet.size(), 0);
            asn_DEF_Collection.free_struct(&asn_DEF_Collection, collection, 0);
        }
    }
    REQUIRE(rval.code == RC_OK);
#endif

    BENCHMARK("fast_ber        - decode " + std::to_string(small_test_collection_packet.size()) + " byte packet")
    {
        for (int i = 0; i < iterations; i++)
        {
            fast_ber::Simple::Collection<> collection;
            success = fast_ber::decode(
                          absl::MakeSpan(small_test_collection_packet.begin(), small_test_collection_packet.size()),
                          collection)
                          .success;
        }
    }
    REQUIRE(success);

#ifdef INCLUDE_ASN1C
    BENCHMARK("asn1c           - decode " + std::to_string(small_test_collection_packet.size()) + " byte packet")
    {
        for (int i = 0; i < iterations; i++)
        {
            Collection_t* collection = nullptr;
            rval = asn_DEF_Collection.ber_decoder(nullptr, &asn_DEF_Collection, reinterpret_cast<void**>(&collection),
                                                  small_test_collection_packet.begin(),
                                                  small_test_collection_packet.size(), 0);
            asn_DEF_Collection.free_struct(&asn_DEF_Collection, collection, 0);
        }
    }
    REQUIRE(rval.code == RC_OK);
#endif
}

TEST_CASE("Benchmark: Encode Performance")
{
    const std::string         long_string     = std::string(2000, 'x');
    const std::string         hello           = "Hello world!";
    const std::string         goodbye         = "Good bye world!";
    const std::string         the             = "The";
    const std::string         second          = "second";
    const std::string         child           = "child";
    std::array<uint8_t, 5000> fast_ber_buffer = {};
    std::array<uint8_t, 5000> asn1c_buffer    = {};
    fast_ber::EncodeResult    encode_result   = {};

    fast_ber::Simple::Collection<> collection{
        hello,
        goodbye,
        5,
        fast_ber::Boolean<>(true),
        fast_ber::Simple::Child<fast_ber::Id<fast_ber::Class::context_specific, 4>>{
            fast_ber::Integer<>(-42), fast_ber::SequenceOf<fast_ber::OctetString<>>{}},
        fast_ber::Simple::Child<fast_ber::Id<fast_ber::Class::context_specific, 5>>{
            999999999, fast_ber::SequenceOf<fast_ber::OctetString<>>{the, second, child, long_string}},
        decltype(collection.the_choice){fast_ber::in_place_index_t<1>(), "I chose a string!"}};

    BENCHMARK("fast_ber        - encode")
    {
        for (int i = 0; i < iterations; i++)
        {
            encode_result =
                fast_ber::encode(absl::MakeSpan(fast_ber_buffer.data(), fast_ber_buffer.size()), collection);
        }
    }
    REQUIRE(encode_result.success);

#ifdef INCLUDE_ASN1C
    asn_enc_rval_t rval;
    Collection_t   asn1c_collection = {};
    OCTET_STRING_fromString(&asn1c_collection.hello, hello.c_str());
    OCTET_STRING_fromString(&asn1c_collection.goodbye, goodbye.c_str());
    asn1c_collection.integer                         = 5;
    asn1c_collection.boolean                         = true;
    asn1c_collection.child.meaning_of_life           = new long(-42);
    asn1c_collection.optional_child                  = new Child();
    asn1c_collection.optional_child->meaning_of_life = new long(999999999);
    OCTET_STRING_t second_child_str_1                = {};
    OCTET_STRING_t second_child_str_2                = {};
    OCTET_STRING_t second_child_str_3                = {};
    OCTET_STRING_t second_child_str_4                = {};
    OCTET_STRING_fromString(&second_child_str_1, the.c_str());
    OCTET_STRING_fromString(&second_child_str_2, second.c_str());
    OCTET_STRING_fromString(&second_child_str_3, child.c_str());
    OCTET_STRING_fromString(&second_child_str_4, long_string.c_str());
    ASN_SEQUENCE_ADD((void*)&asn1c_collection.optional_child->list, (void*)&second_child_str_1);
    ASN_SEQUENCE_ADD((void*)&asn1c_collection.optional_child->list, (void*)&second_child_str_2);
    ASN_SEQUENCE_ADD((void*)&asn1c_collection.optional_child->list, (void*)&second_child_str_3);
    ASN_SEQUENCE_ADD((void*)&asn1c_collection.optional_child->list, (void*)&second_child_str_4);
    asn1c_collection.the_choice.present = the_choice_PR_goodbye;
    OCTET_STRING_fromString(&asn1c_collection.the_choice.choice.goodbye, "I chose a string!");

    BENCHMARK("asn1c           - encode")
    {
        for (int i = 0; i < iterations; i++)
        {
            rval = der_encode_to_buffer(&asn_DEF_Collection, (void*)&asn1c_collection, asn1c_buffer.data(),
                                        asn1c_buffer.size());
        }
    }

    REQUIRE(rval.encoded != -1);
    REQUIRE(rval.encoded == encode_result.length);
    REQUIRE(absl::MakeSpan(fast_ber_buffer.data(), fast_ber_buffer.size()) ==
            absl::MakeSpan(asn1c_buffer.data(), asn1c_buffer.size()));

    OCTET_STRING_free(&asn_DEF_OCTET_STRING, &asn1c_collection.hello, 1);
    OCTET_STRING_free(&asn_DEF_OCTET_STRING, &asn1c_collection.goodbye, 1);
    OCTET_STRING_free(&asn_DEF_OCTET_STRING, &asn1c_collection.the_choice.choice.goodbye, 1);
    OCTET_STRING_free(&asn_DEF_OCTET_STRING, &second_child_str_1, 1);
    OCTET_STRING_free(&asn_DEF_OCTET_STRING, &second_child_str_2, 1);
    OCTET_STRING_free(&asn_DEF_OCTET_STRING, &second_child_str_3, 1);
    OCTET_STRING_free(&asn_DEF_OCTET_STRING, &second_child_str_4, 1);
    asn_sequence_empty(&asn1c_collection.optional_child->list);
    delete asn1c_collection.child.meaning_of_life;
    delete asn1c_collection.optional_child->meaning_of_life;
    delete asn1c_collection.optional_child;
#endif
}

TEST_CASE("Benchmark: Object Construction Performance")
{
    const std::string long_string = std::string(2000, 'x');
    const std::string hello       = "Hello world!";
    const std::string goodbye     = "Good bye world!";
    const std::string the         = "The";
    const std::string second      = "second";
    const std::string child       = "child";

    BENCHMARK("fast_ber        - construct")
    {
        for (int i = 0; i < iterations; i++)
        {
            fast_ber::Simple::Collection<> collection{
                hello,
                goodbye,
                5,
                fast_ber::Boolean<>(true),
                fast_ber::Simple::Child<fast_ber::Id<fast_ber::Class::context_specific, 4>>{
                    -42, fast_ber::SequenceOf<fast_ber::OctetString<>>{}},
                fast_ber::Simple::Child<fast_ber::Id<fast_ber::Class::context_specific, 5>>{
                    999999999, fast_ber::SequenceOf<fast_ber::OctetString<>>{the, second, child, long_string}},
                decltype(collection.the_choice){fast_ber::in_place_index_t<1>(), "I chose a string!"}};
        }
    }

#ifdef INCLUDE_ASN1C
    BENCHMARK("asn1c           - construct")
    {
        for (int i = 0; i < iterations; i++)
        {
            Collection_t asn1c_collection = {};
            OCTET_STRING_fromString(&asn1c_collection.hello, hello.c_str());
            OCTET_STRING_fromString(&asn1c_collection.goodbye, goodbye.c_str());
            asn1c_collection.integer                         = 5;
            asn1c_collection.boolean                         = true;
            asn1c_collection.child.meaning_of_life           = new long(-42);
            asn1c_collection.optional_child                  = new Child();
            asn1c_collection.optional_child->meaning_of_life = new long(999999999);
            OCTET_STRING_t second_child_str_1                = {};
            OCTET_STRING_t second_child_str_2                = {};
            OCTET_STRING_t second_child_str_3                = {};
            OCTET_STRING_t second_child_str_4                = {};
            OCTET_STRING_fromString(&second_child_str_1, the.c_str());
            OCTET_STRING_fromString(&second_child_str_2, second.c_str());
            OCTET_STRING_fromString(&second_child_str_3, child.c_str());
            OCTET_STRING_fromString(&second_child_str_4, long_string.c_str());
            ASN_SEQUENCE_ADD((void*)&asn1c_collection.optional_child->list, (void*)&second_child_str_1);
            ASN_SEQUENCE_ADD((void*)&asn1c_collection.optional_child->list, (void*)&second_child_str_2);
            ASN_SEQUENCE_ADD((void*)&asn1c_collection.optional_child->list, (void*)&second_child_str_3);
            ASN_SEQUENCE_ADD((void*)&asn1c_collection.optional_child->list, (void*)&second_child_str_4);
            asn1c_collection.the_choice.present = the_choice_PR_goodbye;
            OCTET_STRING_fromString(&asn1c_collection.the_choice.choice.goodbye, "I chose a string!");

            OCTET_STRING_free(&asn_DEF_OCTET_STRING, &asn1c_collection.hello, 1);
            OCTET_STRING_free(&asn_DEF_OCTET_STRING, &asn1c_collection.goodbye, 1);
            OCTET_STRING_free(&asn_DEF_OCTET_STRING, &asn1c_collection.the_choice.choice.goodbye, 1);
            OCTET_STRING_free(&asn_DEF_OCTET_STRING, &second_child_str_1, 1);
            OCTET_STRING_free(&asn_DEF_OCTET_STRING, &second_child_str_2, 1);
            OCTET_STRING_free(&asn_DEF_OCTET_STRING, &second_child_str_3, 1);
            OCTET_STRING_free(&asn_DEF_OCTET_STRING, &second_child_str_4, 1);
            asn_sequence_empty(&asn1c_collection.optional_child->list);

            delete asn1c_collection.child.meaning_of_life;
            delete asn1c_collection.optional_child->meaning_of_life;
            delete asn1c_collection.optional_child;
        }
    }
#endif
}

TEST_CASE("Benchmark: Calculate Encoded Length Performance")
{
    const std::string         long_string     = std::string(2000, 'x');
    const std::string         hello           = "Hello world!";
    const std::string         goodbye         = "Good bye world!";
    const std::string         the             = "The";
    const std::string         second          = "second";
    const std::string         child           = "child";
    std::array<uint8_t, 5000> fast_ber_buffer = {};
    std::array<uint8_t, 5000> asn1c_buffer    = {};
    fast_ber::EncodeResult    encode_result   = {};

    fast_ber::Simple::Collection<> collection{
        hello,
        goodbye,
        5,
        fast_ber::Boolean<>(true),
        fast_ber::Simple::Child<fast_ber::Id<fast_ber::Class::context_specific, 4>>{
            fast_ber::Integer<>(-42), fast_ber::SequenceOf<fast_ber::OctetString<>>{}},
        fast_ber::Simple::Child<fast_ber::Id<fast_ber::Class::context_specific, 5>>{
            999999999, fast_ber::SequenceOf<fast_ber::OctetString<>>{the, second, child, long_string}},
        decltype(collection.the_choice){fast_ber::in_place_index_t<1>(), "I chose a string!"}};

    size_t encoded_length = 0;
    BENCHMARK("fast_ber        - calculate encoded length")
    {
        for (int i = 0; i < iterations; i++)
        {
            encoded_length = fast_ber::encoded_length(collection);
        }
    }
    REQUIRE(encoded_length != 0);
}
