/* Generated by re2c 2.0.3 */
#line 1 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
// A Bison parser, made by GNU Bison 3.3.2.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015, 2018-2019 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.

// Undocumented macros, especially those whose name start with YY_,
// are private implementation details.  Do not rely on them.





// //                    "%code requires" blocks.
#line 10 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:431

    #include "fast_ber/compiler/CompilerTypes.hpp"
    #include "fast_ber/compiler/Logging.hpp"

#line 47 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:431

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>

#if defined __cplusplus
# define YY_CPLUSPLUS __cplusplus
#else
# define YY_CPLUSPLUS 199711L
#endif

// Support move semantics when possible.
#if 201103L <= YY_CPLUSPLUS
# define YY_MOVE           std::move
# define YY_MOVE_OR_COPY   move
# define YY_MOVE_REF(Type) Type&&
# define YY_RVREF(Type)    Type&&
# define YY_COPY(Type)     Type
#else
# define YY_MOVE
# define YY_MOVE_OR_COPY   copy
# define YY_MOVE_REF(Type) Type&
# define YY_RVREF(Type)    const Type&
# define YY_COPY(Type)     const Type&
#endif

// Support noexcept when possible.
#if 201103L <= YY_CPLUSPLUS
# define YY_NOEXCEPT noexcept
# define YY_NOTHROW
#else
# define YY_NOEXCEPT
# define YY_NOTHROW throw ()
#endif

// Support constexpr when possible.
#if 201703 <= YY_CPLUSPLUS
# define YY_CONSTEXPR constexpr
#else
# define YY_CONSTEXPR
#endif

#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif


namespace yy {
#line 163 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:431

  /// A point in a source file.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned l = 1u,
                       unsigned c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {}


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned l = 1u,
                     unsigned c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned line;
    /// Current column number.
    unsigned column;

  private:
    /// Compute max (min, lhs+rhs).
    static unsigned add_ (unsigned lhs, int rhs, int min)
    {
      return static_cast<unsigned> (std::max (min,
                                              static_cast<int> (lhs) + rhs));
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Two points in a source file.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {}

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {}

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned l = 1u,
                       unsigned c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {}


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned l = 1u,
                     unsigned c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A Bison parser.
  class asn1_parser
  {
  public:
#ifndef YYSTYPE
  /// A buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current parser state.
  class semantic_type
  {
  public:
    /// Type of *this.
    typedef semantic_type self_type;

    /// Empty construction.
    semantic_type () YY_NOEXCEPT
      : yybuffer_ ()
      , yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    semantic_type (YY_RVREF (T) t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= size);
      new (yyas_<T> ()) T (YY_MOVE (t));
    }

    /// Destruction, allowed only if empty.
    ~semantic_type () YY_NOEXCEPT
    {
      YYASSERT (!yytypeid_);
    }

# if 201103L <= YY_CPLUSPLUS
    /// Instantiate a \a T in here from \a t.
    template <typename T, typename... U>
    T&
    emplace (U&&... u)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (std::forward <U>(u)...);
    }
# else
    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    emplace ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T ();
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    emplace (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }
# endif

    /// Instantiate an empty \a T in here.
    /// Obsolete, use emplace.
    template <typename T>
    T&
    build ()
    {
      return emplace<T> ();
    }

    /// Instantiate a \a T in here from \a t.
    /// Obsolete, use emplace.
    template <typename T>
    T&
    build (const T& t)
    {
      return emplace<T> (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as () YY_NOEXCEPT
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= size);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const YY_NOEXCEPT
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= size);
      return *yyas_<T> ();
    }

    /// Swap the content with \a that, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsibility.
    /// Swapping between built and (possibly) non-built is done with
    /// self_type::move ().
    template <typename T>
    void
    swap (self_type& that) YY_NOEXCEPT
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *that.yytypeid_);
      std::swap (as<T> (), that.as<T> ());
    }

    /// Move the content of \a that to this.
    ///
    /// Destroys \a that.
    template <typename T>
    void
    move (self_type& that)
    {
# if 201103L <= YY_CPLUSPLUS
      emplace<T> (std::move (that.as<T> ()));
# else
      emplace<T> ();
      swap<T> (that);
# endif
      that.destroy<T> ();
    }

# if 201103L <= YY_CPLUSPLUS
    /// Move the content of \a that to this.
    template <typename T>
    void
    move (self_type&& that)
    {
      emplace<T> (std::move (that.as<T> ()));
      that.destroy<T> ();
    }
#endif

    /// Copy the content of \a that to this.
    template <typename T>
    void
    copy (const self_type& that)
    {
      emplace<T> (that.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator= (const self_type&);
    semantic_type (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ () YY_NOEXCEPT
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const YY_NOEXCEPT
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // ObjectClassAssignment
      // ObjectSetAssignment
      // ParameterizedAssignment
      // ParameterizedTypeAssignment
      // ParameterizedValueAssignment
      // ParameterizedValueSetTypeAssignment
      // ParameterizedObjectClassAssignment
      // Assignment
      // TypeAssignment
      // ValueAssignment
      // ValueSetTypeAssignment
      char dummy1[sizeof (Assignment)];

      // BitStringType
      char dummy2[sizeof (BitStringType)];

      // BooleanType
      char dummy3[sizeof (BooleanType)];

      // BooleanValue
      char dummy4[sizeof (BooleanValue)];

      // BuiltinType
      char dummy5[sizeof (BuiltinType)];

      // CharacterStringType
      // RestrictedCharacterStringType
      // UnrestrictedCharacterStringType
      char dummy6[sizeof (CharacterStringType)];

      // ChoiceType
      char dummy7[sizeof (ChoiceType)];

      // Class
      char dummy8[sizeof (Class)];

      // ComponentType
      char dummy9[sizeof (ComponentType)];

      // ComponentTypeLists
      // ComponentTypeList
      char dummy10[sizeof (ComponentTypeList)];

      // DateTimeType
      char dummy11[sizeof (DateTimeType)];

      // DateType
      char dummy12[sizeof (DateType)];

      // DefinedType
      // ParameterizedType
      // ExternalTypeReference
      char dummy13[sizeof (DefinedType)];

      // DefinedValue
      char dummy14[sizeof (DefinedValue)];

      // DurationType
      char dummy15[sizeof (DurationType)];

      // EmbeddedPDVType
      char dummy16[sizeof (EmbeddedPDVType)];

      // EnumeratedType
      // Enumerations
      // Enumeration
      char dummy17[sizeof (EnumeratedType)];

      // EnumerationItem
      char dummy18[sizeof (EnumerationValue)];

      // ExternalType
      char dummy19[sizeof (ExternalType)];

      // IRIType
      char dummy20[sizeof (IRIType)];

      // SymbolsFromModule
      char dummy21[sizeof (Import)];

      // InstanceOfType
      char dummy22[sizeof (InstanceOfType)];

      // IntegerType
      char dummy23[sizeof (IntegerType)];

      // ModuleBody
      char dummy24[sizeof (Module)];

      // NamedNumber
      char dummy25[sizeof (NamedNumber)];

      // NamedType
      char dummy26[sizeof (NamedType)];

      // NullType
      char dummy27[sizeof (NullType)];

      // ObjectClass
      // ObjectClassDefn
      char dummy28[sizeof (ObjectClassAssignment)];

      // ObjectClassFieldType
      char dummy29[sizeof (ObjectClassFieldType)];

      // ObjIdComponents
      // NameForm
      // NumberForm
      // NameAndNumberForm
      char dummy30[sizeof (ObjectIdComponentValue)];

      // ObjectIdentifierType
      char dummy31[sizeof (ObjectIdentifierType)];

      // OctetStringType
      char dummy32[sizeof (OctetStringType)];

      // Parameter
      char dummy33[sizeof (Parameter)];

      // PrefixedType
      char dummy34[sizeof (PrefixedType)];

      // RealType
      char dummy35[sizeof (RealType)];

      // RelativeIRIType
      char dummy36[sizeof (RelativeIRIType)];

      // RelativeOIDType
      char dummy37[sizeof (RelativeOIDType)];

      // SequenceOfType
      char dummy38[sizeof (SequenceOfType)];

      // SequenceType
      char dummy39[sizeof (SequenceType)];

      // SetOfType
      char dummy40[sizeof (SetOfType)];

      // SetType
      char dummy41[sizeof (SetType)];

      // Tag
      char dummy42[sizeof (Tag)];

      // TaggedType
      char dummy43[sizeof (TaggedType)];

      // TagDefault
      char dummy44[sizeof (TaggingMode)];

      // TimeOfDayType
      char dummy45[sizeof (TimeOfDayType)];

      // TimeType
      char dummy46[sizeof (TimeType)];

      // TimeValue
      char dummy47[sizeof (TimeValue)];

      // ParamGovernor
      // Governor
      // ActualParameter
      // Type
      // ConstrainedType
      // TypeWithConstraint
      char dummy48[sizeof (Type)];

      // ValueWithoutTypeIdentifier
      // Value
      // SingleValue
      char dummy49[sizeof (Value)];

      // realnumber
      char dummy50[sizeof (double)];

      // ClassNumber
      char dummy51[sizeof (int)];

      // number
      // negativenumber
      // SignedNumber
      char dummy52[sizeof (int64_t)];

      // bstring
      // xmlbstring
      // hstring
      // xmlhstring
      // cstring
      // xmlcstring
      // simplestring
      // xmltstring
      // objectreference
      // typefieldreference
      // valuefieldreference
      // GENERIC_IDENTIFIER_UPPERCASE
      // GENERIC_IDENTIFIER_LOWERCASE
      // UsefulObjectClassReference
      // FieldName
      // SimpleDefinedType
      // ModuleIdentifier
      // GlobalModuleReference
      // Symbol
      // Reference
      // typereference
      // identifier
      // valuereference
      // modulereference
      // objectclassreference
      // word
      char dummy53[sizeof (std::string)];

      // AssignmentList
      char dummy54[sizeof (std::vector<Assignment>)];

      // FieldSpecList
      // FieldSpec
      // TypeFieldSpec
      // FixedTypeValueFieldSpec
      char dummy55[sizeof (std::vector<ClassField>)];

      // Exports
      char dummy56[sizeof (std::vector<Export>)];

      // Imports
      // SymbolsImported
      // SymbolsFromModuleList
      char dummy57[sizeof (std::vector<Import>)];

      // NamedNumberList
      char dummy58[sizeof (std::vector<NamedNumber>)];

      // AlternativeTypeLists
      // RootAlternativeTypeList
      // AlternativeTypeList
      char dummy59[sizeof (std::vector<NamedType>)];

      // ObjectIdentifierValue
      // ObjIdComponentsList
      char dummy60[sizeof (std::vector<ObjectIdComponentValue>)];

      // ParameterList
      // ParameterSeries
      char dummy61[sizeof (std::vector<Parameter>)];

      // ActualParameterList
      char dummy62[sizeof (std::vector<Type>)];

      // SequenceOfValues
      char dummy63[sizeof (std::vector<Value>)];

      // FieldNameList
      // OneOrManyTypeFieldReference
      // SymbolList
      char dummy64[sizeof (std::vector<std::string>)];
    };

    /// The size of the largest semantic type.
    enum { size = sizeof (union_type) };

    /// A buffer to store semantic values.
    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[size];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };

#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m)
        : std::runtime_error (m)
        , location (l)
      {}

      syntax_error (const syntax_error& s)
        : std::runtime_error (s.what ())
        , location (s.location)
      {}

      ~syntax_error () YY_NOEXCEPT YY_NOTHROW;

      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        comment = 258,
        number = 259,
        negativenumber = 260,
        realnumber = 261,
        bstring = 262,
        xmlbstring = 263,
        hstring = 264,
        xmlhstring = 265,
        cstring = 266,
        xmlcstring = 267,
        simplestring = 268,
        xmltstring = 269,
        psname = 270,
        encodingreference = 271,
        integerUnicodeLabel = 272,
        tstring = 275,
        objectreference = 277,
        objectsetreference = 278,
        typefieldreference = 279,
        valuefieldreference = 280,
        valuesetfieldreference = 281,
        objectfieldreference = 282,
        objectsetfieldreference = 283,
        ABSENT = 284,
        ABSTRACT_SYNTAX = 285,
        ALL = 286,
        ANY = 287,
        APPLICATION = 288,
        ASN_NULL = 289,
        AUTOMATIC = 290,
        BEGIN = 291,
        BIT = 292,
        BMPString = 293,
        BOOLEAN = 294,
        BY = 295,
        CHARACTER = 296,
        CHOICE = 297,
        CLASS = 298,
        COMPONENT = 299,
        COMPONENTS = 300,
        CONSTRAINED = 301,
        CONTAINING = 302,
        DATE = 303,
        DATE_TIME = 304,
        DEFAULT = 305,
        DEFINITIONS = 306,
        DURATION = 307,
        EMBEDDED = 308,
        ENCODED = 309,
        ENCODING_CONTROL = 310,
        END = 311,
        ENUMERATED = 312,
        EXCEPT = 313,
        EXPLICIT = 314,
        EXPORTS = 315,
        EXTENSIBILITY = 316,
        EXTERNAL = 317,
        FALSE = 318,
        FROM = 319,
        GeneralizedTime = 320,
        GeneralString = 321,
        GraphicString = 322,
        IA5String = 323,
        IDENTIFIER = 324,
        IMPLICIT = 325,
        IMPLIED = 326,
        IMPORTS = 327,
        INCLUDES = 328,
        INSTANCE = 329,
        INSTRUCTIONS = 330,
        INTEGER = 331,
        INTERSECTION = 332,
        ISO646String = 333,
        MAX = 334,
        MIN = 335,
        MINUS_INFINITY = 336,
        NOT_A_NUMBER = 337,
        NumericString = 338,
        OBJECT = 339,
        ObjectDescriptor = 340,
        OCTET = 341,
        OF = 342,
        OID_IRI = 343,
        OPTIONAL = 344,
        PATTERN = 345,
        PDV = 346,
        PLUS_INFINITY = 347,
        PRESENT = 348,
        PrintableString = 349,
        PRIVATE = 350,
        REAL = 351,
        RELATIVE_OID = 352,
        RELATIVE_OID_IRI = 353,
        SEQUENCE = 354,
        SET = 355,
        SETTINGS = 356,
        SIZE = 357,
        STRING = 358,
        SYNTAX = 359,
        T61String = 360,
        TAGS = 361,
        TeletexString = 362,
        TIME = 363,
        TIME_OF_DAY = 364,
        TRUE = 365,
        TYPE_IDENTIFIER = 366,
        UNION = 367,
        UNIQUE = 368,
        UNIVERSAL = 369,
        UniversalString = 370,
        UTCTime = 371,
        UTF8String = 372,
        VideotexString = 373,
        VisibleString = 374,
        WITH = 375,
        DEFINED_AS = 376,
        ELIPSIS = 377,
        RANGE = 378,
        OPEN_BRACE = 379,
        CLOSE_BRACE = 380,
        OPEN_PARENTHESIS = 381,
        CLOSE_PARENTHESIS = 382,
        OPEN_SQUARE_BRACKET = 383,
        CLOSE_SQUARE_BRACKET = 384,
        LESS_THAN = 385,
        GREATER_THAN = 386,
        EXCLAMATION_MARK = 387,
        QUOTATION_MARK = 388,
        AMPERSAND = 389,
        APOSTROPHE = 390,
        ASTERISK = 391,
        COMMA = 392,
        FULL_STOP = 393,
        HYPHEN_MINUS = 394,
        SOLIDUS = 395,
        COLON = 396,
        SEMICOLON = 397,
        EQUALS_SIGN = 398,
        AT = 399,
        VERTICAL_LINE = 400,
        ACCENT = 401,
        PLUS = 402,
        STAR = 403,
        GENERIC_IDENTIFIER_UPPERCASE = 404,
        GENERIC_IDENTIFIER_LOWERCASE = 405,
        GENERIC_INTEGER = 406,
        xmlasn1typename = 407
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get ().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ()
        : value ()
        , location ()
      {}

#if 201103L <= YY_CPLUSPLUS
      /// Move constructor.
      basic_symbol (basic_symbol&& that);
#endif

      /// Copy constructor.
      basic_symbol (const basic_symbol& that);

      /// Constructor for valueless symbols, and symbols from each type.
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, location_type&& l)
        : Base (t)
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const location_type& l)
        : Base (t)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Assignment&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Assignment& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, BitStringType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const BitStringType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, BooleanType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const BooleanType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, BooleanValue&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const BooleanValue& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, BuiltinType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const BuiltinType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, CharacterStringType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const CharacterStringType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ChoiceType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ChoiceType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Class&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Class& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ComponentType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ComponentType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ComponentTypeList&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ComponentTypeList& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, DateTimeType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const DateTimeType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, DateType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const DateType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, DefinedType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const DefinedType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, DefinedValue&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const DefinedValue& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, DurationType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const DurationType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, EmbeddedPDVType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const EmbeddedPDVType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, EnumeratedType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const EnumeratedType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, EnumerationValue&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const EnumerationValue& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ExternalType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ExternalType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IRIType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IRIType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Import&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Import& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, InstanceOfType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const InstanceOfType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IntegerType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IntegerType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Module&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Module& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, NamedNumber&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const NamedNumber& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, NamedType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const NamedType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, NullType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const NullType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ObjectClassAssignment&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ObjectClassAssignment& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ObjectClassFieldType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ObjectClassFieldType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ObjectIdComponentValue&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ObjectIdentifierType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ObjectIdentifierType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, OctetStringType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const OctetStringType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Parameter&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Parameter& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, PrefixedType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const PrefixedType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, RealType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const RealType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, RelativeIRIType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const RelativeIRIType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, RelativeOIDType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const RelativeOIDType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, SequenceOfType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const SequenceOfType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, SequenceType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const SequenceType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, SetOfType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const SetOfType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, SetType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const SetType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Tag&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Tag& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, TaggedType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const TaggedType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, TaggingMode&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const TaggingMode& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, TimeOfDayType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const TimeOfDayType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, TimeType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const TimeType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, TimeValue&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const TimeValue& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Type&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Type& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Value&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Value& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, double&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const double& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, int&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const int& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, int64_t&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const int64_t& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::string&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::string& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Assignment>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Assignment>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<ClassField>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<ClassField>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Export>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Export>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Import>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Import>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<NamedNumber>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<NamedNumber>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<NamedType>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<NamedType>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<ObjectIdComponentValue>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Parameter>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Parameter>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Type>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Type>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Value>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Value>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<std::string>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<std::string>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif

      /// Destroy the symbol.
      ~basic_symbol ()
      {
        clear ();
      }

      /// Destroy contents, and record that is empty.
      void clear ()
      {
        // User destructor.
        symbol_number_type yytype = this->type_get ();
        basic_symbol<Base>& yysym = *this;
        (void) yysym;
        switch (yytype)
        {
       default:
          break;
        }

        // Type destructor.
switch (yytype)
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.template destroy< Assignment > ();
        break;

      case 283: // BitStringType
        value.template destroy< BitStringType > ();
        break;

      case 272: // BooleanType
        value.template destroy< BooleanType > ();
        break;

      case 273: // BooleanValue
        value.template destroy< BooleanValue > ();
        break;

      case 264: // BuiltinType
        value.template destroy< BuiltinType > ();
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.template destroy< CharacterStringType > ();
        break;

      case 295: // ChoiceType
        value.template destroy< ChoiceType > ();
        break;

      case 305: // Class
        value.template destroy< Class > ();
        break;

      case 291: // ComponentType
        value.template destroy< ComponentType > ();
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.template destroy< ComponentTypeList > ();
        break;

      case 326: // DateTimeType
        value.template destroy< DateTimeType > ();
        break;

      case 324: // DateType
        value.template destroy< DateType > ();
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.template destroy< DefinedType > ();
        break;

      case 253: // DefinedValue
        value.template destroy< DefinedValue > ();
        break;

      case 327: // DurationType
        value.template destroy< DurationType > ();
        break;

      case 320: // EmbeddedPDVType
        value.template destroy< EmbeddedPDVType > ();
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.template destroy< EnumeratedType > ();
        break;

      case 281: // EnumerationItem
        value.template destroy< EnumerationValue > ();
        break;

      case 321: // ExternalType
        value.template destroy< ExternalType > ();
        break;

      case 314: // IRIType
        value.template destroy< IRIType > ();
        break;

      case 245: // SymbolsFromModule
        value.template destroy< Import > ();
        break;

      case 215: // InstanceOfType
        value.template destroy< InstanceOfType > ();
        break;

      case 274: // IntegerType
        value.template destroy< IntegerType > ();
        break;

      case 239: // ModuleBody
        value.template destroy< Module > ();
        break;

      case 276: // NamedNumber
        value.template destroy< NamedNumber > ();
        break;

      case 265: // NamedType
        value.template destroy< NamedType > ();
        break;

      case 287: // NullType
        value.template destroy< NullType > ();
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.template destroy< ObjectClassAssignment > ();
        break;

      case 202: // ObjectClassFieldType
        value.template destroy< ObjectClassFieldType > ();
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.template destroy< ObjectIdComponentValue > ();
        break;

      case 306: // ObjectIdentifierType
        value.template destroy< ObjectIdentifierType > ();
        break;

      case 286: // OctetStringType
        value.template destroy< OctetStringType > ();
        break;

      case 210: // Parameter
        value.template destroy< Parameter > ();
        break;

      case 300: // PrefixedType
        value.template destroy< PrefixedType > ();
        break;

      case 282: // RealType
        value.template destroy< RealType > ();
        break;

      case 319: // RelativeIRIType
        value.template destroy< RelativeIRIType > ();
        break;

      case 313: // RelativeOIDType
        value.template destroy< RelativeOIDType > ();
        break;

      case 292: // SequenceOfType
        value.template destroy< SequenceOfType > ();
        break;

      case 288: // SequenceType
        value.template destroy< SequenceType > ();
        break;

      case 294: // SetOfType
        value.template destroy< SetOfType > ();
        break;

      case 293: // SetType
        value.template destroy< SetType > ();
        break;

      case 302: // Tag
        value.template destroy< Tag > ();
        break;

      case 301: // TaggedType
        value.template destroy< TaggedType > ();
        break;

      case 237: // TagDefault
        value.template destroy< TaggingMode > ();
        break;

      case 325: // TimeOfDayType
        value.template destroy< TimeOfDayType > ();
        break;

      case 322: // TimeType
        value.template destroy< TimeType > ();
        break;

      case 323: // TimeValue
        value.template destroy< TimeValue > ();
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.template destroy< Type > ();
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.template destroy< Value > ();
        break;

      case 6: // realnumber
        value.template destroy< double > ();
        break;

      case 304: // ClassNumber
        value.template destroy< int > ();
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.template destroy< int64_t > ();
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.template destroy< std::string > ();
        break;

      case 250: // AssignmentList
        value.template destroy< std::vector<Assignment> > ();
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.template destroy< std::vector<ClassField> > ();
        break;

      case 240: // Exports
        value.template destroy< std::vector<Export> > ();
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.template destroy< std::vector<Import> > ();
        break;

      case 275: // NamedNumberList
        value.template destroy< std::vector<NamedNumber> > ();
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.template destroy< std::vector<NamedType> > ();
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.template destroy< std::vector<ObjectIdComponentValue> > ();
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.template destroy< std::vector<Parameter> > ();
        break;

      case 256: // ActualParameterList
        value.template destroy< std::vector<Type> > ();
        break;

      case 271: // SequenceOfValues
        value.template destroy< std::vector<Value> > ();
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.template destroy< std::vector<std::string> > ();
        break;

      default:
        break;
    }

        Base::clear ();
      }

      /// Whether empty.
      bool empty () const YY_NOEXCEPT;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
#if YY_CPLUSPLUS < 201103L
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& that);
#endif
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

#if 201103L <= YY_CPLUSPLUS
      /// Move constructor.
      by_type (by_type&& that);
#endif

      /// Copy constructor.
      by_type (const by_type& that);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const YY_NOEXCEPT;

      /// The token.
      token_type token () const YY_NOEXCEPT;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    struct symbol_type : basic_symbol<by_type>
    {
      /// Superclass.
      typedef basic_symbol<by_type> super_type;

      /// Empty symbol.
      symbol_type () {}

      /// Constructor for valueless symbols, and symbols from each type.
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, location_type l)
        : super_type(token_type (tok), std::move (l))
      {
        YYASSERT (tok == token::END_OF_FILE || tok == token::comment || tok == token::psname || tok == token::encodingreference || tok == token::integerUnicodeLabel || tok == 273 || tok == 274 || tok == token::tstring || tok == 276 || tok == token::objectsetreference || tok == token::valuesetfieldreference || tok == token::objectfieldreference || tok == token::objectsetfieldreference || tok == token::ABSENT || tok == token::ABSTRACT_SYNTAX || tok == token::ALL || tok == token::ANY || tok == token::APPLICATION || tok == token::ASN_NULL || tok == token::AUTOMATIC || tok == token::BEGIN || tok == token::BIT || tok == token::BMPString || tok == token::BOOLEAN || tok == token::BY || tok == token::CHARACTER || tok == token::CHOICE || tok == token::CLASS || tok == token::COMPONENT || tok == token::COMPONENTS || tok == token::CONSTRAINED || tok == token::CONTAINING || tok == token::DATE || tok == token::DATE_TIME || tok == token::DEFAULT || tok == token::DEFINITIONS || tok == token::DURATION || tok == token::EMBEDDED || tok == token::ENCODED || tok == token::ENCODING_CONTROL || tok == token::END || tok == token::ENUMERATED || tok == token::EXCEPT || tok == token::EXPLICIT || tok == token::EXPORTS || tok == token::EXTENSIBILITY || tok == token::EXTERNAL || tok == token::FALSE || tok == token::FROM || tok == token::GeneralizedTime || tok == token::GeneralString || tok == token::GraphicString || tok == token::IA5String || tok == token::IDENTIFIER || tok == token::IMPLICIT || tok == token::IMPLIED || tok == token::IMPORTS || tok == token::INCLUDES || tok == token::INSTANCE || tok == token::INSTRUCTIONS || tok == token::INTEGER || tok == token::INTERSECTION || tok == token::ISO646String || tok == token::MAX || tok == token::MIN || tok == token::MINUS_INFINITY || tok == token::NOT_A_NUMBER || tok == token::NumericString || tok == token::OBJECT || tok == token::ObjectDescriptor || tok == token::OCTET || tok == token::OF || tok == token::OID_IRI || tok == token::OPTIONAL || tok == token::PATTERN || tok == token::PDV || tok == token::PLUS_INFINITY || tok == token::PRESENT || tok == token::PrintableString || tok == token::PRIVATE || tok == token::REAL || tok == token::RELATIVE_OID || tok == token::RELATIVE_OID_IRI || tok == token::SEQUENCE || tok == token::SET || tok == token::SETTINGS || tok == token::SIZE || tok == token::STRING || tok == token::SYNTAX || tok == token::T61String || tok == token::TAGS || tok == token::TeletexString || tok == token::TIME || tok == token::TIME_OF_DAY || tok == token::TRUE || tok == token::TYPE_IDENTIFIER || tok == token::UNION || tok == token::UNIQUE || tok == token::UNIVERSAL || tok == token::UniversalString || tok == token::UTCTime || tok == token::UTF8String || tok == token::VideotexString || tok == token::VisibleString || tok == token::WITH || tok == token::DEFINED_AS || tok == token::ELIPSIS || tok == token::RANGE || tok == token::OPEN_BRACE || tok == token::CLOSE_BRACE || tok == token::OPEN_PARENTHESIS || tok == token::CLOSE_PARENTHESIS || tok == token::OPEN_SQUARE_BRACKET || tok == token::CLOSE_SQUARE_BRACKET || tok == token::LESS_THAN || tok == token::GREATER_THAN || tok == token::EXCLAMATION_MARK || tok == token::QUOTATION_MARK || tok == token::AMPERSAND || tok == token::APOSTROPHE || tok == token::ASTERISK || tok == token::COMMA || tok == token::FULL_STOP || tok == token::HYPHEN_MINUS || tok == token::SOLIDUS || tok == token::COLON || tok == token::SEMICOLON || tok == token::EQUALS_SIGN || tok == token::AT || tok == token::VERTICAL_LINE || tok == token::ACCENT || tok == token::PLUS || tok == token::STAR || tok == token::GENERIC_INTEGER || tok == token::xmlasn1typename);
      }
#else
      symbol_type (int tok, const location_type& l)
        : super_type(token_type (tok), l)
      {
        YYASSERT (tok == token::END_OF_FILE || tok == token::comment || tok == token::psname || tok == token::encodingreference || tok == token::integerUnicodeLabel || tok == 273 || tok == 274 || tok == token::tstring || tok == 276 || tok == token::objectsetreference || tok == token::valuesetfieldreference || tok == token::objectfieldreference || tok == token::objectsetfieldreference || tok == token::ABSENT || tok == token::ABSTRACT_SYNTAX || tok == token::ALL || tok == token::ANY || tok == token::APPLICATION || tok == token::ASN_NULL || tok == token::AUTOMATIC || tok == token::BEGIN || tok == token::BIT || tok == token::BMPString || tok == token::BOOLEAN || tok == token::BY || tok == token::CHARACTER || tok == token::CHOICE || tok == token::CLASS || tok == token::COMPONENT || tok == token::COMPONENTS || tok == token::CONSTRAINED || tok == token::CONTAINING || tok == token::DATE || tok == token::DATE_TIME || tok == token::DEFAULT || tok == token::DEFINITIONS || tok == token::DURATION || tok == token::EMBEDDED || tok == token::ENCODED || tok == token::ENCODING_CONTROL || tok == token::END || tok == token::ENUMERATED || tok == token::EXCEPT || tok == token::EXPLICIT || tok == token::EXPORTS || tok == token::EXTENSIBILITY || tok == token::EXTERNAL || tok == token::FALSE || tok == token::FROM || tok == token::GeneralizedTime || tok == token::GeneralString || tok == token::GraphicString || tok == token::IA5String || tok == token::IDENTIFIER || tok == token::IMPLICIT || tok == token::IMPLIED || tok == token::IMPORTS || tok == token::INCLUDES || tok == token::INSTANCE || tok == token::INSTRUCTIONS || tok == token::INTEGER || tok == token::INTERSECTION || tok == token::ISO646String || tok == token::MAX || tok == token::MIN || tok == token::MINUS_INFINITY || tok == token::NOT_A_NUMBER || tok == token::NumericString || tok == token::OBJECT || tok == token::ObjectDescriptor || tok == token::OCTET || tok == token::OF || tok == token::OID_IRI || tok == token::OPTIONAL || tok == token::PATTERN || tok == token::PDV || tok == token::PLUS_INFINITY || tok == token::PRESENT || tok == token::PrintableString || tok == token::PRIVATE || tok == token::REAL || tok == token::RELATIVE_OID || tok == token::RELATIVE_OID_IRI || tok == token::SEQUENCE || tok == token::SET || tok == token::SETTINGS || tok == token::SIZE || tok == token::STRING || tok == token::SYNTAX || tok == token::T61String || tok == token::TAGS || tok == token::TeletexString || tok == token::TIME || tok == token::TIME_OF_DAY || tok == token::TRUE || tok == token::TYPE_IDENTIFIER || tok == token::UNION || tok == token::UNIQUE || tok == token::UNIVERSAL || tok == token::UniversalString || tok == token::UTCTime || tok == token::UTF8String || tok == token::VideotexString || tok == token::VisibleString || tok == token::WITH || tok == token::DEFINED_AS || tok == token::ELIPSIS || tok == token::RANGE || tok == token::OPEN_BRACE || tok == token::CLOSE_BRACE || tok == token::OPEN_PARENTHESIS || tok == token::CLOSE_PARENTHESIS || tok == token::OPEN_SQUARE_BRACKET || tok == token::CLOSE_SQUARE_BRACKET || tok == token::LESS_THAN || tok == token::GREATER_THAN || tok == token::EXCLAMATION_MARK || tok == token::QUOTATION_MARK || tok == token::AMPERSAND || tok == token::APOSTROPHE || tok == token::ASTERISK || tok == token::COMMA || tok == token::FULL_STOP || tok == token::HYPHEN_MINUS || tok == token::SOLIDUS || tok == token::COLON || tok == token::SEMICOLON || tok == token::EQUALS_SIGN || tok == token::AT || tok == token::VERTICAL_LINE || tok == token::ACCENT || tok == token::PLUS || tok == token::STAR || tok == token::GENERIC_INTEGER || tok == token::xmlasn1typename);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, double v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YYASSERT (tok == token::realnumber);
      }
#else
      symbol_type (int tok, const double& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YYASSERT (tok == token::realnumber);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, int64_t v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YYASSERT (tok == token::number || tok == token::negativenumber);
      }
#else
      symbol_type (int tok, const int64_t& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YYASSERT (tok == token::number || tok == token::negativenumber);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, std::string v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YYASSERT (tok == token::bstring || tok == token::xmlbstring || tok == token::hstring || tok == token::xmlhstring || tok == token::cstring || tok == token::xmlcstring || tok == token::simplestring || tok == token::xmltstring || tok == token::objectreference || tok == token::typefieldreference || tok == token::valuefieldreference || tok == token::GENERIC_IDENTIFIER_UPPERCASE || tok == token::GENERIC_IDENTIFIER_LOWERCASE);
      }
#else
      symbol_type (int tok, const std::string& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YYASSERT (tok == token::bstring || tok == token::xmlbstring || tok == token::hstring || tok == token::xmlhstring || tok == token::cstring || tok == token::xmlcstring || tok == token::simplestring || tok == token::xmltstring || tok == token::objectreference || tok == token::typefieldreference || tok == token::valuefieldreference || tok == token::GENERIC_IDENTIFIER_UPPERCASE || tok == token::GENERIC_IDENTIFIER_LOWERCASE);
      }
#endif
    };

    /// Build a parser object.
    asn1_parser (Context& context_yyarg);
    virtual ~asn1_parser ();

    /// Parse.  An alias for parse ().
    /// \returns  0 iff parsing succeeded.
    int operator() ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

    // Implementation of make_symbol for each symbol type.
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_END_OF_FILE (location_type l)
      {
        return symbol_type (token::END_OF_FILE, std::move (l));
      }
#else
      static
      symbol_type
      make_END_OF_FILE (const location_type& l)
      {
        return symbol_type (token::END_OF_FILE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_comment (location_type l)
      {
        return symbol_type (token::comment, std::move (l));
      }
#else
      static
      symbol_type
      make_comment (const location_type& l)
      {
        return symbol_type (token::comment, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_number (int64_t v, location_type l)
      {
        return symbol_type (token::number, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_number (const int64_t& v, const location_type& l)
      {
        return symbol_type (token::number, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_negativenumber (int64_t v, location_type l)
      {
        return symbol_type (token::negativenumber, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_negativenumber (const int64_t& v, const location_type& l)
      {
        return symbol_type (token::negativenumber, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_realnumber (double v, location_type l)
      {
        return symbol_type (token::realnumber, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_realnumber (const double& v, const location_type& l)
      {
        return symbol_type (token::realnumber, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_bstring (std::string v, location_type l)
      {
        return symbol_type (token::bstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_bstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::bstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_xmlbstring (std::string v, location_type l)
      {
        return symbol_type (token::xmlbstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_xmlbstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::xmlbstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_hstring (std::string v, location_type l)
      {
        return symbol_type (token::hstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_hstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::hstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_xmlhstring (std::string v, location_type l)
      {
        return symbol_type (token::xmlhstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_xmlhstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::xmlhstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_cstring (std::string v, location_type l)
      {
        return symbol_type (token::cstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_cstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::cstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_xmlcstring (std::string v, location_type l)
      {
        return symbol_type (token::xmlcstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_xmlcstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::xmlcstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_simplestring (std::string v, location_type l)
      {
        return symbol_type (token::simplestring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_simplestring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::simplestring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_xmltstring (std::string v, location_type l)
      {
        return symbol_type (token::xmltstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_xmltstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::xmltstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_psname (location_type l)
      {
        return symbol_type (token::psname, std::move (l));
      }
#else
      static
      symbol_type
      make_psname (const location_type& l)
      {
        return symbol_type (token::psname, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_encodingreference (location_type l)
      {
        return symbol_type (token::encodingreference, std::move (l));
      }
#else
      static
      symbol_type
      make_encodingreference (const location_type& l)
      {
        return symbol_type (token::encodingreference, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_integerUnicodeLabel (location_type l)
      {
        return symbol_type (token::integerUnicodeLabel, std::move (l));
      }
#else
      static
      symbol_type
      make_integerUnicodeLabel (const location_type& l)
      {
        return symbol_type (token::integerUnicodeLabel, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_tstring (location_type l)
      {
        return symbol_type (token::tstring, std::move (l));
      }
#else
      static
      symbol_type
      make_tstring (const location_type& l)
      {
        return symbol_type (token::tstring, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_objectreference (std::string v, location_type l)
      {
        return symbol_type (token::objectreference, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_objectreference (const std::string& v, const location_type& l)
      {
        return symbol_type (token::objectreference, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_objectsetreference (location_type l)
      {
        return symbol_type (token::objectsetreference, std::move (l));
      }
#else
      static
      symbol_type
      make_objectsetreference (const location_type& l)
      {
        return symbol_type (token::objectsetreference, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_typefieldreference (std::string v, location_type l)
      {
        return symbol_type (token::typefieldreference, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_typefieldreference (const std::string& v, const location_type& l)
      {
        return symbol_type (token::typefieldreference, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_valuefieldreference (std::string v, location_type l)
      {
        return symbol_type (token::valuefieldreference, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_valuefieldreference (const std::string& v, const location_type& l)
      {
        return symbol_type (token::valuefieldreference, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_valuesetfieldreference (location_type l)
      {
        return symbol_type (token::valuesetfieldreference, std::move (l));
      }
#else
      static
      symbol_type
      make_valuesetfieldreference (const location_type& l)
      {
        return symbol_type (token::valuesetfieldreference, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_objectfieldreference (location_type l)
      {
        return symbol_type (token::objectfieldreference, std::move (l));
      }
#else
      static
      symbol_type
      make_objectfieldreference (const location_type& l)
      {
        return symbol_type (token::objectfieldreference, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_objectsetfieldreference (location_type l)
      {
        return symbol_type (token::objectsetfieldreference, std::move (l));
      }
#else
      static
      symbol_type
      make_objectsetfieldreference (const location_type& l)
      {
        return symbol_type (token::objectsetfieldreference, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ABSENT (location_type l)
      {
        return symbol_type (token::ABSENT, std::move (l));
      }
#else
      static
      symbol_type
      make_ABSENT (const location_type& l)
      {
        return symbol_type (token::ABSENT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ABSTRACT_SYNTAX (location_type l)
      {
        return symbol_type (token::ABSTRACT_SYNTAX, std::move (l));
      }
#else
      static
      symbol_type
      make_ABSTRACT_SYNTAX (const location_type& l)
      {
        return symbol_type (token::ABSTRACT_SYNTAX, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ALL (location_type l)
      {
        return symbol_type (token::ALL, std::move (l));
      }
#else
      static
      symbol_type
      make_ALL (const location_type& l)
      {
        return symbol_type (token::ALL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ANY (location_type l)
      {
        return symbol_type (token::ANY, std::move (l));
      }
#else
      static
      symbol_type
      make_ANY (const location_type& l)
      {
        return symbol_type (token::ANY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_APPLICATION (location_type l)
      {
        return symbol_type (token::APPLICATION, std::move (l));
      }
#else
      static
      symbol_type
      make_APPLICATION (const location_type& l)
      {
        return symbol_type (token::APPLICATION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ASN_NULL (location_type l)
      {
        return symbol_type (token::ASN_NULL, std::move (l));
      }
#else
      static
      symbol_type
      make_ASN_NULL (const location_type& l)
      {
        return symbol_type (token::ASN_NULL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_AUTOMATIC (location_type l)
      {
        return symbol_type (token::AUTOMATIC, std::move (l));
      }
#else
      static
      symbol_type
      make_AUTOMATIC (const location_type& l)
      {
        return symbol_type (token::AUTOMATIC, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BEGIN (location_type l)
      {
        return symbol_type (token::BEGIN, std::move (l));
      }
#else
      static
      symbol_type
      make_BEGIN (const location_type& l)
      {
        return symbol_type (token::BEGIN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BIT (location_type l)
      {
        return symbol_type (token::BIT, std::move (l));
      }
#else
      static
      symbol_type
      make_BIT (const location_type& l)
      {
        return symbol_type (token::BIT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BMPString (location_type l)
      {
        return symbol_type (token::BMPString, std::move (l));
      }
#else
      static
      symbol_type
      make_BMPString (const location_type& l)
      {
        return symbol_type (token::BMPString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BOOLEAN (location_type l)
      {
        return symbol_type (token::BOOLEAN, std::move (l));
      }
#else
      static
      symbol_type
      make_BOOLEAN (const location_type& l)
      {
        return symbol_type (token::BOOLEAN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BY (location_type l)
      {
        return symbol_type (token::BY, std::move (l));
      }
#else
      static
      symbol_type
      make_BY (const location_type& l)
      {
        return symbol_type (token::BY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CHARACTER (location_type l)
      {
        return symbol_type (token::CHARACTER, std::move (l));
      }
#else
      static
      symbol_type
      make_CHARACTER (const location_type& l)
      {
        return symbol_type (token::CHARACTER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CHOICE (location_type l)
      {
        return symbol_type (token::CHOICE, std::move (l));
      }
#else
      static
      symbol_type
      make_CHOICE (const location_type& l)
      {
        return symbol_type (token::CHOICE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CLASS (location_type l)
      {
        return symbol_type (token::CLASS, std::move (l));
      }
#else
      static
      symbol_type
      make_CLASS (const location_type& l)
      {
        return symbol_type (token::CLASS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COMPONENT (location_type l)
      {
        return symbol_type (token::COMPONENT, std::move (l));
      }
#else
      static
      symbol_type
      make_COMPONENT (const location_type& l)
      {
        return symbol_type (token::COMPONENT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COMPONENTS (location_type l)
      {
        return symbol_type (token::COMPONENTS, std::move (l));
      }
#else
      static
      symbol_type
      make_COMPONENTS (const location_type& l)
      {
        return symbol_type (token::COMPONENTS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CONSTRAINED (location_type l)
      {
        return symbol_type (token::CONSTRAINED, std::move (l));
      }
#else
      static
      symbol_type
      make_CONSTRAINED (const location_type& l)
      {
        return symbol_type (token::CONSTRAINED, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CONTAINING (location_type l)
      {
        return symbol_type (token::CONTAINING, std::move (l));
      }
#else
      static
      symbol_type
      make_CONTAINING (const location_type& l)
      {
        return symbol_type (token::CONTAINING, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DATE (location_type l)
      {
        return symbol_type (token::DATE, std::move (l));
      }
#else
      static
      symbol_type
      make_DATE (const location_type& l)
      {
        return symbol_type (token::DATE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DATE_TIME (location_type l)
      {
        return symbol_type (token::DATE_TIME, std::move (l));
      }
#else
      static
      symbol_type
      make_DATE_TIME (const location_type& l)
      {
        return symbol_type (token::DATE_TIME, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DEFAULT (location_type l)
      {
        return symbol_type (token::DEFAULT, std::move (l));
      }
#else
      static
      symbol_type
      make_DEFAULT (const location_type& l)
      {
        return symbol_type (token::DEFAULT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DEFINITIONS (location_type l)
      {
        return symbol_type (token::DEFINITIONS, std::move (l));
      }
#else
      static
      symbol_type
      make_DEFINITIONS (const location_type& l)
      {
        return symbol_type (token::DEFINITIONS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DURATION (location_type l)
      {
        return symbol_type (token::DURATION, std::move (l));
      }
#else
      static
      symbol_type
      make_DURATION (const location_type& l)
      {
        return symbol_type (token::DURATION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EMBEDDED (location_type l)
      {
        return symbol_type (token::EMBEDDED, std::move (l));
      }
#else
      static
      symbol_type
      make_EMBEDDED (const location_type& l)
      {
        return symbol_type (token::EMBEDDED, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ENCODED (location_type l)
      {
        return symbol_type (token::ENCODED, std::move (l));
      }
#else
      static
      symbol_type
      make_ENCODED (const location_type& l)
      {
        return symbol_type (token::ENCODED, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ENCODING_CONTROL (location_type l)
      {
        return symbol_type (token::ENCODING_CONTROL, std::move (l));
      }
#else
      static
      symbol_type
      make_ENCODING_CONTROL (const location_type& l)
      {
        return symbol_type (token::ENCODING_CONTROL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_END (location_type l)
      {
        return symbol_type (token::END, std::move (l));
      }
#else
      static
      symbol_type
      make_END (const location_type& l)
      {
        return symbol_type (token::END, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ENUMERATED (location_type l)
      {
        return symbol_type (token::ENUMERATED, std::move (l));
      }
#else
      static
      symbol_type
      make_ENUMERATED (const location_type& l)
      {
        return symbol_type (token::ENUMERATED, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXCEPT (location_type l)
      {
        return symbol_type (token::EXCEPT, std::move (l));
      }
#else
      static
      symbol_type
      make_EXCEPT (const location_type& l)
      {
        return symbol_type (token::EXCEPT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXPLICIT (location_type l)
      {
        return symbol_type (token::EXPLICIT, std::move (l));
      }
#else
      static
      symbol_type
      make_EXPLICIT (const location_type& l)
      {
        return symbol_type (token::EXPLICIT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXPORTS (location_type l)
      {
        return symbol_type (token::EXPORTS, std::move (l));
      }
#else
      static
      symbol_type
      make_EXPORTS (const location_type& l)
      {
        return symbol_type (token::EXPORTS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXTENSIBILITY (location_type l)
      {
        return symbol_type (token::EXTENSIBILITY, std::move (l));
      }
#else
      static
      symbol_type
      make_EXTENSIBILITY (const location_type& l)
      {
        return symbol_type (token::EXTENSIBILITY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXTERNAL (location_type l)
      {
        return symbol_type (token::EXTERNAL, std::move (l));
      }
#else
      static
      symbol_type
      make_EXTERNAL (const location_type& l)
      {
        return symbol_type (token::EXTERNAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FALSE (location_type l)
      {
        return symbol_type (token::FALSE, std::move (l));
      }
#else
      static
      symbol_type
      make_FALSE (const location_type& l)
      {
        return symbol_type (token::FALSE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FROM (location_type l)
      {
        return symbol_type (token::FROM, std::move (l));
      }
#else
      static
      symbol_type
      make_FROM (const location_type& l)
      {
        return symbol_type (token::FROM, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GeneralizedTime (location_type l)
      {
        return symbol_type (token::GeneralizedTime, std::move (l));
      }
#else
      static
      symbol_type
      make_GeneralizedTime (const location_type& l)
      {
        return symbol_type (token::GeneralizedTime, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GeneralString (location_type l)
      {
        return symbol_type (token::GeneralString, std::move (l));
      }
#else
      static
      symbol_type
      make_GeneralString (const location_type& l)
      {
        return symbol_type (token::GeneralString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GraphicString (location_type l)
      {
        return symbol_type (token::GraphicString, std::move (l));
      }
#else
      static
      symbol_type
      make_GraphicString (const location_type& l)
      {
        return symbol_type (token::GraphicString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IA5String (location_type l)
      {
        return symbol_type (token::IA5String, std::move (l));
      }
#else
      static
      symbol_type
      make_IA5String (const location_type& l)
      {
        return symbol_type (token::IA5String, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IDENTIFIER (location_type l)
      {
        return symbol_type (token::IDENTIFIER, std::move (l));
      }
#else
      static
      symbol_type
      make_IDENTIFIER (const location_type& l)
      {
        return symbol_type (token::IDENTIFIER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IMPLICIT (location_type l)
      {
        return symbol_type (token::IMPLICIT, std::move (l));
      }
#else
      static
      symbol_type
      make_IMPLICIT (const location_type& l)
      {
        return symbol_type (token::IMPLICIT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IMPLIED (location_type l)
      {
        return symbol_type (token::IMPLIED, std::move (l));
      }
#else
      static
      symbol_type
      make_IMPLIED (const location_type& l)
      {
        return symbol_type (token::IMPLIED, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IMPORTS (location_type l)
      {
        return symbol_type (token::IMPORTS, std::move (l));
      }
#else
      static
      symbol_type
      make_IMPORTS (const location_type& l)
      {
        return symbol_type (token::IMPORTS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INCLUDES (location_type l)
      {
        return symbol_type (token::INCLUDES, std::move (l));
      }
#else
      static
      symbol_type
      make_INCLUDES (const location_type& l)
      {
        return symbol_type (token::INCLUDES, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INSTANCE (location_type l)
      {
        return symbol_type (token::INSTANCE, std::move (l));
      }
#else
      static
      symbol_type
      make_INSTANCE (const location_type& l)
      {
        return symbol_type (token::INSTANCE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INSTRUCTIONS (location_type l)
      {
        return symbol_type (token::INSTRUCTIONS, std::move (l));
      }
#else
      static
      symbol_type
      make_INSTRUCTIONS (const location_type& l)
      {
        return symbol_type (token::INSTRUCTIONS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INTEGER (location_type l)
      {
        return symbol_type (token::INTEGER, std::move (l));
      }
#else
      static
      symbol_type
      make_INTEGER (const location_type& l)
      {
        return symbol_type (token::INTEGER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INTERSECTION (location_type l)
      {
        return symbol_type (token::INTERSECTION, std::move (l));
      }
#else
      static
      symbol_type
      make_INTERSECTION (const location_type& l)
      {
        return symbol_type (token::INTERSECTION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ISO646String (location_type l)
      {
        return symbol_type (token::ISO646String, std::move (l));
      }
#else
      static
      symbol_type
      make_ISO646String (const location_type& l)
      {
        return symbol_type (token::ISO646String, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MAX (location_type l)
      {
        return symbol_type (token::MAX, std::move (l));
      }
#else
      static
      symbol_type
      make_MAX (const location_type& l)
      {
        return symbol_type (token::MAX, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MIN (location_type l)
      {
        return symbol_type (token::MIN, std::move (l));
      }
#else
      static
      symbol_type
      make_MIN (const location_type& l)
      {
        return symbol_type (token::MIN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MINUS_INFINITY (location_type l)
      {
        return symbol_type (token::MINUS_INFINITY, std::move (l));
      }
#else
      static
      symbol_type
      make_MINUS_INFINITY (const location_type& l)
      {
        return symbol_type (token::MINUS_INFINITY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NOT_A_NUMBER (location_type l)
      {
        return symbol_type (token::NOT_A_NUMBER, std::move (l));
      }
#else
      static
      symbol_type
      make_NOT_A_NUMBER (const location_type& l)
      {
        return symbol_type (token::NOT_A_NUMBER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NumericString (location_type l)
      {
        return symbol_type (token::NumericString, std::move (l));
      }
#else
      static
      symbol_type
      make_NumericString (const location_type& l)
      {
        return symbol_type (token::NumericString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OBJECT (location_type l)
      {
        return symbol_type (token::OBJECT, std::move (l));
      }
#else
      static
      symbol_type
      make_OBJECT (const location_type& l)
      {
        return symbol_type (token::OBJECT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ObjectDescriptor (location_type l)
      {
        return symbol_type (token::ObjectDescriptor, std::move (l));
      }
#else
      static
      symbol_type
      make_ObjectDescriptor (const location_type& l)
      {
        return symbol_type (token::ObjectDescriptor, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OCTET (location_type l)
      {
        return symbol_type (token::OCTET, std::move (l));
      }
#else
      static
      symbol_type
      make_OCTET (const location_type& l)
      {
        return symbol_type (token::OCTET, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OF (location_type l)
      {
        return symbol_type (token::OF, std::move (l));
      }
#else
      static
      symbol_type
      make_OF (const location_type& l)
      {
        return symbol_type (token::OF, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OID_IRI (location_type l)
      {
        return symbol_type (token::OID_IRI, std::move (l));
      }
#else
      static
      symbol_type
      make_OID_IRI (const location_type& l)
      {
        return symbol_type (token::OID_IRI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OPTIONAL (location_type l)
      {
        return symbol_type (token::OPTIONAL, std::move (l));
      }
#else
      static
      symbol_type
      make_OPTIONAL (const location_type& l)
      {
        return symbol_type (token::OPTIONAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PATTERN (location_type l)
      {
        return symbol_type (token::PATTERN, std::move (l));
      }
#else
      static
      symbol_type
      make_PATTERN (const location_type& l)
      {
        return symbol_type (token::PATTERN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PDV (location_type l)
      {
        return symbol_type (token::PDV, std::move (l));
      }
#else
      static
      symbol_type
      make_PDV (const location_type& l)
      {
        return symbol_type (token::PDV, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PLUS_INFINITY (location_type l)
      {
        return symbol_type (token::PLUS_INFINITY, std::move (l));
      }
#else
      static
      symbol_type
      make_PLUS_INFINITY (const location_type& l)
      {
        return symbol_type (token::PLUS_INFINITY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PRESENT (location_type l)
      {
        return symbol_type (token::PRESENT, std::move (l));
      }
#else
      static
      symbol_type
      make_PRESENT (const location_type& l)
      {
        return symbol_type (token::PRESENT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PrintableString (location_type l)
      {
        return symbol_type (token::PrintableString, std::move (l));
      }
#else
      static
      symbol_type
      make_PrintableString (const location_type& l)
      {
        return symbol_type (token::PrintableString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PRIVATE (location_type l)
      {
        return symbol_type (token::PRIVATE, std::move (l));
      }
#else
      static
      symbol_type
      make_PRIVATE (const location_type& l)
      {
        return symbol_type (token::PRIVATE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_REAL (location_type l)
      {
        return symbol_type (token::REAL, std::move (l));
      }
#else
      static
      symbol_type
      make_REAL (const location_type& l)
      {
        return symbol_type (token::REAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_RELATIVE_OID (location_type l)
      {
        return symbol_type (token::RELATIVE_OID, std::move (l));
      }
#else
      static
      symbol_type
      make_RELATIVE_OID (const location_type& l)
      {
        return symbol_type (token::RELATIVE_OID, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_RELATIVE_OID_IRI (location_type l)
      {
        return symbol_type (token::RELATIVE_OID_IRI, std::move (l));
      }
#else
      static
      symbol_type
      make_RELATIVE_OID_IRI (const location_type& l)
      {
        return symbol_type (token::RELATIVE_OID_IRI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SEQUENCE (location_type l)
      {
        return symbol_type (token::SEQUENCE, std::move (l));
      }
#else
      static
      symbol_type
      make_SEQUENCE (const location_type& l)
      {
        return symbol_type (token::SEQUENCE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SET (location_type l)
      {
        return symbol_type (token::SET, std::move (l));
      }
#else
      static
      symbol_type
      make_SET (const location_type& l)
      {
        return symbol_type (token::SET, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SETTINGS (location_type l)
      {
        return symbol_type (token::SETTINGS, std::move (l));
      }
#else
      static
      symbol_type
      make_SETTINGS (const location_type& l)
      {
        return symbol_type (token::SETTINGS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SIZE (location_type l)
      {
        return symbol_type (token::SIZE, std::move (l));
      }
#else
      static
      symbol_type
      make_SIZE (const location_type& l)
      {
        return symbol_type (token::SIZE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_STRING (location_type l)
      {
        return symbol_type (token::STRING, std::move (l));
      }
#else
      static
      symbol_type
      make_STRING (const location_type& l)
      {
        return symbol_type (token::STRING, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SYNTAX (location_type l)
      {
        return symbol_type (token::SYNTAX, std::move (l));
      }
#else
      static
      symbol_type
      make_SYNTAX (const location_type& l)
      {
        return symbol_type (token::SYNTAX, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_T61String (location_type l)
      {
        return symbol_type (token::T61String, std::move (l));
      }
#else
      static
      symbol_type
      make_T61String (const location_type& l)
      {
        return symbol_type (token::T61String, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TAGS (location_type l)
      {
        return symbol_type (token::TAGS, std::move (l));
      }
#else
      static
      symbol_type
      make_TAGS (const location_type& l)
      {
        return symbol_type (token::TAGS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TeletexString (location_type l)
      {
        return symbol_type (token::TeletexString, std::move (l));
      }
#else
      static
      symbol_type
      make_TeletexString (const location_type& l)
      {
        return symbol_type (token::TeletexString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TIME (location_type l)
      {
        return symbol_type (token::TIME, std::move (l));
      }
#else
      static
      symbol_type
      make_TIME (const location_type& l)
      {
        return symbol_type (token::TIME, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TIME_OF_DAY (location_type l)
      {
        return symbol_type (token::TIME_OF_DAY, std::move (l));
      }
#else
      static
      symbol_type
      make_TIME_OF_DAY (const location_type& l)
      {
        return symbol_type (token::TIME_OF_DAY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TRUE (location_type l)
      {
        return symbol_type (token::TRUE, std::move (l));
      }
#else
      static
      symbol_type
      make_TRUE (const location_type& l)
      {
        return symbol_type (token::TRUE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE_IDENTIFIER (location_type l)
      {
        return symbol_type (token::TYPE_IDENTIFIER, std::move (l));
      }
#else
      static
      symbol_type
      make_TYPE_IDENTIFIER (const location_type& l)
      {
        return symbol_type (token::TYPE_IDENTIFIER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UNION (location_type l)
      {
        return symbol_type (token::UNION, std::move (l));
      }
#else
      static
      symbol_type
      make_UNION (const location_type& l)
      {
        return symbol_type (token::UNION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UNIQUE (location_type l)
      {
        return symbol_type (token::UNIQUE, std::move (l));
      }
#else
      static
      symbol_type
      make_UNIQUE (const location_type& l)
      {
        return symbol_type (token::UNIQUE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UNIVERSAL (location_type l)
      {
        return symbol_type (token::UNIVERSAL, std::move (l));
      }
#else
      static
      symbol_type
      make_UNIVERSAL (const location_type& l)
      {
        return symbol_type (token::UNIVERSAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UniversalString (location_type l)
      {
        return symbol_type (token::UniversalString, std::move (l));
      }
#else
      static
      symbol_type
      make_UniversalString (const location_type& l)
      {
        return symbol_type (token::UniversalString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UTCTime (location_type l)
      {
        return symbol_type (token::UTCTime, std::move (l));
      }
#else
      static
      symbol_type
      make_UTCTime (const location_type& l)
      {
        return symbol_type (token::UTCTime, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UTF8String (location_type l)
      {
        return symbol_type (token::UTF8String, std::move (l));
      }
#else
      static
      symbol_type
      make_UTF8String (const location_type& l)
      {
        return symbol_type (token::UTF8String, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_VideotexString (location_type l)
      {
        return symbol_type (token::VideotexString, std::move (l));
      }
#else
      static
      symbol_type
      make_VideotexString (const location_type& l)
      {
        return symbol_type (token::VideotexString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_VisibleString (location_type l)
      {
        return symbol_type (token::VisibleString, std::move (l));
      }
#else
      static
      symbol_type
      make_VisibleString (const location_type& l)
      {
        return symbol_type (token::VisibleString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_WITH (location_type l)
      {
        return symbol_type (token::WITH, std::move (l));
      }
#else
      static
      symbol_type
      make_WITH (const location_type& l)
      {
        return symbol_type (token::WITH, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DEFINED_AS (location_type l)
      {
        return symbol_type (token::DEFINED_AS, std::move (l));
      }
#else
      static
      symbol_type
      make_DEFINED_AS (const location_type& l)
      {
        return symbol_type (token::DEFINED_AS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ELIPSIS (location_type l)
      {
        return symbol_type (token::ELIPSIS, std::move (l));
      }
#else
      static
      symbol_type
      make_ELIPSIS (const location_type& l)
      {
        return symbol_type (token::ELIPSIS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_RANGE (location_type l)
      {
        return symbol_type (token::RANGE, std::move (l));
      }
#else
      static
      symbol_type
      make_RANGE (const location_type& l)
      {
        return symbol_type (token::RANGE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OPEN_BRACE (location_type l)
      {
        return symbol_type (token::OPEN_BRACE, std::move (l));
      }
#else
      static
      symbol_type
      make_OPEN_BRACE (const location_type& l)
      {
        return symbol_type (token::OPEN_BRACE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CLOSE_BRACE (location_type l)
      {
        return symbol_type (token::CLOSE_BRACE, std::move (l));
      }
#else
      static
      symbol_type
      make_CLOSE_BRACE (const location_type& l)
      {
        return symbol_type (token::CLOSE_BRACE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OPEN_PARENTHESIS (location_type l)
      {
        return symbol_type (token::OPEN_PARENTHESIS, std::move (l));
      }
#else
      static
      symbol_type
      make_OPEN_PARENTHESIS (const location_type& l)
      {
        return symbol_type (token::OPEN_PARENTHESIS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CLOSE_PARENTHESIS (location_type l)
      {
        return symbol_type (token::CLOSE_PARENTHESIS, std::move (l));
      }
#else
      static
      symbol_type
      make_CLOSE_PARENTHESIS (const location_type& l)
      {
        return symbol_type (token::CLOSE_PARENTHESIS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OPEN_SQUARE_BRACKET (location_type l)
      {
        return symbol_type (token::OPEN_SQUARE_BRACKET, std::move (l));
      }
#else
      static
      symbol_type
      make_OPEN_SQUARE_BRACKET (const location_type& l)
      {
        return symbol_type (token::OPEN_SQUARE_BRACKET, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CLOSE_SQUARE_BRACKET (location_type l)
      {
        return symbol_type (token::CLOSE_SQUARE_BRACKET, std::move (l));
      }
#else
      static
      symbol_type
      make_CLOSE_SQUARE_BRACKET (const location_type& l)
      {
        return symbol_type (token::CLOSE_SQUARE_BRACKET, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LESS_THAN (location_type l)
      {
        return symbol_type (token::LESS_THAN, std::move (l));
      }
#else
      static
      symbol_type
      make_LESS_THAN (const location_type& l)
      {
        return symbol_type (token::LESS_THAN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GREATER_THAN (location_type l)
      {
        return symbol_type (token::GREATER_THAN, std::move (l));
      }
#else
      static
      symbol_type
      make_GREATER_THAN (const location_type& l)
      {
        return symbol_type (token::GREATER_THAN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXCLAMATION_MARK (location_type l)
      {
        return symbol_type (token::EXCLAMATION_MARK, std::move (l));
      }
#else
      static
      symbol_type
      make_EXCLAMATION_MARK (const location_type& l)
      {
        return symbol_type (token::EXCLAMATION_MARK, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_QUOTATION_MARK (location_type l)
      {
        return symbol_type (token::QUOTATION_MARK, std::move (l));
      }
#else
      static
      symbol_type
      make_QUOTATION_MARK (const location_type& l)
      {
        return symbol_type (token::QUOTATION_MARK, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_AMPERSAND (location_type l)
      {
        return symbol_type (token::AMPERSAND, std::move (l));
      }
#else
      static
      symbol_type
      make_AMPERSAND (const location_type& l)
      {
        return symbol_type (token::AMPERSAND, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_APOSTROPHE (location_type l)
      {
        return symbol_type (token::APOSTROPHE, std::move (l));
      }
#else
      static
      symbol_type
      make_APOSTROPHE (const location_type& l)
      {
        return symbol_type (token::APOSTROPHE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ASTERISK (location_type l)
      {
        return symbol_type (token::ASTERISK, std::move (l));
      }
#else
      static
      symbol_type
      make_ASTERISK (const location_type& l)
      {
        return symbol_type (token::ASTERISK, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COMMA (location_type l)
      {
        return symbol_type (token::COMMA, std::move (l));
      }
#else
      static
      symbol_type
      make_COMMA (const location_type& l)
      {
        return symbol_type (token::COMMA, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FULL_STOP (location_type l)
      {
        return symbol_type (token::FULL_STOP, std::move (l));
      }
#else
      static
      symbol_type
      make_FULL_STOP (const location_type& l)
      {
        return symbol_type (token::FULL_STOP, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_HYPHEN_MINUS (location_type l)
      {
        return symbol_type (token::HYPHEN_MINUS, std::move (l));
      }
#else
      static
      symbol_type
      make_HYPHEN_MINUS (const location_type& l)
      {
        return symbol_type (token::HYPHEN_MINUS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SOLIDUS (location_type l)
      {
        return symbol_type (token::SOLIDUS, std::move (l));
      }
#else
      static
      symbol_type
      make_SOLIDUS (const location_type& l)
      {
        return symbol_type (token::SOLIDUS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COLON (location_type l)
      {
        return symbol_type (token::COLON, std::move (l));
      }
#else
      static
      symbol_type
      make_COLON (const location_type& l)
      {
        return symbol_type (token::COLON, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SEMICOLON (location_type l)
      {
        return symbol_type (token::SEMICOLON, std::move (l));
      }
#else
      static
      symbol_type
      make_SEMICOLON (const location_type& l)
      {
        return symbol_type (token::SEMICOLON, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EQUALS_SIGN (location_type l)
      {
        return symbol_type (token::EQUALS_SIGN, std::move (l));
      }
#else
      static
      symbol_type
      make_EQUALS_SIGN (const location_type& l)
      {
        return symbol_type (token::EQUALS_SIGN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_AT (location_type l)
      {
        return symbol_type (token::AT, std::move (l));
      }
#else
      static
      symbol_type
      make_AT (const location_type& l)
      {
        return symbol_type (token::AT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_VERTICAL_LINE (location_type l)
      {
        return symbol_type (token::VERTICAL_LINE, std::move (l));
      }
#else
      static
      symbol_type
      make_VERTICAL_LINE (const location_type& l)
      {
        return symbol_type (token::VERTICAL_LINE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ACCENT (location_type l)
      {
        return symbol_type (token::ACCENT, std::move (l));
      }
#else
      static
      symbol_type
      make_ACCENT (const location_type& l)
      {
        return symbol_type (token::ACCENT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PLUS (location_type l)
      {
        return symbol_type (token::PLUS, std::move (l));
      }
#else
      static
      symbol_type
      make_PLUS (const location_type& l)
      {
        return symbol_type (token::PLUS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_STAR (location_type l)
      {
        return symbol_type (token::STAR, std::move (l));
      }
#else
      static
      symbol_type
      make_STAR (const location_type& l)
      {
        return symbol_type (token::STAR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GENERIC_IDENTIFIER_UPPERCASE (std::string v, location_type l)
      {
        return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l)
      {
        return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GENERIC_IDENTIFIER_LOWERCASE (std::string v, location_type l)
      {
        return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l)
      {
        return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GENERIC_INTEGER (location_type l)
      {
        return symbol_type (token::GENERIC_INTEGER, std::move (l));
      }
#else
      static
      symbol_type
      make_GENERIC_INTEGER (const location_type& l)
      {
        return symbol_type (token::GENERIC_INTEGER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_xmlasn1typename (location_type l)
      {
        return symbol_type (token::xmlasn1typename, std::move (l));
      }
#else
      static
      symbol_type
      make_xmlasn1typename (const location_type& l)
      {
        return symbol_type (token::xmlasn1typename, l);
      }
#endif


  private:
    /// This class is not copyable.
    asn1_parser (const asn1_parser&);
    asn1_parser& operator= (const asn1_parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short yypact_ninf_;
    static const short yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned short yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short yytable_[];

  static const short yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned short yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned short yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    /// Debugging level.
    int yydebug_;
    /// Debug stream.
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state () YY_NOEXCEPT;

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s) YY_NOEXCEPT;

      /// Copy constructor.
      by_state (const by_state& that) YY_NOEXCEPT;

      /// Record that this symbol is empty.
      void clear () YY_NOEXCEPT;

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const YY_NOEXCEPT;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Move or copy construction.
      stack_symbol_type (YY_RVREF (stack_symbol_type) that);
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) sym);
#if YY_CPLUSPLUS < 201103L
      /// Assignment, needed by push_back by some old implementations.
      /// Moves the contents of that.
      stack_symbol_type& operator= (stack_symbol_type& that);
#endif
    };

    /// A stack with random access from its top.
    template <typename T, typename S = std::vector<T> >
    class stack
    {
    public:
      // Hide our reversed order.
      typedef typename S::reverse_iterator iterator;
      typedef typename S::const_reverse_iterator const_iterator;
      typedef typename S::size_type size_type;

      stack (size_type n = 200)
        : seq_ (n)
      {}

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      T&
      operator[] (size_type i)
      {
        return seq_[size () - 1 - i];
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      T&
      operator[] (int i)
      {
        return operator[] (size_type (i));
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      const T&
      operator[] (size_type i) const
      {
        return seq_[size () - 1 - i];
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      const T&
      operator[] (int i) const
      {
        return operator[] (size_type (i));
      }

      /// Steal the contents of \a t.
      ///
      /// Close to move-semantics.
      void
      push (YY_MOVE_REF (T) t)
      {
        seq_.push_back (T ());
        operator[] (0).move (t);
      }

      /// Pop elements from the stack.
      void
      pop (int n = 1) YY_NOEXCEPT
      {
        for (; 0 < n; --n)
          seq_.pop_back ();
      }

      /// Pop all elements from the stack.
      void
      clear () YY_NOEXCEPT
      {
        seq_.clear ();
      }

      /// Number of elements on the stack.
      size_type
      size () const YY_NOEXCEPT
      {
        return seq_.size ();
      }

      /// Iterator on top of the stack (going downwards).
      const_iterator
      begin () const YY_NOEXCEPT
      {
        return seq_.rbegin ();
      }

      /// Bottom of the stack.
      const_iterator
      end () const YY_NOEXCEPT
      {
        return seq_.rend ();
      }

      /// Present a slice of the top of a stack.
      class slice
      {
      public:
        slice (const stack& stack, int range)
          : stack_ (stack)
          , range_ (range)
        {}

        const T&
        operator[] (int i) const
        {
          return stack_[range_ - i];
        }

      private:
        const stack& stack_;
        int range_;
      };

    private:
      stack (const stack&);
      stack& operator= (const stack&);
      /// The wrapped container.
      S seq_;
    };


    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param sym  the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a sym.value is stolen.
    void yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym);

    /// Pop \a n symbols from the stack.
    void yypop_ (int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 5042,     ///< Last index in yytable_.
      yynnts_ = 225,  ///< Number of nonterminal symbols.
      yyfinal_ = 6, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 153  ///< Number of tokens.
    };


    // User arguments.
    Context& context;
  };

  asn1_parser::token_number_type
  asn1_parser::yytranslate_ (token_type t)
  {
    // YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to
    // TOKEN-NUM as returned by yylex.
    static
    const token_number_type
    translate_table[] =
    {
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152
    };
    const unsigned user_token_number_max_ = 407;
    const token_number_type undef_token_ = 2;

    if (static_cast<int> (t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  // basic_symbol.
#if 201103L <= YY_CPLUSPLUS
  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (basic_symbol&& that)
    : Base (std::move (that))
    , value ()
    , location (std::move (that.location))
  {
    switch (this->type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.move< Assignment > (std::move (that.value));
        break;

      case 283: // BitStringType
        value.move< BitStringType > (std::move (that.value));
        break;

      case 272: // BooleanType
        value.move< BooleanType > (std::move (that.value));
        break;

      case 273: // BooleanValue
        value.move< BooleanValue > (std::move (that.value));
        break;

      case 264: // BuiltinType
        value.move< BuiltinType > (std::move (that.value));
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.move< CharacterStringType > (std::move (that.value));
        break;

      case 295: // ChoiceType
        value.move< ChoiceType > (std::move (that.value));
        break;

      case 305: // Class
        value.move< Class > (std::move (that.value));
        break;

      case 291: // ComponentType
        value.move< ComponentType > (std::move (that.value));
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.move< ComponentTypeList > (std::move (that.value));
        break;

      case 326: // DateTimeType
        value.move< DateTimeType > (std::move (that.value));
        break;

      case 324: // DateType
        value.move< DateType > (std::move (that.value));
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.move< DefinedType > (std::move (that.value));
        break;

      case 253: // DefinedValue
        value.move< DefinedValue > (std::move (that.value));
        break;

      case 327: // DurationType
        value.move< DurationType > (std::move (that.value));
        break;

      case 320: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (std::move (that.value));
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.move< EnumeratedType > (std::move (that.value));
        break;

      case 281: // EnumerationItem
        value.move< EnumerationValue > (std::move (that.value));
        break;

      case 321: // ExternalType
        value.move< ExternalType > (std::move (that.value));
        break;

      case 314: // IRIType
        value.move< IRIType > (std::move (that.value));
        break;

      case 245: // SymbolsFromModule
        value.move< Import > (std::move (that.value));
        break;

      case 215: // InstanceOfType
        value.move< InstanceOfType > (std::move (that.value));
        break;

      case 274: // IntegerType
        value.move< IntegerType > (std::move (that.value));
        break;

      case 239: // ModuleBody
        value.move< Module > (std::move (that.value));
        break;

      case 276: // NamedNumber
        value.move< NamedNumber > (std::move (that.value));
        break;

      case 265: // NamedType
        value.move< NamedType > (std::move (that.value));
        break;

      case 287: // NullType
        value.move< NullType > (std::move (that.value));
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.move< ObjectClassAssignment > (std::move (that.value));
        break;

      case 202: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (std::move (that.value));
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (std::move (that.value));
        break;

      case 306: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (std::move (that.value));
        break;

      case 286: // OctetStringType
        value.move< OctetStringType > (std::move (that.value));
        break;

      case 210: // Parameter
        value.move< Parameter > (std::move (that.value));
        break;

      case 300: // PrefixedType
        value.move< PrefixedType > (std::move (that.value));
        break;

      case 282: // RealType
        value.move< RealType > (std::move (that.value));
        break;

      case 319: // RelativeIRIType
        value.move< RelativeIRIType > (std::move (that.value));
        break;

      case 313: // RelativeOIDType
        value.move< RelativeOIDType > (std::move (that.value));
        break;

      case 292: // SequenceOfType
        value.move< SequenceOfType > (std::move (that.value));
        break;

      case 288: // SequenceType
        value.move< SequenceType > (std::move (that.value));
        break;

      case 294: // SetOfType
        value.move< SetOfType > (std::move (that.value));
        break;

      case 293: // SetType
        value.move< SetType > (std::move (that.value));
        break;

      case 302: // Tag
        value.move< Tag > (std::move (that.value));
        break;

      case 301: // TaggedType
        value.move< TaggedType > (std::move (that.value));
        break;

      case 237: // TagDefault
        value.move< TaggingMode > (std::move (that.value));
        break;

      case 325: // TimeOfDayType
        value.move< TimeOfDayType > (std::move (that.value));
        break;

      case 322: // TimeType
        value.move< TimeType > (std::move (that.value));
        break;

      case 323: // TimeValue
        value.move< TimeValue > (std::move (that.value));
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.move< Type > (std::move (that.value));
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.move< Value > (std::move (that.value));
        break;

      case 6: // realnumber
        value.move< double > (std::move (that.value));
        break;

      case 304: // ClassNumber
        value.move< int > (std::move (that.value));
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.move< int64_t > (std::move (that.value));
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (std::move (that.value));
        break;

      case 250: // AssignmentList
        value.move< std::vector<Assignment> > (std::move (that.value));
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.move< std::vector<ClassField> > (std::move (that.value));
        break;

      case 240: // Exports
        value.move< std::vector<Export> > (std::move (that.value));
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.move< std::vector<Import> > (std::move (that.value));
        break;

      case 275: // NamedNumberList
        value.move< std::vector<NamedNumber> > (std::move (that.value));
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.move< std::vector<NamedType> > (std::move (that.value));
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (std::move (that.value));
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.move< std::vector<Parameter> > (std::move (that.value));
        break;

      case 256: // ActualParameterList
        value.move< std::vector<Type> > (std::move (that.value));
        break;

      case 271: // SequenceOfValues
        value.move< std::vector<Value> > (std::move (that.value));
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.move< std::vector<std::string> > (std::move (that.value));
        break;

      default:
        break;
    }

  }
#endif

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (const basic_symbol& that)
    : Base (that)
    , value ()
    , location (that.location)
  {
    switch (this->type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.copy< Assignment > (YY_MOVE (that.value));
        break;

      case 283: // BitStringType
        value.copy< BitStringType > (YY_MOVE (that.value));
        break;

      case 272: // BooleanType
        value.copy< BooleanType > (YY_MOVE (that.value));
        break;

      case 273: // BooleanValue
        value.copy< BooleanValue > (YY_MOVE (that.value));
        break;

      case 264: // BuiltinType
        value.copy< BuiltinType > (YY_MOVE (that.value));
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.copy< CharacterStringType > (YY_MOVE (that.value));
        break;

      case 295: // ChoiceType
        value.copy< ChoiceType > (YY_MOVE (that.value));
        break;

      case 305: // Class
        value.copy< Class > (YY_MOVE (that.value));
        break;

      case 291: // ComponentType
        value.copy< ComponentType > (YY_MOVE (that.value));
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.copy< ComponentTypeList > (YY_MOVE (that.value));
        break;

      case 326: // DateTimeType
        value.copy< DateTimeType > (YY_MOVE (that.value));
        break;

      case 324: // DateType
        value.copy< DateType > (YY_MOVE (that.value));
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.copy< DefinedType > (YY_MOVE (that.value));
        break;

      case 253: // DefinedValue
        value.copy< DefinedValue > (YY_MOVE (that.value));
        break;

      case 327: // DurationType
        value.copy< DurationType > (YY_MOVE (that.value));
        break;

      case 320: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (YY_MOVE (that.value));
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.copy< EnumeratedType > (YY_MOVE (that.value));
        break;

      case 281: // EnumerationItem
        value.copy< EnumerationValue > (YY_MOVE (that.value));
        break;

      case 321: // ExternalType
        value.copy< ExternalType > (YY_MOVE (that.value));
        break;

      case 314: // IRIType
        value.copy< IRIType > (YY_MOVE (that.value));
        break;

      case 245: // SymbolsFromModule
        value.copy< Import > (YY_MOVE (that.value));
        break;

      case 215: // InstanceOfType
        value.copy< InstanceOfType > (YY_MOVE (that.value));
        break;

      case 274: // IntegerType
        value.copy< IntegerType > (YY_MOVE (that.value));
        break;

      case 239: // ModuleBody
        value.copy< Module > (YY_MOVE (that.value));
        break;

      case 276: // NamedNumber
        value.copy< NamedNumber > (YY_MOVE (that.value));
        break;

      case 265: // NamedType
        value.copy< NamedType > (YY_MOVE (that.value));
        break;

      case 287: // NullType
        value.copy< NullType > (YY_MOVE (that.value));
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.copy< ObjectClassAssignment > (YY_MOVE (that.value));
        break;

      case 202: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (YY_MOVE (that.value));
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (YY_MOVE (that.value));
        break;

      case 306: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (YY_MOVE (that.value));
        break;

      case 286: // OctetStringType
        value.copy< OctetStringType > (YY_MOVE (that.value));
        break;

      case 210: // Parameter
        value.copy< Parameter > (YY_MOVE (that.value));
        break;

      case 300: // PrefixedType
        value.copy< PrefixedType > (YY_MOVE (that.value));
        break;

      case 282: // RealType
        value.copy< RealType > (YY_MOVE (that.value));
        break;

      case 319: // RelativeIRIType
        value.copy< RelativeIRIType > (YY_MOVE (that.value));
        break;

      case 313: // RelativeOIDType
        value.copy< RelativeOIDType > (YY_MOVE (that.value));
        break;

      case 292: // SequenceOfType
        value.copy< SequenceOfType > (YY_MOVE (that.value));
        break;

      case 288: // SequenceType
        value.copy< SequenceType > (YY_MOVE (that.value));
        break;

      case 294: // SetOfType
        value.copy< SetOfType > (YY_MOVE (that.value));
        break;

      case 293: // SetType
        value.copy< SetType > (YY_MOVE (that.value));
        break;

      case 302: // Tag
        value.copy< Tag > (YY_MOVE (that.value));
        break;

      case 301: // TaggedType
        value.copy< TaggedType > (YY_MOVE (that.value));
        break;

      case 237: // TagDefault
        value.copy< TaggingMode > (YY_MOVE (that.value));
        break;

      case 325: // TimeOfDayType
        value.copy< TimeOfDayType > (YY_MOVE (that.value));
        break;

      case 322: // TimeType
        value.copy< TimeType > (YY_MOVE (that.value));
        break;

      case 323: // TimeValue
        value.copy< TimeValue > (YY_MOVE (that.value));
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.copy< Type > (YY_MOVE (that.value));
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.copy< Value > (YY_MOVE (that.value));
        break;

      case 6: // realnumber
        value.copy< double > (YY_MOVE (that.value));
        break;

      case 304: // ClassNumber
        value.copy< int > (YY_MOVE (that.value));
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.copy< int64_t > (YY_MOVE (that.value));
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.copy< std::string > (YY_MOVE (that.value));
        break;

      case 250: // AssignmentList
        value.copy< std::vector<Assignment> > (YY_MOVE (that.value));
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.copy< std::vector<ClassField> > (YY_MOVE (that.value));
        break;

      case 240: // Exports
        value.copy< std::vector<Export> > (YY_MOVE (that.value));
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (YY_MOVE (that.value));
        break;

      case 275: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (YY_MOVE (that.value));
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (YY_MOVE (that.value));
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (YY_MOVE (that.value));
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.copy< std::vector<Parameter> > (YY_MOVE (that.value));
        break;

      case 256: // ActualParameterList
        value.copy< std::vector<Type> > (YY_MOVE (that.value));
        break;

      case 271: // SequenceOfValues
        value.copy< std::vector<Value> > (YY_MOVE (that.value));
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.copy< std::vector<std::string> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

  }



  template <typename Base>
  bool
  asn1_parser::basic_symbol<Base>::empty () const YY_NOEXCEPT
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  void
  asn1_parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move (s);
    switch (this->type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.move< Assignment > (YY_MOVE (s.value));
        break;

      case 283: // BitStringType
        value.move< BitStringType > (YY_MOVE (s.value));
        break;

      case 272: // BooleanType
        value.move< BooleanType > (YY_MOVE (s.value));
        break;

      case 273: // BooleanValue
        value.move< BooleanValue > (YY_MOVE (s.value));
        break;

      case 264: // BuiltinType
        value.move< BuiltinType > (YY_MOVE (s.value));
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.move< CharacterStringType > (YY_MOVE (s.value));
        break;

      case 295: // ChoiceType
        value.move< ChoiceType > (YY_MOVE (s.value));
        break;

      case 305: // Class
        value.move< Class > (YY_MOVE (s.value));
        break;

      case 291: // ComponentType
        value.move< ComponentType > (YY_MOVE (s.value));
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.move< ComponentTypeList > (YY_MOVE (s.value));
        break;

      case 326: // DateTimeType
        value.move< DateTimeType > (YY_MOVE (s.value));
        break;

      case 324: // DateType
        value.move< DateType > (YY_MOVE (s.value));
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.move< DefinedType > (YY_MOVE (s.value));
        break;

      case 253: // DefinedValue
        value.move< DefinedValue > (YY_MOVE (s.value));
        break;

      case 327: // DurationType
        value.move< DurationType > (YY_MOVE (s.value));
        break;

      case 320: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (YY_MOVE (s.value));
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.move< EnumeratedType > (YY_MOVE (s.value));
        break;

      case 281: // EnumerationItem
        value.move< EnumerationValue > (YY_MOVE (s.value));
        break;

      case 321: // ExternalType
        value.move< ExternalType > (YY_MOVE (s.value));
        break;

      case 314: // IRIType
        value.move< IRIType > (YY_MOVE (s.value));
        break;

      case 245: // SymbolsFromModule
        value.move< Import > (YY_MOVE (s.value));
        break;

      case 215: // InstanceOfType
        value.move< InstanceOfType > (YY_MOVE (s.value));
        break;

      case 274: // IntegerType
        value.move< IntegerType > (YY_MOVE (s.value));
        break;

      case 239: // ModuleBody
        value.move< Module > (YY_MOVE (s.value));
        break;

      case 276: // NamedNumber
        value.move< NamedNumber > (YY_MOVE (s.value));
        break;

      case 265: // NamedType
        value.move< NamedType > (YY_MOVE (s.value));
        break;

      case 287: // NullType
        value.move< NullType > (YY_MOVE (s.value));
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.move< ObjectClassAssignment > (YY_MOVE (s.value));
        break;

      case 202: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (YY_MOVE (s.value));
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (YY_MOVE (s.value));
        break;

      case 306: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (YY_MOVE (s.value));
        break;

      case 286: // OctetStringType
        value.move< OctetStringType > (YY_MOVE (s.value));
        break;

      case 210: // Parameter
        value.move< Parameter > (YY_MOVE (s.value));
        break;

      case 300: // PrefixedType
        value.move< PrefixedType > (YY_MOVE (s.value));
        break;

      case 282: // RealType
        value.move< RealType > (YY_MOVE (s.value));
        break;

      case 319: // RelativeIRIType
        value.move< RelativeIRIType > (YY_MOVE (s.value));
        break;

      case 313: // RelativeOIDType
        value.move< RelativeOIDType > (YY_MOVE (s.value));
        break;

      case 292: // SequenceOfType
        value.move< SequenceOfType > (YY_MOVE (s.value));
        break;

      case 288: // SequenceType
        value.move< SequenceType > (YY_MOVE (s.value));
        break;

      case 294: // SetOfType
        value.move< SetOfType > (YY_MOVE (s.value));
        break;

      case 293: // SetType
        value.move< SetType > (YY_MOVE (s.value));
        break;

      case 302: // Tag
        value.move< Tag > (YY_MOVE (s.value));
        break;

      case 301: // TaggedType
        value.move< TaggedType > (YY_MOVE (s.value));
        break;

      case 237: // TagDefault
        value.move< TaggingMode > (YY_MOVE (s.value));
        break;

      case 325: // TimeOfDayType
        value.move< TimeOfDayType > (YY_MOVE (s.value));
        break;

      case 322: // TimeType
        value.move< TimeType > (YY_MOVE (s.value));
        break;

      case 323: // TimeValue
        value.move< TimeValue > (YY_MOVE (s.value));
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.move< Type > (YY_MOVE (s.value));
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.move< Value > (YY_MOVE (s.value));
        break;

      case 6: // realnumber
        value.move< double > (YY_MOVE (s.value));
        break;

      case 304: // ClassNumber
        value.move< int > (YY_MOVE (s.value));
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.move< int64_t > (YY_MOVE (s.value));
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (YY_MOVE (s.value));
        break;

      case 250: // AssignmentList
        value.move< std::vector<Assignment> > (YY_MOVE (s.value));
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.move< std::vector<ClassField> > (YY_MOVE (s.value));
        break;

      case 240: // Exports
        value.move< std::vector<Export> > (YY_MOVE (s.value));
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.move< std::vector<Import> > (YY_MOVE (s.value));
        break;

      case 275: // NamedNumberList
        value.move< std::vector<NamedNumber> > (YY_MOVE (s.value));
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.move< std::vector<NamedType> > (YY_MOVE (s.value));
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (YY_MOVE (s.value));
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.move< std::vector<Parameter> > (YY_MOVE (s.value));
        break;

      case 256: // ActualParameterList
        value.move< std::vector<Type> > (YY_MOVE (s.value));
        break;

      case 271: // SequenceOfValues
        value.move< std::vector<Value> > (YY_MOVE (s.value));
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.move< std::vector<std::string> > (YY_MOVE (s.value));
        break;

      default:
        break;
    }

    location = YY_MOVE (s.location);
  }

  // by_type.
  asn1_parser::by_type::by_type ()
    : type (empty_symbol)
  {}

#if 201103L <= YY_CPLUSPLUS
  asn1_parser::by_type::by_type (by_type&& that)
    : type (that.type)
  {
    that.clear ();
  }
#endif

  asn1_parser::by_type::by_type (const by_type& that)
    : type (that.type)
  {}

  asn1_parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  void
  asn1_parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  void
  asn1_parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  int
  asn1_parser::by_type::type_get () const YY_NOEXCEPT
  {
    return type;
  }

  asn1_parser::token_type
  asn1_parser::by_type::token () const YY_NOEXCEPT
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407
    };
    return token_type (yytoken_number_[type]);
  }


} // yy
#line 6162 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:431






// Unqualified %code blocks.
#line 16 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:435

    struct Context
    {
        const char* cursor;
        yy::location location;

        Asn1Tree asn1_tree;
    };
    void yy::asn1_parser::error(const location_type& l, const std::string& m)
    {
        std::cerr << l << m << '\n';
    }

    namespace yy { asn1_parser::symbol_type yylex(Context& c); }

#line 6186 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:435


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

// Whether we are compiled with exception support.
#ifndef YY_EXCEPTIONS
# if defined __GNUC__ && !defined __EXCEPTIONS
#  define YY_EXCEPTIONS 0
# else
#  define YY_EXCEPTIONS 1
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << '\n';                       \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE (Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void> (0)
# define YY_STACK_PRINT()                static_cast<void> (0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line 6281 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:510

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  asn1_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr;
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              else
                goto append;

            append:
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  asn1_parser::asn1_parser (Context& context_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      context (context_yyarg)
  {}

  asn1_parser::~asn1_parser ()
  {}

  asn1_parser::syntax_error::~syntax_error () YY_NOEXCEPT YY_NOTHROW
  {}

  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  asn1_parser::by_state::by_state () YY_NOEXCEPT
    : state (empty_state)
  {}

  asn1_parser::by_state::by_state (const by_state& that) YY_NOEXCEPT
    : state (that.state)
  {}

  void
  asn1_parser::by_state::clear () YY_NOEXCEPT
  {
    state = empty_state;
  }

  void
  asn1_parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  asn1_parser::by_state::by_state (state_type s) YY_NOEXCEPT
    : state (s)
  {}

  asn1_parser::symbol_number_type
  asn1_parser::by_state::type_get () const YY_NOEXCEPT
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  asn1_parser::stack_symbol_type::stack_symbol_type ()
  {}

  asn1_parser::stack_symbol_type::stack_symbol_type (YY_RVREF (stack_symbol_type) that)
    : super_type (YY_MOVE (that.state), YY_MOVE (that.location))
  {
    switch (that.type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.YY_MOVE_OR_COPY< Assignment > (YY_MOVE (that.value));
        break;

      case 283: // BitStringType
        value.YY_MOVE_OR_COPY< BitStringType > (YY_MOVE (that.value));
        break;

      case 272: // BooleanType
        value.YY_MOVE_OR_COPY< BooleanType > (YY_MOVE (that.value));
        break;

      case 273: // BooleanValue
        value.YY_MOVE_OR_COPY< BooleanValue > (YY_MOVE (that.value));
        break;

      case 264: // BuiltinType
        value.YY_MOVE_OR_COPY< BuiltinType > (YY_MOVE (that.value));
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.YY_MOVE_OR_COPY< CharacterStringType > (YY_MOVE (that.value));
        break;

      case 295: // ChoiceType
        value.YY_MOVE_OR_COPY< ChoiceType > (YY_MOVE (that.value));
        break;

      case 305: // Class
        value.YY_MOVE_OR_COPY< Class > (YY_MOVE (that.value));
        break;

      case 291: // ComponentType
        value.YY_MOVE_OR_COPY< ComponentType > (YY_MOVE (that.value));
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.YY_MOVE_OR_COPY< ComponentTypeList > (YY_MOVE (that.value));
        break;

      case 326: // DateTimeType
        value.YY_MOVE_OR_COPY< DateTimeType > (YY_MOVE (that.value));
        break;

      case 324: // DateType
        value.YY_MOVE_OR_COPY< DateType > (YY_MOVE (that.value));
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.YY_MOVE_OR_COPY< DefinedType > (YY_MOVE (that.value));
        break;

      case 253: // DefinedValue
        value.YY_MOVE_OR_COPY< DefinedValue > (YY_MOVE (that.value));
        break;

      case 327: // DurationType
        value.YY_MOVE_OR_COPY< DurationType > (YY_MOVE (that.value));
        break;

      case 320: // EmbeddedPDVType
        value.YY_MOVE_OR_COPY< EmbeddedPDVType > (YY_MOVE (that.value));
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.YY_MOVE_OR_COPY< EnumeratedType > (YY_MOVE (that.value));
        break;

      case 281: // EnumerationItem
        value.YY_MOVE_OR_COPY< EnumerationValue > (YY_MOVE (that.value));
        break;

      case 321: // ExternalType
        value.YY_MOVE_OR_COPY< ExternalType > (YY_MOVE (that.value));
        break;

      case 314: // IRIType
        value.YY_MOVE_OR_COPY< IRIType > (YY_MOVE (that.value));
        break;

      case 245: // SymbolsFromModule
        value.YY_MOVE_OR_COPY< Import > (YY_MOVE (that.value));
        break;

      case 215: // InstanceOfType
        value.YY_MOVE_OR_COPY< InstanceOfType > (YY_MOVE (that.value));
        break;

      case 274: // IntegerType
        value.YY_MOVE_OR_COPY< IntegerType > (YY_MOVE (that.value));
        break;

      case 239: // ModuleBody
        value.YY_MOVE_OR_COPY< Module > (YY_MOVE (that.value));
        break;

      case 276: // NamedNumber
        value.YY_MOVE_OR_COPY< NamedNumber > (YY_MOVE (that.value));
        break;

      case 265: // NamedType
        value.YY_MOVE_OR_COPY< NamedType > (YY_MOVE (that.value));
        break;

      case 287: // NullType
        value.YY_MOVE_OR_COPY< NullType > (YY_MOVE (that.value));
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.YY_MOVE_OR_COPY< ObjectClassAssignment > (YY_MOVE (that.value));
        break;

      case 202: // ObjectClassFieldType
        value.YY_MOVE_OR_COPY< ObjectClassFieldType > (YY_MOVE (that.value));
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.YY_MOVE_OR_COPY< ObjectIdComponentValue > (YY_MOVE (that.value));
        break;

      case 306: // ObjectIdentifierType
        value.YY_MOVE_OR_COPY< ObjectIdentifierType > (YY_MOVE (that.value));
        break;

      case 286: // OctetStringType
        value.YY_MOVE_OR_COPY< OctetStringType > (YY_MOVE (that.value));
        break;

      case 210: // Parameter
        value.YY_MOVE_OR_COPY< Parameter > (YY_MOVE (that.value));
        break;

      case 300: // PrefixedType
        value.YY_MOVE_OR_COPY< PrefixedType > (YY_MOVE (that.value));
        break;

      case 282: // RealType
        value.YY_MOVE_OR_COPY< RealType > (YY_MOVE (that.value));
        break;

      case 319: // RelativeIRIType
        value.YY_MOVE_OR_COPY< RelativeIRIType > (YY_MOVE (that.value));
        break;

      case 313: // RelativeOIDType
        value.YY_MOVE_OR_COPY< RelativeOIDType > (YY_MOVE (that.value));
        break;

      case 292: // SequenceOfType
        value.YY_MOVE_OR_COPY< SequenceOfType > (YY_MOVE (that.value));
        break;

      case 288: // SequenceType
        value.YY_MOVE_OR_COPY< SequenceType > (YY_MOVE (that.value));
        break;

      case 294: // SetOfType
        value.YY_MOVE_OR_COPY< SetOfType > (YY_MOVE (that.value));
        break;

      case 293: // SetType
        value.YY_MOVE_OR_COPY< SetType > (YY_MOVE (that.value));
        break;

      case 302: // Tag
        value.YY_MOVE_OR_COPY< Tag > (YY_MOVE (that.value));
        break;

      case 301: // TaggedType
        value.YY_MOVE_OR_COPY< TaggedType > (YY_MOVE (that.value));
        break;

      case 237: // TagDefault
        value.YY_MOVE_OR_COPY< TaggingMode > (YY_MOVE (that.value));
        break;

      case 325: // TimeOfDayType
        value.YY_MOVE_OR_COPY< TimeOfDayType > (YY_MOVE (that.value));
        break;

      case 322: // TimeType
        value.YY_MOVE_OR_COPY< TimeType > (YY_MOVE (that.value));
        break;

      case 323: // TimeValue
        value.YY_MOVE_OR_COPY< TimeValue > (YY_MOVE (that.value));
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.YY_MOVE_OR_COPY< Type > (YY_MOVE (that.value));
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.YY_MOVE_OR_COPY< Value > (YY_MOVE (that.value));
        break;

      case 6: // realnumber
        value.YY_MOVE_OR_COPY< double > (YY_MOVE (that.value));
        break;

      case 304: // ClassNumber
        value.YY_MOVE_OR_COPY< int > (YY_MOVE (that.value));
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.YY_MOVE_OR_COPY< int64_t > (YY_MOVE (that.value));
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.YY_MOVE_OR_COPY< std::string > (YY_MOVE (that.value));
        break;

      case 250: // AssignmentList
        value.YY_MOVE_OR_COPY< std::vector<Assignment> > (YY_MOVE (that.value));
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.YY_MOVE_OR_COPY< std::vector<ClassField> > (YY_MOVE (that.value));
        break;

      case 240: // Exports
        value.YY_MOVE_OR_COPY< std::vector<Export> > (YY_MOVE (that.value));
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.YY_MOVE_OR_COPY< std::vector<Import> > (YY_MOVE (that.value));
        break;

      case 275: // NamedNumberList
        value.YY_MOVE_OR_COPY< std::vector<NamedNumber> > (YY_MOVE (that.value));
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.YY_MOVE_OR_COPY< std::vector<NamedType> > (YY_MOVE (that.value));
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.YY_MOVE_OR_COPY< std::vector<ObjectIdComponentValue> > (YY_MOVE (that.value));
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.YY_MOVE_OR_COPY< std::vector<Parameter> > (YY_MOVE (that.value));
        break;

      case 256: // ActualParameterList
        value.YY_MOVE_OR_COPY< std::vector<Type> > (YY_MOVE (that.value));
        break;

      case 271: // SequenceOfValues
        value.YY_MOVE_OR_COPY< std::vector<Value> > (YY_MOVE (that.value));
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.YY_MOVE_OR_COPY< std::vector<std::string> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

#if 201103L <= YY_CPLUSPLUS
    // that is emptied.
    that.state = empty_state;
#endif
  }

  asn1_parser::stack_symbol_type::stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) that)
    : super_type (s, YY_MOVE (that.location))
  {
    switch (that.type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.move< Assignment > (YY_MOVE (that.value));
        break;

      case 283: // BitStringType
        value.move< BitStringType > (YY_MOVE (that.value));
        break;

      case 272: // BooleanType
        value.move< BooleanType > (YY_MOVE (that.value));
        break;

      case 273: // BooleanValue
        value.move< BooleanValue > (YY_MOVE (that.value));
        break;

      case 264: // BuiltinType
        value.move< BuiltinType > (YY_MOVE (that.value));
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.move< CharacterStringType > (YY_MOVE (that.value));
        break;

      case 295: // ChoiceType
        value.move< ChoiceType > (YY_MOVE (that.value));
        break;

      case 305: // Class
        value.move< Class > (YY_MOVE (that.value));
        break;

      case 291: // ComponentType
        value.move< ComponentType > (YY_MOVE (that.value));
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.move< ComponentTypeList > (YY_MOVE (that.value));
        break;

      case 326: // DateTimeType
        value.move< DateTimeType > (YY_MOVE (that.value));
        break;

      case 324: // DateType
        value.move< DateType > (YY_MOVE (that.value));
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.move< DefinedType > (YY_MOVE (that.value));
        break;

      case 253: // DefinedValue
        value.move< DefinedValue > (YY_MOVE (that.value));
        break;

      case 327: // DurationType
        value.move< DurationType > (YY_MOVE (that.value));
        break;

      case 320: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (YY_MOVE (that.value));
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.move< EnumeratedType > (YY_MOVE (that.value));
        break;

      case 281: // EnumerationItem
        value.move< EnumerationValue > (YY_MOVE (that.value));
        break;

      case 321: // ExternalType
        value.move< ExternalType > (YY_MOVE (that.value));
        break;

      case 314: // IRIType
        value.move< IRIType > (YY_MOVE (that.value));
        break;

      case 245: // SymbolsFromModule
        value.move< Import > (YY_MOVE (that.value));
        break;

      case 215: // InstanceOfType
        value.move< InstanceOfType > (YY_MOVE (that.value));
        break;

      case 274: // IntegerType
        value.move< IntegerType > (YY_MOVE (that.value));
        break;

      case 239: // ModuleBody
        value.move< Module > (YY_MOVE (that.value));
        break;

      case 276: // NamedNumber
        value.move< NamedNumber > (YY_MOVE (that.value));
        break;

      case 265: // NamedType
        value.move< NamedType > (YY_MOVE (that.value));
        break;

      case 287: // NullType
        value.move< NullType > (YY_MOVE (that.value));
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.move< ObjectClassAssignment > (YY_MOVE (that.value));
        break;

      case 202: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (YY_MOVE (that.value));
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (YY_MOVE (that.value));
        break;

      case 306: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (YY_MOVE (that.value));
        break;

      case 286: // OctetStringType
        value.move< OctetStringType > (YY_MOVE (that.value));
        break;

      case 210: // Parameter
        value.move< Parameter > (YY_MOVE (that.value));
        break;

      case 300: // PrefixedType
        value.move< PrefixedType > (YY_MOVE (that.value));
        break;

      case 282: // RealType
        value.move< RealType > (YY_MOVE (that.value));
        break;

      case 319: // RelativeIRIType
        value.move< RelativeIRIType > (YY_MOVE (that.value));
        break;

      case 313: // RelativeOIDType
        value.move< RelativeOIDType > (YY_MOVE (that.value));
        break;

      case 292: // SequenceOfType
        value.move< SequenceOfType > (YY_MOVE (that.value));
        break;

      case 288: // SequenceType
        value.move< SequenceType > (YY_MOVE (that.value));
        break;

      case 294: // SetOfType
        value.move< SetOfType > (YY_MOVE (that.value));
        break;

      case 293: // SetType
        value.move< SetType > (YY_MOVE (that.value));
        break;

      case 302: // Tag
        value.move< Tag > (YY_MOVE (that.value));
        break;

      case 301: // TaggedType
        value.move< TaggedType > (YY_MOVE (that.value));
        break;

      case 237: // TagDefault
        value.move< TaggingMode > (YY_MOVE (that.value));
        break;

      case 325: // TimeOfDayType
        value.move< TimeOfDayType > (YY_MOVE (that.value));
        break;

      case 322: // TimeType
        value.move< TimeType > (YY_MOVE (that.value));
        break;

      case 323: // TimeValue
        value.move< TimeValue > (YY_MOVE (that.value));
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.move< Type > (YY_MOVE (that.value));
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.move< Value > (YY_MOVE (that.value));
        break;

      case 6: // realnumber
        value.move< double > (YY_MOVE (that.value));
        break;

      case 304: // ClassNumber
        value.move< int > (YY_MOVE (that.value));
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.move< int64_t > (YY_MOVE (that.value));
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (YY_MOVE (that.value));
        break;

      case 250: // AssignmentList
        value.move< std::vector<Assignment> > (YY_MOVE (that.value));
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.move< std::vector<ClassField> > (YY_MOVE (that.value));
        break;

      case 240: // Exports
        value.move< std::vector<Export> > (YY_MOVE (that.value));
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.move< std::vector<Import> > (YY_MOVE (that.value));
        break;

      case 275: // NamedNumberList
        value.move< std::vector<NamedNumber> > (YY_MOVE (that.value));
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.move< std::vector<NamedType> > (YY_MOVE (that.value));
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (YY_MOVE (that.value));
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.move< std::vector<Parameter> > (YY_MOVE (that.value));
        break;

      case 256: // ActualParameterList
        value.move< std::vector<Type> > (YY_MOVE (that.value));
        break;

      case 271: // SequenceOfValues
        value.move< std::vector<Value> > (YY_MOVE (that.value));
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.move< std::vector<std::string> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

#if YY_CPLUSPLUS < 201103L
  asn1_parser::stack_symbol_type&
  asn1_parser::stack_symbol_type::operator= (stack_symbol_type& that)
  {
    state = that.state;
    switch (that.type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.move< Assignment > (that.value);
        break;

      case 283: // BitStringType
        value.move< BitStringType > (that.value);
        break;

      case 272: // BooleanType
        value.move< BooleanType > (that.value);
        break;

      case 273: // BooleanValue
        value.move< BooleanValue > (that.value);
        break;

      case 264: // BuiltinType
        value.move< BuiltinType > (that.value);
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.move< CharacterStringType > (that.value);
        break;

      case 295: // ChoiceType
        value.move< ChoiceType > (that.value);
        break;

      case 305: // Class
        value.move< Class > (that.value);
        break;

      case 291: // ComponentType
        value.move< ComponentType > (that.value);
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.move< ComponentTypeList > (that.value);
        break;

      case 326: // DateTimeType
        value.move< DateTimeType > (that.value);
        break;

      case 324: // DateType
        value.move< DateType > (that.value);
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.move< DefinedType > (that.value);
        break;

      case 253: // DefinedValue
        value.move< DefinedValue > (that.value);
        break;

      case 327: // DurationType
        value.move< DurationType > (that.value);
        break;

      case 320: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (that.value);
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.move< EnumeratedType > (that.value);
        break;

      case 281: // EnumerationItem
        value.move< EnumerationValue > (that.value);
        break;

      case 321: // ExternalType
        value.move< ExternalType > (that.value);
        break;

      case 314: // IRIType
        value.move< IRIType > (that.value);
        break;

      case 245: // SymbolsFromModule
        value.move< Import > (that.value);
        break;

      case 215: // InstanceOfType
        value.move< InstanceOfType > (that.value);
        break;

      case 274: // IntegerType
        value.move< IntegerType > (that.value);
        break;

      case 239: // ModuleBody
        value.move< Module > (that.value);
        break;

      case 276: // NamedNumber
        value.move< NamedNumber > (that.value);
        break;

      case 265: // NamedType
        value.move< NamedType > (that.value);
        break;

      case 287: // NullType
        value.move< NullType > (that.value);
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.move< ObjectClassAssignment > (that.value);
        break;

      case 202: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (that.value);
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (that.value);
        break;

      case 306: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (that.value);
        break;

      case 286: // OctetStringType
        value.move< OctetStringType > (that.value);
        break;

      case 210: // Parameter
        value.move< Parameter > (that.value);
        break;

      case 300: // PrefixedType
        value.move< PrefixedType > (that.value);
        break;

      case 282: // RealType
        value.move< RealType > (that.value);
        break;

      case 319: // RelativeIRIType
        value.move< RelativeIRIType > (that.value);
        break;

      case 313: // RelativeOIDType
        value.move< RelativeOIDType > (that.value);
        break;

      case 292: // SequenceOfType
        value.move< SequenceOfType > (that.value);
        break;

      case 288: // SequenceType
        value.move< SequenceType > (that.value);
        break;

      case 294: // SetOfType
        value.move< SetOfType > (that.value);
        break;

      case 293: // SetType
        value.move< SetType > (that.value);
        break;

      case 302: // Tag
        value.move< Tag > (that.value);
        break;

      case 301: // TaggedType
        value.move< TaggedType > (that.value);
        break;

      case 237: // TagDefault
        value.move< TaggingMode > (that.value);
        break;

      case 325: // TimeOfDayType
        value.move< TimeOfDayType > (that.value);
        break;

      case 322: // TimeType
        value.move< TimeType > (that.value);
        break;

      case 323: // TimeValue
        value.move< TimeValue > (that.value);
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.move< Type > (that.value);
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.move< Value > (that.value);
        break;

      case 6: // realnumber
        value.move< double > (that.value);
        break;

      case 304: // ClassNumber
        value.move< int > (that.value);
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.move< int64_t > (that.value);
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (that.value);
        break;

      case 250: // AssignmentList
        value.move< std::vector<Assignment> > (that.value);
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.move< std::vector<ClassField> > (that.value);
        break;

      case 240: // Exports
        value.move< std::vector<Export> > (that.value);
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.move< std::vector<Import> > (that.value);
        break;

      case 275: // NamedNumberList
        value.move< std::vector<NamedNumber> > (that.value);
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.move< std::vector<NamedType> > (that.value);
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.move< std::vector<Parameter> > (that.value);
        break;

      case 256: // ActualParameterList
        value.move< std::vector<Type> > (that.value);
        break;

      case 271: // SequenceOfValues
        value.move< std::vector<Value> > (that.value);
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.move< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    // that is emptied.
    that.state = empty_state;
    return *this;
  }
#endif

  template <typename Base>
  void
  asn1_parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  asn1_parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
#if defined __GNUC__ && ! defined __clang__ && ! defined __ICC && __GNUC__ * 100 + __GNUC_MINOR__ <= 408
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
#endif
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  void
  asn1_parser::yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym)
  {
    if (m)
      YY_SYMBOL_PRINT (m, sym);
    yystack_.push (YY_MOVE (sym));
  }

  void
  asn1_parser::yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym)
  {
#if 201103L <= YY_CPLUSPLUS
    yypush_ (m, stack_symbol_type (s, std::move (sym)));
#else
    stack_symbol_type ss (s, sym);
    yypush_ (m, ss);
#endif
  }

  void
  asn1_parser::yypop_ (int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  asn1_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  asn1_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  asn1_parser::debug_level_type
  asn1_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  asn1_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  asn1_parser::state_type
  asn1_parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  bool
  asn1_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  bool
  asn1_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  asn1_parser::operator() ()
  {
    return parse ();
  }

  int
  asn1_parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

#if YY_EXCEPTIONS
    try
#endif // YY_EXCEPTIONS
      {
    YYCDEBUG << "Starting parse\n";


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, YY_MOVE (yyla));

  /*-----------------------------------------------.
  | yynewstate -- push a new symbol on the stack.  |
  `-----------------------------------------------*/
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << '\n';

    // Accept?
    if (yystack_[0].state == yyfinal_)
      YYACCEPT;

    goto yybackup;


  /*-----------.
  | yybackup.  |
  `-----------*/
  yybackup:
    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
#if YY_EXCEPTIONS
        try
#endif // YY_EXCEPTIONS
          {
            symbol_type yylookahead (yylex (context));
            yyla.move (yylookahead);
          }
#if YY_EXCEPTIONS
        catch (const syntax_error& yyexc)
          {
            YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
            error (yyexc);
            goto yyerrlab1;
          }
#endif // YY_EXCEPTIONS
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, YY_MOVE (yyla));
    goto yynewstate;


  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;


  /*-----------------------------.
  | yyreduce -- do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_ (yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
      switch (yyr1_[yyn])
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        yylhs.value.emplace< Assignment > ();
        break;

      case 283: // BitStringType
        yylhs.value.emplace< BitStringType > ();
        break;

      case 272: // BooleanType
        yylhs.value.emplace< BooleanType > ();
        break;

      case 273: // BooleanValue
        yylhs.value.emplace< BooleanValue > ();
        break;

      case 264: // BuiltinType
        yylhs.value.emplace< BuiltinType > ();
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        yylhs.value.emplace< CharacterStringType > ();
        break;

      case 295: // ChoiceType
        yylhs.value.emplace< ChoiceType > ();
        break;

      case 305: // Class
        yylhs.value.emplace< Class > ();
        break;

      case 291: // ComponentType
        yylhs.value.emplace< ComponentType > ();
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        yylhs.value.emplace< ComponentTypeList > ();
        break;

      case 326: // DateTimeType
        yylhs.value.emplace< DateTimeType > ();
        break;

      case 324: // DateType
        yylhs.value.emplace< DateType > ();
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        yylhs.value.emplace< DefinedType > ();
        break;

      case 253: // DefinedValue
        yylhs.value.emplace< DefinedValue > ();
        break;

      case 327: // DurationType
        yylhs.value.emplace< DurationType > ();
        break;

      case 320: // EmbeddedPDVType
        yylhs.value.emplace< EmbeddedPDVType > ();
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        yylhs.value.emplace< EnumeratedType > ();
        break;

      case 281: // EnumerationItem
        yylhs.value.emplace< EnumerationValue > ();
        break;

      case 321: // ExternalType
        yylhs.value.emplace< ExternalType > ();
        break;

      case 314: // IRIType
        yylhs.value.emplace< IRIType > ();
        break;

      case 245: // SymbolsFromModule
        yylhs.value.emplace< Import > ();
        break;

      case 215: // InstanceOfType
        yylhs.value.emplace< InstanceOfType > ();
        break;

      case 274: // IntegerType
        yylhs.value.emplace< IntegerType > ();
        break;

      case 239: // ModuleBody
        yylhs.value.emplace< Module > ();
        break;

      case 276: // NamedNumber
        yylhs.value.emplace< NamedNumber > ();
        break;

      case 265: // NamedType
        yylhs.value.emplace< NamedType > ();
        break;

      case 287: // NullType
        yylhs.value.emplace< NullType > ();
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        yylhs.value.emplace< ObjectClassAssignment > ();
        break;

      case 202: // ObjectClassFieldType
        yylhs.value.emplace< ObjectClassFieldType > ();
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        yylhs.value.emplace< ObjectIdComponentValue > ();
        break;

      case 306: // ObjectIdentifierType
        yylhs.value.emplace< ObjectIdentifierType > ();
        break;

      case 286: // OctetStringType
        yylhs.value.emplace< OctetStringType > ();
        break;

      case 210: // Parameter
        yylhs.value.emplace< Parameter > ();
        break;

      case 300: // PrefixedType
        yylhs.value.emplace< PrefixedType > ();
        break;

      case 282: // RealType
        yylhs.value.emplace< RealType > ();
        break;

      case 319: // RelativeIRIType
        yylhs.value.emplace< RelativeIRIType > ();
        break;

      case 313: // RelativeOIDType
        yylhs.value.emplace< RelativeOIDType > ();
        break;

      case 292: // SequenceOfType
        yylhs.value.emplace< SequenceOfType > ();
        break;

      case 288: // SequenceType
        yylhs.value.emplace< SequenceType > ();
        break;

      case 294: // SetOfType
        yylhs.value.emplace< SetOfType > ();
        break;

      case 293: // SetType
        yylhs.value.emplace< SetType > ();
        break;

      case 302: // Tag
        yylhs.value.emplace< Tag > ();
        break;

      case 301: // TaggedType
        yylhs.value.emplace< TaggedType > ();
        break;

      case 237: // TagDefault
        yylhs.value.emplace< TaggingMode > ();
        break;

      case 325: // TimeOfDayType
        yylhs.value.emplace< TimeOfDayType > ();
        break;

      case 322: // TimeType
        yylhs.value.emplace< TimeType > ();
        break;

      case 323: // TimeValue
        yylhs.value.emplace< TimeValue > ();
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        yylhs.value.emplace< Type > ();
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        yylhs.value.emplace< Value > ();
        break;

      case 6: // realnumber
        yylhs.value.emplace< double > ();
        break;

      case 304: // ClassNumber
        yylhs.value.emplace< int > ();
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        yylhs.value.emplace< int64_t > ();
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        yylhs.value.emplace< std::string > ();
        break;

      case 250: // AssignmentList
        yylhs.value.emplace< std::vector<Assignment> > ();
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        yylhs.value.emplace< std::vector<ClassField> > ();
        break;

      case 240: // Exports
        yylhs.value.emplace< std::vector<Export> > ();
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        yylhs.value.emplace< std::vector<Import> > ();
        break;

      case 275: // NamedNumberList
        yylhs.value.emplace< std::vector<NamedNumber> > ();
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        yylhs.value.emplace< std::vector<NamedType> > ();
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        yylhs.value.emplace< std::vector<ObjectIdComponentValue> > ();
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        yylhs.value.emplace< std::vector<Parameter> > ();
        break;

      case 256: // ActualParameterList
        yylhs.value.emplace< std::vector<Type> > ();
        break;

      case 271: // SequenceOfValues
        yylhs.value.emplace< std::vector<Value> > ();
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        yylhs.value.emplace< std::vector<std::string> > ();
        break;

      default:
        break;
    }


      // Default location.
      {
        stack_type::slice range (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, range, yylen);
        yyerror_range[1].location = yylhs.location;
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
#if YY_EXCEPTIONS
      try
#endif // YY_EXCEPTIONS
        {
          switch (yyn)
            {
  case 4:
#line 341 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yystack_[2].value.as < Module > ().module_reference = yystack_[9].value.as < std::string > ();
      yystack_[2].value.as < Module > ().tagging_default = yystack_[6].value.as < TaggingMode > ();
      context.asn1_tree.modules.push_back(yystack_[2].value.as < Module > ()); }
#line 7981 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 10:
#line 358 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = "TYPE-IDENTIFIER"; }
#line 7987 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 11:
#line 360 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = "TYPE-IDENTIFIER"; }
#line 7993 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 12:
#line 364 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{yystack_[2].value.as < std::string > (), yystack_[0].value.as < ObjectClassAssignment > ()}; }
#line 7999 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 13:
#line 368 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "ObjectClass"); }
#line 8005 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 14:
#line 370 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectClassAssignment > () = yystack_[0].value.as < ObjectClassAssignment > (); }
#line 8011 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 15:
#line 375 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectClassAssignment > () = {yystack_[2].value.as < std::vector<ClassField> > ()}; }
#line 8017 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 16:
#line 379 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ClassField> > () = yystack_[0].value.as < std::vector<ClassField> > (); }
#line 8023 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 17:
#line 381 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ClassField> > () = yystack_[2].value.as < std::vector<ClassField> > (); yylhs.value.as < std::vector<ClassField> > ().insert(yylhs.value.as < std::vector<ClassField> > ().end(), yystack_[0].value.as < std::vector<ClassField> > ().begin(), yystack_[0].value.as < std::vector<ClassField> > ().end()); }
#line 8029 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 18:
#line 385 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ClassField> > () = yystack_[0].value.as < std::vector<ClassField> > (); }
#line 8035 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 19:
#line 387 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ClassField> > () = yystack_[0].value.as < std::vector<ClassField> > (); }
#line 8041 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 24:
#line 395 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8047 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 25:
#line 397 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8053 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 26:
#line 405 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 8059 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 27:
#line 407 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > () = yystack_[2].value.as < std::vector<std::string> > (); yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 8065 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 28:
#line 411 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { for (const std::string& name : yystack_[1].value.as < std::vector<std::string> > ()) yylhs.value.as < std::vector<ClassField> > ().push_back(ClassField{name, TypeField{}}); }
#line 8071 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 29:
#line 415 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 8077 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 30:
#line 417 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > () = yystack_[1].value.as < std::vector<std::string> > (); yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 8083 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 37:
#line 431 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ClassField> > ().push_back(ClassField{yystack_[3].value.as < std::string > (), FixedTypeValueField{yystack_[2].value.as < Type > ()}}); }
#line 8089 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 86:
#line 546 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{yystack_[3].value.as < std::string > (), ObjectSetAssignment{}}; }
#line 8095 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 93:
#line 566 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectClassFieldType > () = {DefinedType{{}, }, yystack_[0].value.as < std::vector<std::string> > ()}; }
#line 8101 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 94:
#line 568 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectClassFieldType > () = {DefinedType{{}, yystack_[2].value.as < std::string > ()}, yystack_[0].value.as < std::vector<std::string> > ()}; }
#line 8107 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 95:
#line 575 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8113 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 96:
#line 577 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8119 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 97:
#line 579 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8125 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 98:
#line 581 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8131 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 99:
#line 588 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[3].value.as < std::string > (), TypeAssignment{yystack_[0].value.as < Type > ()}, {}, yystack_[2].value.as < std::vector<Parameter> > () }; }
#line 8137 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 100:
#line 592 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[4].value.as < std::string > (), ValueAssignment{} }; }
#line 8143 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 101:
#line 596 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[4].value.as < std::string > (), ValueAssignment{} }; }
#line 8149 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 102:
#line 600 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[3].value.as < std::string > (), ObjectClassAssignment{} }; }
#line 8155 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 103:
#line 612 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Parameter> > () = yystack_[1].value.as < std::vector<Parameter> > (); }
#line 8161 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 104:
#line 616 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Parameter> > ().push_back(yystack_[0].value.as < Parameter > ()); }
#line 8167 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 105:
#line 618 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Parameter> > () = yystack_[2].value.as < std::vector<Parameter> > (); yylhs.value.as < std::vector<Parameter> > ().push_back(yystack_[0].value.as < Parameter > ()); }
#line 8173 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 106:
#line 622 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Parameter > () = Parameter{yystack_[2].value.as < Type > (), yystack_[0].value.as < std::string > ()}; }
#line 8179 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 107:
#line 624 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Parameter > () = Parameter{{}, yystack_[0].value.as < std::string > ()}; }
#line 8185 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 108:
#line 628 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < Type > (); }
#line 8191 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 109:
#line 630 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = DefinedType{{}, yystack_[0].value.as < std::string > ()}; }
#line 8197 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 110:
#line 634 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < Type > (); }
#line 8203 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 111:
#line 636 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { }
#line 8209 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 114:
#line 673 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "InstanceOfType"); }
#line 8215 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 116:
#line 682 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8221 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 122:
#line 695 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "UserDefinedConstraint", "Not yet checking contraints. "); }
#line 8227 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 130:
#line 709 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << "Simple constraint\n"; }
#line 8233 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 131:
#line 711 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << "Relation constraint\n"; }
#line 8239 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 144:
#line 753 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    {
    yylhs.value.as < std::string > () = yystack_[1].value.as < std::string > ();
}
#line 8247 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 159:
#line 792 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggingMode > () = TaggingMode::explicit_; }
#line 8253 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 160:
#line 794 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggingMode > () = TaggingMode::implicit; }
#line 8259 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 161:
#line 796 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggingMode > () = TaggingMode::automatic; }
#line 8265 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 162:
#line 798 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggingMode > () = TaggingMode::explicit_; }
#line 8271 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 165:
#line 806 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Module > () = Module{ {}, TaggingMode(), yystack_[2].value.as < std::vector<Export> > (), yystack_[1].value.as < std::vector<Import> > (), yystack_[0].value.as < std::vector<Assignment> > ()}; }
#line 8277 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 166:
#line 808 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { }
#line 8283 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 172:
#line 821 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Import> > () = yystack_[1].value.as < std::vector<Import> > (); }
#line 8289 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 174:
#line 826 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Import> > () = yystack_[0].value.as < std::vector<Import> > (); }
#line 8295 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 176:
#line 831 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Import> > ().push_back(yystack_[0].value.as < Import > ()); }
#line 8301 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 177:
#line 833 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Import> > () = yystack_[1].value.as < std::vector<Import> > (); yylhs.value.as < std::vector<Import> > ().push_back(yystack_[0].value.as < Import > ()); }
#line 8307 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 178:
#line 837 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Import > () = Import{ yystack_[0].value.as < std::string > (), {}, {} };
      for (const std::string& ref: yystack_[2].value.as < std::vector<std::string> > ())
      {
        if (std::isupper(ref[0]))
        {
          yylhs.value.as < Import > ().imported_types.push_back(ref);
        }
        else
        {
          yylhs.value.as < Import > ().imported_values.push_back(ref);
        }
      }
    }
#line 8325 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 179:
#line 853 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8331 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 180:
#line 855 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[1].value.as < std::string > (); }
#line 8337 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 181:
#line 861 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 8343 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 182:
#line 863 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > () = yystack_[2].value.as < std::vector<std::string> > (); yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 8349 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 183:
#line 867 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8355 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 184:
#line 871 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8361 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 185:
#line 873 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[2].value.as < std::string > (); }
#line 8367 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 186:
#line 875 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8373 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 187:
#line 884 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Assignment> > ().push_back(yystack_[0].value.as < Assignment > ()); }
#line 8379 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 188:
#line 886 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Assignment> > () = yystack_[0].value.as < std::vector<Assignment> > (); yylhs.value.as < std::vector<Assignment> > ().push_back(yystack_[1].value.as < Assignment > ()); }
#line 8385 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 189:
#line 890 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8391 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 190:
#line 892 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8397 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 191:
#line 894 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8403 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 192:
#line 896 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8409 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 193:
#line 899 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8415 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 194:
#line 901 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8421 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 195:
#line 905 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedType > () = yystack_[0].value.as < DefinedType > (); }
#line 8427 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 196:
#line 907 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedType > () = DefinedType{absl::nullopt, yystack_[0].value.as < std::string > (), {}}; }
#line 8433 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 197:
#line 909 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedType > () = yystack_[0].value.as < DefinedType > (); }
#line 8439 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 198:
#line 915 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedValue > () = DefinedValue{yystack_[0].value.as < std::string > ()}; }
#line 8445 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 200:
#line 920 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedType > () = DefinedType{ absl::nullopt, yystack_[3].value.as < std::string > (), yystack_[1].value.as < std::vector<Type> > ()}; }
#line 8451 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 202:
#line 927 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Type> > ().push_back(yystack_[0].value.as < Type > ()); }
#line 8457 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 203:
#line 929 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Type> > () = yystack_[0].value.as < std::vector<Type> > (); yylhs.value.as < std::vector<Type> > ().push_back(yystack_[2].value.as < Type > ()); }
#line 8463 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 204:
#line 933 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < Type > (); }
#line 8469 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 205:
#line 935 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << "Warning: Not yet dealing with value paramaters\n"; }
#line 8475 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 207:
#line 948 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedType > () = DefinedType{yystack_[2].value.as < std::string > (), yystack_[0].value.as < std::string > (), {}}; }
#line 8481 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 209:
#line 977 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[2].value.as < std::string > (), TypeAssignment{yystack_[0].value.as < Type > ()}, {} }; }
#line 8487 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 210:
#line 981 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[3].value.as < std::string > (), ValueAssignment{yystack_[2].value.as < Type > (), yystack_[0].value.as < Value > ()}, {} }; }
#line 8493 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 211:
#line 985 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[3].value.as < std::string > (), TypeAssignment{yystack_[2].value.as < Type > ()}, {} }; }
#line 8499 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 212:
#line 989 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < BuiltinType > (); }
#line 8505 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 213:
#line 991 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < Type > (); }
#line 8511 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 214:
#line 993 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < DefinedType > (); }
#line 8517 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 215:
#line 995 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "SelectionType"); }
#line 8523 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 216:
#line 997 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "TypeFromObject"); }
#line 8529 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 217:
#line 1001 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = AnyType(); }
#line 8535 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 218:
#line 1002 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < BitStringType > (); }
#line 8541 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 219:
#line 1003 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < BooleanType > (); }
#line 8547 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 220:
#line 1004 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < CharacterStringType > (); }
#line 8553 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 221:
#line 1005 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < ChoiceType > (); }
#line 8559 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 222:
#line 1006 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < DateType > (); feature_not_implemented(context.location, context.asn1_tree, "DateType"); }
#line 8565 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 223:
#line 1007 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < DateTimeType > (); feature_not_implemented(context.location, context.asn1_tree, "DateTimeType"); }
#line 8571 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 224:
#line 1008 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < DurationType > (); feature_not_implemented(context.location, context.asn1_tree, "DurationType"); }
#line 8577 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 225:
#line 1009 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < EmbeddedPDVType > (); feature_not_implemented(context.location, context.asn1_tree, "EmbeddedPDVType"); }
#line 8583 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 226:
#line 1010 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < EnumeratedType > (); }
#line 8589 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 227:
#line 1011 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < ExternalType > (); feature_not_implemented(context.location, context.asn1_tree, "ExternalType"); }
#line 8595 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 228:
#line 1012 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = GeneralizedTimeType(); }
#line 8601 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 229:
#line 1013 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < InstanceOfType > (); feature_not_implemented(context.location, context.asn1_tree, "InstanceOfType"); }
#line 8607 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 230:
#line 1014 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < IntegerType > (); }
#line 8613 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 231:
#line 1015 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < IRIType > (); feature_not_implemented(context.location, context.asn1_tree, "IRIType"); }
#line 8619 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 232:
#line 1016 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < NullType > (); }
#line 8625 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 233:
#line 1017 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < ObjectClassFieldType > (); feature_not_implemented(context.location, context.asn1_tree, "ObjectClassFieldType"); }
#line 8631 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 234:
#line 1018 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = ObjectDescriptorType(); }
#line 8637 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 235:
#line 1019 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < ObjectIdentifierType > (); }
#line 8643 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 236:
#line 1020 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < OctetStringType > (); }
#line 8649 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 237:
#line 1021 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < RealType > (); feature_not_implemented(context.location, context.asn1_tree, "RealType"); }
#line 8655 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 238:
#line 1022 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < RelativeIRIType > (); feature_not_implemented(context.location, context.asn1_tree, "RelativeIRIType"); }
#line 8661 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 239:
#line 1023 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < RelativeOIDType > (); feature_not_implemented(context.location, context.asn1_tree, "RelativeOIDType"); }
#line 8667 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 240:
#line 1024 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < SequenceType > (); }
#line 8673 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 241:
#line 1025 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < SequenceOfType > (); }
#line 8679 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 242:
#line 1026 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < SetType > (); feature_not_implemented(context.location, context.asn1_tree, "SET", "Currently SET is treated as a SEQUENCE type. "); }
#line 8685 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 243:
#line 1027 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < SetOfType > (); }
#line 8691 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 244:
#line 1028 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < PrefixedType > (); }
#line 8697 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 245:
#line 1029 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < TimeType > (); feature_not_implemented(context.location, context.asn1_tree, "TimeType"); }
#line 8703 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 246:
#line 1030 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < TimeOfDayType > (); feature_not_implemented(context.location, context.asn1_tree, "TimeOfDayType"); }
#line 8709 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 247:
#line 1031 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = UTCTimeType(); feature_not_implemented(context.location, context.asn1_tree, "UTCTime"); }
#line 8715 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 248:
#line 1035 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < NamedType > () = NamedType{ yystack_[1].value.as < std::string > (), yystack_[0].value.as < Type > () }; }
#line 8721 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 249:
#line 1039 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: BooleanValue\n"); }
#line 8727 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 250:
#line 1041 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: IRIValue\n"); }
#line 8733 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 251:
#line 1043 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: ASN_NULL\n"); }
#line 8739 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 252:
#line 1045 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: TimeValue\n"); }
#line 8745 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 253:
#line 1047 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = BitStringValue{yystack_[0].value.as < std::string > ()}; }
#line 8751 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 254:
#line 1049 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = HexStringValue{yystack_[0].value.as < std::string > ()}; }
#line 8757 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 255:
#line 1051 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = CharStringValue{yystack_[0].value.as < std::string > ()}; }
#line 8763 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 256:
#line 1053 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: CONTAINING\n"); }
#line 8769 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 257:
#line 1055 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < DefinedValue > (); }
#line 8775 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 258:
#line 1057 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = NamedNumber{yystack_[3].value.as < std::string > (), yystack_[1].value.as < int64_t > ()}; }
#line 8781 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 260:
#line 1060 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < int64_t > (); }
#line 8787 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 261:
#line 1062 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < double > (); }
#line 8793 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 262:
#line 1064 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: ValueCommaListChoice\n"); }
#line 8799 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 263:
#line 1066 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: ValueCommaListChoice\n"); }
#line 8805 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 268:
#line 1074 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[1].value.as < std::vector<Value> > (); }
#line 8811 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 269:
#line 1076 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: ValueChoice\n"); }
#line 8817 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 270:
#line 1078 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: OPTIONAL\n"); }
#line 8823 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 271:
#line 1080 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: ValueCommaListChoice\n"); }
#line 8829 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 272:
#line 1082 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: BY\n"); }
#line 8835 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 273:
#line 1084 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: WITH\n"); }
#line 8841 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 274:
#line 1089 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > () = yystack_[0].value.as < Value > (); }
#line 8847 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 275:
#line 1091 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < std::string > (); }
#line 8853 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 282:
#line 1107 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Value> > ().push_back(yystack_[0].value.as < Value > ()); }
#line 8859 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 283:
#line 1109 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Value> > () = yystack_[1].value.as < std::vector<Value> > (); yylhs.value.as < std::vector<Value> > ().push_back(yystack_[0].value.as < Value > ()); }
#line 8865 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 285:
#line 1120 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BooleanValue > () = {true}; }
#line 8871 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 286:
#line 1122 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BooleanValue > () = {false}; }
#line 8877 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 287:
#line 1126 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < IntegerType > () = IntegerType{{}}; }
#line 8883 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 288:
#line 1128 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < IntegerType > () = IntegerType{yystack_[1].value.as < std::vector<NamedNumber> > ()}; }
#line 8889 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 289:
#line 1132 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedNumber> > () = {yystack_[0].value.as < NamedNumber > ()}; }
#line 8895 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 290:
#line 1134 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedNumber> > () = yystack_[2].value.as < std::vector<NamedNumber> > (); yylhs.value.as < std::vector<NamedNumber> > ().push_back(yystack_[0].value.as < NamedNumber > ()); }
#line 8901 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 291:
#line 1138 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < NamedNumber > () = NamedNumber{ yystack_[3].value.as < std::string > (), yystack_[1].value.as < int64_t > () }; }
#line 8907 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 292:
#line 1140 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < NamedNumber > () = NamedNumber{ yystack_[3].value.as < std::string > (), 0 }; }
#line 8913 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 293:
#line 1144 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < int64_t > () = yystack_[0].value.as < int64_t > (); }
#line 8919 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 294:
#line 1146 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < int64_t > () = yystack_[0].value.as < int64_t > (); }
#line 8925 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 295:
#line 1150 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > () = yystack_[1].value.as < EnumeratedType > (); }
#line 8931 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 296:
#line 1154 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > () = yystack_[0].value.as < EnumeratedType > ();
      yylhs.value.as < EnumeratedType > ().accept_anything = false; }
#line 8938 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 297:
#line 1157 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > () = yystack_[3].value.as < EnumeratedType > ();
      yylhs.value.as < EnumeratedType > ().accept_anything = true; }
#line 8945 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 298:
#line 1160 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > () = yystack_[5].value.as < EnumeratedType > ();
      yylhs.value.as < EnumeratedType > ().accept_anything = true;
      yylhs.value.as < EnumeratedType > ().enum_values.insert(yylhs.value.as < EnumeratedType > ().enum_values.end(), yystack_[0].value.as < EnumeratedType > ().enum_values.begin(), yystack_[0].value.as < EnumeratedType > ().enum_values.end()); }
#line 8953 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 300:
#line 1167 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > ().enum_values.push_back(yystack_[0].value.as < EnumerationValue > ()); }
#line 8959 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 301:
#line 1169 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > () = yystack_[2].value.as < EnumeratedType > (); yylhs.value.as < EnumeratedType > ().enum_values.push_back(yystack_[0].value.as < EnumerationValue > ()); }
#line 8965 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 302:
#line 1173 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumerationValue > ().name  = yystack_[0].value.as < std::string > (); }
#line 8971 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 303:
#line 1175 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumerationValue > ().name  = yystack_[0].value.as < NamedNumber > ().name;
      yylhs.value.as < EnumerationValue > ().value = yystack_[0].value.as < NamedNumber > ().number; }
#line 8978 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 305:
#line 1186 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BitStringType > () = BitStringType{}; }
#line 8984 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 306:
#line 1188 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BitStringType > () = BitStringType{}; }
#line 8990 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 313:
#line 1217 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SequenceType > () = SequenceType(); }
#line 8996 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 314:
#line 1219 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SequenceType > () = SequenceType{yystack_[1].value.as < ComponentTypeList > ()}; }
#line 9002 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 315:
#line 1223 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[0].value.as < ComponentTypeList > (); }
#line 9008 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 316:
#line 1225 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[3].value.as < ComponentTypeList > (); }
#line 9014 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 317:
#line 1227 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[5].value.as < ComponentTypeList > (); yylhs.value.as < ComponentTypeList > ().insert(yylhs.value.as < ComponentTypeList > ().end(), yystack_[0].value.as < ComponentTypeList > ().begin(), yystack_[0].value.as < ComponentTypeList > ().end()); }
#line 9020 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 318:
#line 1229 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[7].value.as < ComponentTypeList > (); yylhs.value.as < ComponentTypeList > ().insert(yylhs.value.as < ComponentTypeList > ().end(), yystack_[2].value.as < ComponentTypeList > ().begin(), yystack_[2].value.as < ComponentTypeList > ().end()); }
#line 9026 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 319:
#line 1231 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[9].value.as < ComponentTypeList > (); yylhs.value.as < ComponentTypeList > ().insert(yylhs.value.as < ComponentTypeList > ().end(), yystack_[4].value.as < ComponentTypeList > ().begin(), yystack_[4].value.as < ComponentTypeList > ().end()); yylhs.value.as < ComponentTypeList > ().insert(yylhs.value.as < ComponentTypeList > ().end(), yystack_[0].value.as < ComponentTypeList > ().begin(), yystack_[0].value.as < ComponentTypeList > ().end()); }
#line 9032 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 320:
#line 1233 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[0].value.as < ComponentTypeList > (); }
#line 9038 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 321:
#line 1235 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[2].value.as < ComponentTypeList > (); }
#line 9044 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 322:
#line 1237 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = {}; }
#line 9050 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 323:
#line 1239 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = {}; }
#line 9056 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 324:
#line 1243 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = ComponentTypeList{yystack_[0].value.as < ComponentType > ()}; }
#line 9062 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 325:
#line 1245 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yystack_[2].value.as < ComponentTypeList > ().push_back(yystack_[0].value.as < ComponentType > ()); yylhs.value.as < ComponentTypeList > () = yystack_[2].value.as < ComponentTypeList > (); }
#line 9068 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 326:
#line 1249 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << context.location << " WARNING: unnamed type\n";
      yylhs.value.as < ComponentType > () = ComponentType{{gen_anon_member_name(), yystack_[0].value.as < Type > ()}, false, absl::nullopt, absl::nullopt, StorageMode::static_ }; }
#line 9075 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 327:
#line 1252 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << context.location << " WARNING: unnamed type\n";
      yylhs.value.as < ComponentType > () = ComponentType{{gen_anon_member_name(), yystack_[1].value.as < Type > ()}, true, absl::nullopt, absl::nullopt, StorageMode::static_ }; }
#line 9082 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 328:
#line 1255 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentType > () = ComponentType{{gen_anon_member_name(), yystack_[2].value.as < Type > ()}, false, yystack_[0].value.as < Value > (), absl::nullopt, StorageMode::static_ };
      std::cerr << context.location << " WARNING: unnamed type\n"; }
#line 9089 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 329:
#line 1258 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentType > () = ComponentType{yystack_[0].value.as < NamedType > (), false, absl::nullopt, absl::nullopt, StorageMode::static_ }; }
#line 9095 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 330:
#line 1260 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentType > () = ComponentType{yystack_[1].value.as < NamedType > (), true, absl::nullopt, absl::nullopt, StorageMode::static_ }; }
#line 9101 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 331:
#line 1262 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentType > () = ComponentType{yystack_[2].value.as < NamedType > (), false, yystack_[0].value.as < Value > (), absl::nullopt, StorageMode::static_ }; }
#line 9107 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 332:
#line 1264 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentType > () = ComponentType{{}, false, absl::nullopt, yystack_[0].value.as < Type > (), StorageMode::static_}; }
#line 9113 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 333:
#line 1276 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SequenceOfType > () = SequenceOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9119 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 334:
#line 1278 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SequenceOfType > () = SequenceOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9125 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 335:
#line 1282 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SetType > () = SetType{}; }
#line 9131 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 336:
#line 1284 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SetType > () = SetType{yystack_[1].value.as < ComponentTypeList > ()}; }
#line 9137 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 337:
#line 1288 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SetOfType > () = SetOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9143 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 338:
#line 1290 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SetOfType > () = SetOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9149 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 339:
#line 1294 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ChoiceType > () = ChoiceType{ yystack_[1].value.as < std::vector<NamedType> > (), StorageMode::static_ }; }
#line 9155 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 340:
#line 1298 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedType> > () = yystack_[0].value.as < std::vector<NamedType> > (); }
#line 9161 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 341:
#line 1302 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedType> > () = yystack_[0].value.as < std::vector<NamedType> > (); }
#line 9167 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 342:
#line 1304 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedType> > () = yystack_[2].value.as < std::vector<NamedType> > (); }
#line 9173 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 343:
#line 1306 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedType> > () = yystack_[4].value.as < std::vector<NamedType> > (); yylhs.value.as < std::vector<NamedType> > ().insert(yylhs.value.as < std::vector<NamedType> > ().begin(), yystack_[0].value.as < std::vector<NamedType> > ().begin(), yystack_[0].value.as < std::vector<NamedType> > ().end()); }
#line 9179 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 344:
#line 1310 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedType> > () = std::vector<NamedType> { yystack_[0].value.as < NamedType > () }; }
#line 9185 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 345:
#line 1312 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yystack_[2].value.as < std::vector<NamedType> > ().push_back( yystack_[0].value.as < NamedType > () ); yylhs.value.as < std::vector<NamedType> > () = yystack_[2].value.as < std::vector<NamedType> > (); }
#line 9191 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 347:
#line 1322 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < PrefixedType > () = PrefixedType(yystack_[0].value.as < TaggedType > ()); }
#line 9197 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 348:
#line 1326 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggedType > () = TaggedType{ yystack_[1].value.as < Tag > (), TaggingMode::automatic, yystack_[0].value.as < Type > () }; }
#line 9203 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 349:
#line 1328 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggedType > () = TaggedType{ yystack_[2].value.as < Tag > (), TaggingMode::implicit, yystack_[0].value.as < Type > () }; }
#line 9209 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 350:
#line 1330 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggedType > () = TaggedType{ yystack_[2].value.as < Tag > (), TaggingMode::explicit_, yystack_[0].value.as < Type > () }; }
#line 9215 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 351:
#line 1334 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Tag > () = Tag{ yystack_[2].value.as < Class > (), yystack_[1].value.as < int > () }; }
#line 9221 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 354:
#line 1342 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < int > () = yystack_[0].value.as < int64_t > (); }
#line 9227 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 356:
#line 1347 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Class > () = Class::universal; }
#line 9233 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 357:
#line 1349 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Class > () = Class::application; }
#line 9239 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 358:
#line 1351 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Class > () = Class::private_; }
#line 9245 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 359:
#line 1353 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Class > () = Class::context_specific; }
#line 9251 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 361:
#line 1366 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as < std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as < std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as < std::vector<ObjectIdComponentValue> > ().end()); }
#line 9257 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 362:
#line 1368 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as < std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as < std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as < std::vector<ObjectIdComponentValue> > ().end()); }
#line 9263 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 363:
#line 1372 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ObjectIdComponentValue> > ().push_back(yystack_[0].value.as < ObjectIdComponentValue > ()); }
#line 9269 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 364:
#line 1374 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ObjectIdComponentValue> > () = yystack_[0].value.as < std::vector<ObjectIdComponentValue> > (); yylhs.value.as < std::vector<ObjectIdComponentValue> > ().push_back(yystack_[1].value.as < ObjectIdComponentValue > ()); }
#line 9275 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 365:
#line 1378 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > () = yystack_[0].value.as < ObjectIdComponentValue > (); }
#line 9281 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 366:
#line 1380 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > () = yystack_[0].value.as < ObjectIdComponentValue > (); }
#line 9287 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 367:
#line 1382 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > () = yystack_[0].value.as < ObjectIdComponentValue > (); }
#line 9293 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 368:
#line 1386 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > ().name = yystack_[0].value.as < std::string > (); }
#line 9299 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 369:
#line 1390 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > ().value = yystack_[0].value.as < int64_t > (); }
#line 9305 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 371:
#line 1395 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > () = yystack_[1].value.as < ObjectIdComponentValue > (); yylhs.value.as < ObjectIdComponentValue > ().name = yystack_[3].value.as < std::string > (); }
#line 9311 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 389:
#line 1468 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = yystack_[0].value.as < CharacterStringType > (); }
#line 9317 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 390:
#line 1470 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = yystack_[0].value.as < CharacterStringType > (); }
#line 9323 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 391:
#line 1474 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::bmp_string; }
#line 9329 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 392:
#line 1476 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::general_string; }
#line 9335 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 393:
#line 1478 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::graphic_string; }
#line 9341 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 394:
#line 1480 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::ia5_string; }
#line 9347 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 395:
#line 1482 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::iso646_string; }
#line 9353 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 396:
#line 1484 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::numeric_string; }
#line 9359 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 397:
#line 1486 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::printable_string; }
#line 9365 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 398:
#line 1488 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::teletex_string; }
#line 9371 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 399:
#line 1490 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::t61_string; }
#line 9377 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 400:
#line 1492 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::universal_string; }
#line 9383 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 401:
#line 1494 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::utf8_string; }
#line 9389 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 402:
#line 1496 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::videotex_string; }
#line 9395 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 403:
#line 1498 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::visible_string; }
#line 9401 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 404:
#line 1502 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::character_string; }
#line 9407 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 405:
#line 1506 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[1].value.as < Type > (); }
#line 9413 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 406:
#line 1508 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < Type > (); feature_not_implemented(context.location, context.asn1_tree, "TypeWithConstraint", "Not yet checking contraints. ");  }
#line 9419 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 407:
#line 1512 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SetOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9425 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 408:
#line 1514 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SetOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9431 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 409:
#line 1516 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SequenceOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9437 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 410:
#line 1518 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SequenceOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9443 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 411:
#line 1520 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SetOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9449 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 412:
#line 1522 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SetOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9455 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 413:
#line 1524 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SequenceOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9461 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 414:
#line 1526 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SequenceOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9467 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 415:
#line 1530 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "ConstraintSpec", "Not yet checking contraints. "); }
#line 9473 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 449:
#line 1601 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < BooleanValue > (); }
#line 9479 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 450:
#line 1604 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = NullValue{}; }
#line 9485 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 451:
#line 1606 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < TimeValue > (); }
#line 9491 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 452:
#line 1608 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < std::string > (); }
#line 9497 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 453:
#line 1610 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < std::string > (); }
#line 9503 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 454:
#line 1612 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < std::string > (); }
#line 9509 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 455:
#line 1614 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < std::string > (); }
#line 9515 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 456:
#line 1616 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < DefinedValue > (); }
#line 9521 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 457:
#line 1618 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < int64_t > (); }
#line 9527 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 458:
#line 1620 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < double > (); }
#line 9533 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 497:
#line 1705 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9539 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 498:
#line 1709 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9545 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 499:
#line 1713 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9551 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 500:
#line 1717 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9557 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 501:
#line 1721 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9563 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 502:
#line 1724 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9569 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;


#line 9573 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:919
            default:
              break;
            }
        }
#if YY_EXCEPTIONS
      catch (const syntax_error& yyexc)
        {
          YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
          error (yyexc);
          YYERROR;
        }
#endif // YY_EXCEPTIONS
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, YY_MOVE (yylhs));
    }
    goto yynewstate;


  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:
    /* Pacify compilers when the user code never invokes YYERROR and
       the label yyerrorlab therefore never appears in user code.  */
    if (false)
      YYERROR;

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;


  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", YY_MOVE (error_token));
    }
    goto yynewstate;


  /*-------------------------------------.
  | yyacceptlab -- YYACCEPT comes here.  |
  `-------------------------------------*/
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;


  /*-----------------------------------.
  | yyabortlab -- YYABORT comes here.  |
  `-----------------------------------*/
  yyabortlab:
    yyresult = 1;
    goto yyreturn;


  /*-----------------------------------------------------.
  | yyreturn -- parsing is finished, return the result.  |
  `-----------------------------------------------------*/
  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
#if YY_EXCEPTIONS
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack\n";
        // Do not try to display the values of the reclaimed symbols,
        // as their printers might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
#endif // YY_EXCEPTIONS
  }

  void
  asn1_parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what ());
  }

  // Generate an error message.
  std::string
  asn1_parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
      default: // Avoid compiler warnings.
        YYCASE_ (0, YY_("syntax error"));
        YYCASE_ (1, YY_("syntax error, unexpected %s"));
        YYCASE_ (2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_ (3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_ (4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_ (5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short asn1_parser::yypact_ninf_ = -663;

  const short asn1_parser::yytable_ninf_ = -502;

  const short
  asn1_parser::yypact_[] =
  {
     -86,  -663,   173,   -86,    35,    75,  -663,  -663,   242,    19,
    -663,    73,  -663,    87,   162,  -663,  -663,   136,    19,  -663,
    -663,  -663,   158,   132,  -663,  -663,   193,   224,   240,   246,
    -663,  -663,   355,   307,   221,  -663,  -663,  -663,   293,   248,
     244,  -663,  -663,  -663,   307,   243,  -663,   343,  -663,   221,
    -663,   222,  -663,    -1,  -663,   309,   245,  -663,  -663,   252,
     253,  -663,  -663,   273,  -663,   348,   199,   199,  -663,  -663,
     199,   280,  -663,   264,   199,  -663,   -15,  -663,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,   199,  -663,  -663,  -663,  2747,
    3444,  -663,  -663,  -663,  -663,   -86,  -663,  -663,  -663,  -663,
    -663,   304,  -663,  -663,   305,   287,  -663,  -663,  -663,   322,
     294,  -663,  -663,  -663,  -663,  -663,   332,   296,  -663,  -663,
     357,  -663,   321,  -663,  -663,  -663,  -663,  -663,    -6,     0,
    -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,
    3543,  4042,   411,  -663,   290,  -663,  -663,   314,  -663,  -663,
    3642,   299,  -663,  -663,   316,  -663,  -663,   317,   184,  -663,
    -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,  2850,  -663,  -663,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,
    -663,  -663,   122,   315,   308,  4141,   187,    -5,   311,  -663,
     323,   324,  -663,   300,  -663,   -50,    43,   300,  -663,  -663,
    4141,   326,  2549,  1557,   366,   367,  4141,  2648,   370,   371,
     336,  -663,  -663,  -663,   290,  -663,  -663,   326,   330,  -663,
      88,  -663,    27,  -663,   320,  -663,   329,   326,   -41,   335,
      20,   328,   338,  3543,   188,   328,  1813,   349,  -663,  4141,
    4141,   326,    36,  4141,    18,   190,  2443,   452,    34,  -663,
     300,  -663,   352,  -663,   341,  4141,   350,  -663,   356,   346,
    -663,   354,   347,  -663,  -663,   358,    94,  -663,   354,   326,
    -663,  3745,  -663,   397,   350,  -663,     2,    24,   362,   351,
    -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,   432,    -7,
     455,  4141,   458,  -663,   326,  -663,  -663,  2443,   479,  -663,
     310,  1682,  1938,    96,   375,   377,  -663,  -663,  -663,  -663,
    -663,  -663,  -663,   326,  -663,  -663,  -663,   350,  -663,  -663,
     365,   -44,   -33,   -10,     1,  -663,   432,   449,  -663,    72,
    -663,  4141,  -663,   395,   390,  -663,  -663,  -663,  -663,  -663,
    -663,   398,   383,  4141,  4141,   326,  -663,  -663,   400,  4141,
    4141,   201,    26,  -663,  4042,   199,  -663,  -663,  -663,  -663,
      39,  -663,  -663,  -663,   385,  -663,  -663,   326,  2443,   385,
    -663,  -663,  -663,  -663,  -663,  -663,   401,  -663,  2443,   209,
    -663,  -663,  2443,  -663,   144,   171,  -663,   381,  -663,   403,
     392,   326,   178,   146,   404,   399,  -663,  -663,  -663,  -663,
     103,   405,  1938,  -663,   326,   326,   385,  -663,   326,  -663,
    -663,  2443,  -663,  -663,    98,   416,  -663,  -663,   146,   408,
     409,  -663,    34,   427,    34,  -663,  -663,  -663,   429,   117,
    -663,   430,  -663,   -47,   326,  2293,  -663,  -663,   -46,    41,
     410,  -663,   300,  4141,   421,   759,  -663,   759,  -663,  -663,
    2949,  2194,  -663,   433,    12,  2443,  -663,   146,  -663,   326,
     436,   426,   439,   428,   441,   422,  1813,   443,   450,  -663,
    -663,  2194,  -663,  -663,  2194,  -663,   326,    30,  -663,    11,
     326,  -663,   326,  -663,  -663,   326,  -663,   326,  -663,  4240,
    3048,    43,   125,  -663,  -663,    32,  -663,  -663,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,  -663,  -663,   442,   328,   146,
     146,   146,  1083,   569,  -663,  1813,  2443,  2443,  2443,  2443,
    2443,   333,     9,   460,   146,   328,   424,  -663,   462,  -663,
    -663,    55,  -663,   300,    61,   451,  -663,  -663,     5,  -663,
    -663,   350,  -663,   453,   465,  -663,   326,  3147,  -663,   347,
    -663,  -663,   350,  -663,  -663,  3844,   549,   146,  -663,  -663,
      59,  -663,  1938,  -663,   471,  -663,   114,   134,  -663,   469,
    -663,   461,   -10,  -663,  -663,   499,  -663,  -663,  -663,  -663,
      38,   -18,    74,   -18,    40,   481,   201,  -663,  4141,  -663,
    -663,  -663,  -663,  -663,   146,   472,  -663,   146,   146,   146,
     146,   146,  -663,  -663,  -663,  -663,   475,  -663,   476,   478,
     300,  2443,   470,  -663,  -663,  -663,   473,   477,  -663,   483,
    -663,   480,   487,   241,   468,  2443,   142,   491,   482,   326,
    -663,   485,   488,   492,  -663,  -663,   422,  -663,  1938,  -663,
      29,  -663,  -663,  -663,  -663,    48,    56,    56,  -663,  -663,
    -663,   514,  -663,  -663,   326,  -663,  -663,  -663,  -663,   497,
     146,   300,  3246,  3943,  2411,  -663,    33,   146,  -663,   300,
    -663,   300,  -663,  -663,    81,  1938,   488,   300,   300,  -663,
    -663,  1432,  -663,  -663,  -663,  -663,  -663,   349,  -663,  -663,
     759,  -663,  -663,  -663,   501,   300,   498,  -663,   500,  1432,
    -663,   146,   495,   504,  -663,  -663,  -663,  -663,  -663,  -663,
    -663,   492,  -663,  4809,  4897,  -663,   502,  -663,  -663,   401,
    -663,  -663,   304,  -663,  -663,  -663,   305,   287,  -663,  -663,
    -663,  -663,  2443,  -663,  -663,  -663,  -663,  -663,   322,  -663,
    -663,  -663,   294,  -663,  -663,  -663,  -663,  -663,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,   332,  -663,   212,  -663,  -663,
    -663,  -663,  -663,   357,   321,  -663,  -663,  -663,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,  -663,    -6,     0,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,  -663,   503,  -663,  -663,  -663,
    -663,  -663,    98,  2069,  -663,   506,  1285,  -663,  -663,   326,
     146,  -663,  -663,  -663,  4713,  -663,   300,  3345,   146,  -663,
    -663,   490,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,  -663,  4713,  -663,  4479,  -663,
    -663,  -663,  4362,  -663,   507,   517,  4596,  -663,  -663,  -663,
    -663,  3943,  -663,  -663,   509,  3943
  };

  const unsigned short
  asn1_parser::yydefact_[] =
  {
       0,   500,     0,     2,     0,   147,     1,     3,   158,     0,
     144,   145,   146,     0,   162,   155,   498,     0,   150,   153,
     154,   152,   368,     0,   149,   157,     0,     0,     0,   164,
     148,   151,     0,     0,   377,   161,   159,   160,     0,     0,
       0,   378,   379,   375,     0,     0,   163,     0,   156,   377,
     374,   169,   376,   171,   143,   173,     0,   497,   499,     0,
     170,   181,   183,   184,   186,     0,   175,     0,   168,   167,
       0,     0,     4,     0,   174,   176,     0,   191,   193,   194,
      95,    96,    97,    98,   165,   187,   189,   190,   192,     0,
       0,   182,   185,   172,   177,     0,   188,    68,    11,   217,
     312,     0,   391,   284,     0,     0,   385,   387,   388,     0,
       0,   382,   228,   392,   393,   394,     0,   287,   395,   396,
       0,   234,     0,   373,   397,   304,   372,   380,     0,     0,
     399,   398,   383,   386,    10,   400,   247,   401,   402,   403,
       0,     0,   353,   497,     0,   112,    67,     0,    83,   233,
       0,     0,   216,   229,     0,   214,   197,   195,     0,   212,
     219,   230,   226,   237,   218,   236,   232,   240,   241,   242,
     243,   221,   215,   244,   347,     0,   235,   239,   231,   238,
     225,   227,   245,   222,   246,   223,   224,   220,   389,   390,
     213,   406,    84,     0,     0,     0,     0,   196,     0,   178,
     179,   305,   404,     0,   381,     0,     0,     0,   360,   311,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   497,    13,     6,     8,    12,    14,   209,     0,     7,
     499,   111,     0,   104,     0,   108,   107,   110,   184,     0,
     359,     0,     0,     0,     0,     0,     0,     0,   405,     0,
       0,   348,     0,     0,     0,     0,     0,     0,     0,   180,
       0,   344,     0,   340,   341,     0,   493,   303,     0,   296,
     300,   302,   501,   114,     8,     0,     0,   289,     0,   333,
     334,     0,   470,     0,   493,   313,   326,   329,     0,   315,
     324,   293,   294,   458,   452,   453,   454,   384,     0,   312,
       0,     0,     0,   286,     0,   460,   467,     0,     0,   285,
       0,     0,     0,   455,   130,     0,   417,   119,   120,   121,
     456,   199,   117,   471,   449,   457,   451,   493,   416,   418,
     419,   422,     0,   424,     0,   427,     0,   430,   438,   440,
     441,     0,   442,     0,   462,   444,   445,   443,   446,   447,
     448,   198,     0,     0,     0,   337,   338,   335,     0,     0,
       0,     0,     0,   103,     0,     0,   352,   357,   358,   356,
       0,    24,    25,    26,    93,    86,   102,    99,     0,   113,
     261,   253,   254,   255,   266,   267,   251,   272,     0,   276,
     270,   273,     0,   259,   497,   499,   206,   233,   257,     0,
     202,   204,   205,     0,   271,   269,   249,   260,   250,   252,
     198,     0,     0,   211,   350,   349,    94,   207,   346,    69,
      85,     0,   251,   276,   275,   499,   262,   274,   210,     0,
       0,   369,   370,     0,   363,   365,   366,   367,   368,     0,
     307,     0,   339,     0,   248,     0,   299,   295,     0,     0,
       0,   288,     0,     0,   322,     0,   327,     0,   330,   314,
       0,     0,   423,     0,   140,     0,   472,   490,   491,     0,
     476,    90,     0,    88,     0,     0,     0,     0,     0,   435,
     434,     0,   437,   436,     0,   431,   459,     0,   463,     0,
     409,   413,   410,   414,   336,   407,   411,   408,   412,    29,
       0,     0,     0,    16,    18,    33,    19,    20,    21,    22,
      23,   501,     9,   105,   106,   354,   355,     0,     0,   101,
     256,   282,     0,     0,   200,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   100,     0,     0,   370,     0,   361,
     364,     0,   306,     0,     0,   342,   345,   495,     0,   494,
     492,   493,   301,     0,     0,   290,   332,     0,   450,   455,
     328,   331,   493,   325,   433,   129,     0,   141,   475,   473,
       0,   474,     0,    87,     0,   439,     0,     0,   132,     0,
     415,   420,   425,   428,   469,     0,   468,   461,   464,   208,
      49,    36,    36,    36,    53,    55,     0,    30,     0,    31,
      28,   351,    27,   268,   283,     0,   203,   277,   263,   279,
     278,   280,   264,   265,   281,   362,     0,   308,     0,     0,
       0,     0,   297,   292,   291,   323,   320,   316,   128,   111,
     125,     0,     0,   110,     0,     0,     0,     0,   480,   485,
      91,    89,   137,   134,   138,   131,     0,   201,     0,   465,
       0,    47,    46,    34,    35,    45,    40,    40,    52,    51,
      50,     0,    15,    17,    32,   258,   371,   309,   310,   343,
     496,     0,     0,     0,     0,   122,     0,   142,   477,     0,
     479,     0,   484,   482,   489,     0,   137,     0,     0,   133,
     421,     0,    70,    48,    71,    72,    73,     0,    43,    42,
       0,    38,    41,    37,     0,     0,   298,   321,   317,     0,
     124,   123,   497,     0,   481,   487,   488,   486,   483,    92,
     136,   135,   139,    24,    25,   503,   504,   505,   506,   251,
     508,   509,   510,   391,   284,   272,   514,   515,   516,   517,
     518,   519,   520,   385,   387,   523,   524,   388,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   382,   286,   537,
     538,   539,   540,   541,   542,   543,   544,   276,   546,   547,
     548,   549,   550,   551,   552,   553,   373,   270,   556,   557,
     558,   559,   560,   304,   372,   380,   564,   565,   566,   567,
     568,   569,   570,   383,   386,   285,   574,   575,   576,   577,
     273,    66,   275,     0,    79,     0,     0,    77,    80,    81,
      82,    65,    44,    39,    64,    54,     0,     0,    82,   478,
      75,     0,    76,    78,   504,   507,   510,   511,   512,   513,
     514,   515,   520,   521,   522,   525,   526,   530,   535,   536,
     543,   545,   551,   552,   554,   555,   561,   562,   563,   564,
     565,   571,   572,   573,   574,   578,    64,   502,    64,    56,
      59,    58,     0,    62,   318,     0,    64,     5,    57,    61,
      63,     0,    74,    60,   319,     0
  };

  const short
  asn1_parser::yypgoto_[] =
  {
    -663,   644,  -663,  -663,  -136,  -663,  -129,  -663,   407,  -663,
    -663,    57,  -476,    86,  -663,  -663,  -663,  -192,  -663,    -3,
    -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -205,  -563,
    -663,  -663,  -663,  -662,  -457,  -663,   -22,  -663,  -663,  -663,
    -663,  -663,  -150,  -146,   102,  -663,  -663,   419,  -663,   505,
    -663,  -663,  -663,  -663,  -663,   578,  -663,   312,  -663,   104,
    -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,
      28,   -13,    -4,  -663,  -663,  -663,  -663,  -663,  -663,   659,
    -663,   648,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,
    -663,  -663,   607,  -663,   629,   615,  -120,   601,  -663,  -663,
     -72,  -663,  -663,  -414,  -663,  -663,  -663,  -663,  -663,  -663,
     374,  -663,  -188,  -229,  -253,  -663,  -663,     3,  -663,  -663,
    -169,  -663,  -663,  -187,  -155,  -663,  -663,    16,  -432,  -663,
    -663,  -663,   145,  -663,  -663,  -663,   474,  -543,  -442,  -663,
    -663,  -663,  -663,  -663,  -663,    77,  -663,  -663,  -663,  -663,
    -663,  -663,  -663,  -663,  -663,   -95,  -663,    71,   151,  -663,
    -663,  -663,   682,  -663,   645,   654,  -663,  -663,  -663,  -663,
     420,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,  -663,
    -127,  -663,  -663,  -280,  -292,  -663,  -663,   218,  -663,   220,
    -663,   369,  -663,  -663,   247,  -663,  -430,  -663,  -663,  -663,
    -663,  -663,  -663,   121,  -121,  -663,  -663,  -663,  -663,  -663,
    -338,  -663,  -663,  -663,  -663,  -663,  -663,  -258,  -663,   325,
      -9,   530,    10,  -356,  -663
  };

  const short
  asn1_parser::yydefgoto_[] =
  {
      -1,     2,     3,   815,   396,   223,   144,    77,   225,   226,
     502,   503,   373,   416,   504,   505,   600,   655,   506,   702,
     507,   508,   699,   509,   652,   510,   660,   662,   858,   859,
     860,   861,   862,   863,   145,   146,   693,   694,   695,   805,
     696,   806,   807,   808,   147,   148,    78,   314,   472,   149,
      79,    80,    81,    82,    83,   150,   232,   233,   234,   235,
     151,   152,   153,   154,   315,   316,   317,   632,   318,   577,
     578,   687,   643,   319,    65,     4,    10,    11,    12,    17,
      18,    19,    20,    14,    29,    39,    54,    55,    59,    67,
      73,    74,    75,   199,    76,    61,    62,    84,    85,   155,
     398,   156,   321,   399,   400,   157,   322,    86,    87,    88,
     323,   159,   287,   427,   403,   404,   405,   413,   522,   160,
     406,   161,   276,   267,   407,   162,   268,   269,   270,   163,
     164,   439,   440,   165,   166,   167,   288,   289,   290,   168,
     169,   170,   171,   262,   263,   264,   172,   173,   174,   175,
     240,   517,   370,   176,   259,   433,   434,   435,   436,   437,
     177,   178,   408,    34,    45,    43,   179,   180,   181,   182,
     409,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     248,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   462,   481,   484,   337,   338,   339,   340,   341,   342,
     343,   587,   344,   588,   345,   346,   347,   348,   569,   571,
     637,   638,   683,   684,   718,   349,   350,   446,   550,   197,
     193,   410,   198,   229,   811
  };

  const short
  asn1_parser::yytable_[] =
  {
      22,   214,   218,   428,   222,   231,   512,   215,   219,    22,
       5,   224,   224,     5,   626,   261,   552,   402,   563,   473,
     277,   236,   280,    15,   592,   560,   454,   561,   356,   804,
      56,   419,   474,   419,   291,   292,   293,   294,   431,   295,
     419,   296,   602,   515,   324,   291,   292,   804,   419,    95,
     297,    97,   455,   367,   467,   419,   597,   586,   325,   431,
     371,   372,   579,     1,   558,   618,   566,  -429,  -426,   477,
     273,   653,   266,    98,   457,   545,   551,   274,   482,   479,
      21,   210,   598,    71,   282,  -196,     8,   216,   650,    21,
     658,   456,  -498,   303,   512,   654,   211,   252,   697,   194,
      16,  -426,   211,    16,    16,   200,   700,   222,   213,   584,
     715,   606,   480,   458,   224,   368,  -450,   224,   212,  -116,
     213,   599,    70,  -450,   217,   519,   213,   651,   213,   659,
     708,   213,   533,   252,   369,   520,  -429,   698,   213,   521,
     309,   320,   324,   324,   804,   701,   621,   483,    57,    58,
     228,   228,   363,   691,   134,   586,   325,   325,   511,    58,
     585,    58,    25,   653,   364,   491,   493,    57,   534,    16,
     716,   496,   498,     6,   717,   511,   512,   466,     1,   559,
      58,   636,   712,     1,   230,    57,   432,   654,     1,    58,
       1,    58,   272,   692,   265,  -466,   271,    26,   278,     9,
     870,   281,  -466,   281,     1,    58,    23,   281,   281,    16,
       1,    58,   567,  -498,  -498,   803,   275,   692,  -498,   451,
    -497,    27,  -497,   352,  -497,   499,   500,  -118,   231,   501,
     563,   452,    28,   803,  -497,   224,  -497,  -498,  -498,   320,
     320,   531,   542,   324,   236,   514,  -116,   402,  -196,   438,
     595,   441,   642,   228,   543,   546,   411,   325,    13,   645,
     252,    30,   596,  -196,    16,   555,   430,   678,   430,   604,
     813,   646,    33,   607,   608,   609,   610,   611,  -166,   679,
     640,  -275,    53,   526,    32,  -275,   324,   527,   324,  -275,
     549,   528,   324,   622,   554,   868,   402,   523,   516,    35,
     325,  -498,   325,   868,   627,   247,   325,    38,   256,   378,
     213,   421,   324,   213,   213,   324,   213,   430,   324,  -274,
     512,   352,   352,  -274,    41,    42,   325,   374,   874,   325,
      36,   379,   325,   207,  -287,  -287,   207,   538,  -287,   540,
     320,   713,   568,   714,   281,   281,    37,   224,    57,    58,
     281,   281,   371,   372,   469,   470,   690,   612,   613,    15,
     537,    44,   537,   590,    46,   594,  -126,   213,   670,    47,
     224,    48,   274,   547,   228,   563,    50,   553,    63,    51,
     430,    66,   677,   320,   552,   320,   869,    68,   430,   320,
      70,    63,    89,   719,    69,    63,   224,    71,   430,    63,
     656,   657,   430,   324,    72,    92,    93,   201,   202,   320,
      89,   203,   320,   204,   192,   320,   324,   325,   205,   206,
     207,   711,   352,   438,   209,   438,   208,   239,   241,   629,
     325,   430,   261,   563,   265,   242,   224,   245,   810,   271,
     246,  -115,   430,   278,   430,   253,   254,   258,   260,   257,
      16,   281,   213,   353,   354,   352,   818,   359,   360,   430,
     361,   365,   311,   158,   196,   430,   238,   430,   362,   537,
    -109,   352,   619,   412,   419,   430,   366,   442,   443,   324,
     449,   447,   445,   448,   453,  -500,   411,   459,   460,   520,
     461,   352,   468,   325,   352,   463,   450,   430,   465,   475,
     320,   476,   478,   291,   292,   293,   294,  -432,   295,   228,
     296,   275,   682,   320,   227,   237,   324,   546,   487,   297,
     488,   489,  -118,   518,   244,   494,  -262,  -312,   524,   525,
     325,   324,   430,   558,   441,   411,   430,   430,   430,   430,
     430,   529,   523,   532,   530,   325,   535,   536,   281,   251,
     810,   430,   539,   810,   430,   541,   544,   565,   557,   511,
     570,   639,   303,   572,   573,   574,   576,   644,   575,   255,
     580,   601,   581,   605,    58,   634,   320,   417,   584,   420,
     623,   429,   352,    64,   279,   614,   286,   615,   620,   635,
     355,   286,   624,   641,   647,   430,    64,    90,   648,   665,
      64,   661,   666,   667,    64,   668,   676,   671,  -127,   309,
     672,   265,   675,   320,   673,    90,   680,   377,   704,   681,
     401,   674,   685,   414,   415,   814,   686,   418,   320,   819,
     688,   430,   429,   326,   705,   816,  -501,   817,   865,   444,
     -11,   -10,   872,   821,   871,   430,   875,     7,   559,    58,
     376,   866,   710,   663,   703,   444,   823,   820,   352,   214,
     218,   375,   271,   281,   281,   215,   219,   630,   195,   631,
     639,    64,   639,   720,   689,   464,   513,    31,   644,   722,
      40,    94,    60,   721,   352,    91,    96,   706,   617,   238,
      63,   358,   616,    24,    52,   352,   265,   669,    49,   582,
     812,   352,     0,   429,   583,   485,   649,     0,   564,     0,
     430,     0,     0,   429,     0,   486,     0,   429,     0,   352,
       0,     0,     0,     0,     0,     0,     0,   490,   492,     0,
       0,   326,   326,   495,   497,     0,     0,     0,   237,     0,
       0,     0,     0,   351,     0,     0,   429,     0,     0,     0,
       0,   397,   430,     0,     0,     0,     0,     0,     0,     0,
       0,   426,     0,   291,   292,   293,   294,     0,   295,     0,
     296,     0,     0,     0,     0,     0,     0,     0,     0,   297,
       0,     0,     0,     0,     0,     0,     0,     0,   351,     0,
     429,     0,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   271,   281,     0,
       0,     0,   426,   352,     0,     0,   352,     0,     0,   548,
       0,     0,   303,     0,     0,     0,     0,   556,     0,     0,
       0,     0,   326,     0,   286,     0,     0,     0,     0,     0,
       0,   351,   351,     0,     0,     0,     0,   429,     0,     0,
     401,   429,   429,   429,   429,   429,     0,     0,     0,     0,
       0,     0,   281,     0,     0,     0,   281,     0,     0,   309,
       0,     0,     0,   591,   593,   326,     0,   326,     0,     0,
       0,   326,     0,   426,     0,     0,     0,     0,     0,     0,
     192,     0,     0,   426,    64,    64,     0,   426,     0,   401,
     351,   326,     0,     0,   326,     0,     0,   326,   559,    58,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   426,     0,     0,     0,
       0,   286,     0,     0,     0,     0,     0,     0,     0,   633,
       0,     0,   351,     0,     0,     0,   429,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     429,     0,   351,     0,   351,     0,     0,     0,     0,     0,
     426,     0,   664,     0,     0,   351,     0,     0,     0,   351,
       0,   397,     0,     0,     0,   351,     0,   351,     0,     0,
       0,   351,   326,     0,     0,     0,     0,     0,     0,   429,
       0,   420,     0,     0,     0,   326,     0,     0,     0,     0,
       0,   351,     0,     0,   351,     0,     0,   351,     0,   589,
       0,     0,     0,     0,     0,     0,     0,   426,     0,     0,
     397,   426,   426,   426,   426,   426,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   286,   286,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   589,     0,     0,   809,   589,   429,   326,     0,
       0,   351,     0,     0,   351,     0,     0,     0,     0,     0,
       0,     0,     0,   809,     0,     0,     0,   291,   292,   380,
     381,     0,   382,     0,   383,     0,     0,     0,     0,     0,
       0,     0,   351,   297,     0,   326,     0,   384,   385,     0,
       0,     0,     0,    98,     0,   351,     0,   422,     0,     0,
     326,     0,     0,   387,     0,     0,   426,     0,     0,     0,
     388,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     426,     0,     0,     0,     0,     0,   303,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   423,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,   809,   351,   426,
     809,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   286,     0,   309,   134,     0,   397,     0,     0,     0,
       0,     0,     0,   391,     0,     0,     0,   392,   603,     0,
       0,     0,     0,     0,   397,   351,    23,     0,     0,     0,
       0,     0,     0,     0,   393,     0,     0,     0,     0,     0,
     351,     0,   424,   425,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   286,     0,   426,     0,   286,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   291,
     292,   380,   381,     0,   382,     0,   383,     0,     0,     0,
       0,     0,     0,     0,     0,   297,     0,    97,   397,   384,
     385,   397,     0,     0,   725,   726,   727,    99,   728,   729,
     730,   731,   732,   733,   734,   735,   736,   737,   738,   739,
     740,   741,   742,   743,   744,   745,   746,   747,   748,   749,
     750,   751,   752,   753,   754,   755,   756,   757,   758,   759,
     112,   113,   114,   115,   760,   761,   762,   763,   764,   765,
     766,   767,   768,   118,   769,   770,   771,   772,   119,   773,
     121,   774,   775,   776,   777,   778,   779,   780,   781,   124,
     782,   783,   784,   785,   786,   787,   788,   789,   790,   791,
     130,   792,   131,   793,   794,   795,   796,   797,   798,   799,
     135,   136,   137,   138,   139,   800,     0,     0,     0,   392,
     822,     0,     0,   142,     0,     0,     0,     0,    23,     0,
       0,     0,   801,     0,     0,     0,   393,     0,     0,     0,
       0,     0,     0,     0,   802,   395,   291,   292,   380,   381,
       0,   382,     0,   383,     0,     0,     0,     0,     0,     0,
       0,     0,   297,     0,    97,     0,   723,   724,     0,     0,
       0,   725,   726,   727,    99,   728,   729,   730,   731,   732,
     733,   734,   735,   736,   737,   738,   739,   740,   741,   742,
     743,   744,   745,   746,   747,   748,   749,   750,   751,   752,
     753,   754,   755,   756,   757,   758,   759,   112,   113,   114,
     115,   760,   761,   762,   763,   764,   765,   766,   767,   768,
     118,   769,   770,   771,   772,   119,   773,   121,   774,   775,
     776,   777,   778,   779,   780,   781,   124,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   130,   792,   131,
     793,   794,   795,   796,   797,   798,   799,   135,   136,   137,
     138,   139,   800,     0,     0,     0,   392,     0,     0,     0,
     142,   291,   292,   293,   294,    23,   295,     0,   296,   801,
       0,     0,     0,   393,     0,     0,     0,   297,     0,    97,
       0,   802,   395,     0,     0,     0,     0,    98,   298,    99,
       0,   299,     0,     0,   101,   102,   103,     0,   104,   105,
       0,     0,     0,   300,   301,   106,   107,     0,     0,   108,
     109,   302,     0,     0,   110,     0,     0,     0,     0,   111,
     303,   304,   112,   113,   114,   115,     0,     0,     0,     0,
     305,   116,     0,   117,     0,   118,     0,   306,     0,     0,
     119,   120,   121,   122,     0,   123,     0,   307,     0,     0,
       0,   124,     0,   125,   126,   127,   128,   129,   308,   211,
       0,     0,   130,     0,   131,   132,   133,   309,   134,     0,
       0,     0,   135,   136,   137,   138,   139,   310,     0,     0,
       0,   311,     0,   312,     0,   142,   291,   292,   293,   294,
       0,   295,     0,   296,     0,     0,     0,     0,     0,     0,
       0,     0,   297,     0,    97,     0,   313,   230,     0,     0,
       0,     0,    98,   298,    99,     0,   299,     0,     0,   101,
     102,   103,     0,   104,   105,     0,     0,     0,     0,     0,
     106,   107,     0,     0,   108,   109,     0,     0,     0,   110,
       0,     0,     0,     0,   111,   303,   304,   112,   113,   114,
     115,     0,     0,     0,     0,   305,   116,     0,   117,     0,
     118,     0,   306,     0,     0,   119,   120,   121,   122,     0,
     123,     0,   307,     0,     0,     0,   124,     0,   125,   126,
     127,   128,   129,   308,   211,     0,     0,   130,     0,   131,
     132,   133,   309,   134,     0,     0,     0,   135,   136,   137,
     138,   139,   310,     0,   471,     0,     0,     0,   312,     0,
     142,     0,     0,     0,     0,     0,     0,   291,   292,   380,
     381,     0,   382,     0,   383,     0,     0,     0,     0,     0,
       0,   313,   230,   297,     0,    97,     0,   384,   385,     0,
       0,     0,     0,    98,     0,    99,     0,   386,     0,     0,
     101,   102,   103,   387,   104,   105,     0,     0,     0,     0,
     388,   106,   107,     0,     0,   108,   109,     0,     0,     0,
     110,     0,     0,     0,     0,   111,   303,     0,   112,   113,
     114,   115,     0,     0,     0,     0,     0,   116,     0,   389,
       0,   118,     0,     0,     0,     0,   119,   120,   121,   122,
       0,   123,   390,     0,     0,     0,     0,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,     0,   130,     0,
     131,   132,   133,   309,   134,     0,     0,     0,   135,   136,
     137,   138,   139,   391,     0,     0,     0,   392,     0,     0,
       0,   142,   291,   292,   293,   294,    23,   295,     0,   296,
       0,     0,     0,     0,   393,     0,     0,     0,   297,     0,
      97,     0,   394,   395,     0,     0,     0,     0,    98,   298,
      99,     0,   299,     0,     0,   101,   102,   103,     0,   104,
     105,     0,     0,     0,     0,     0,   106,   107,     0,     0,
     108,   109,     0,     0,     0,   110,     0,     0,     0,     0,
     111,   303,   304,   112,   113,   114,   115,     0,     0,     0,
       0,   305,   116,     0,   117,     0,   118,     0,   306,     0,
       0,   119,   120,   121,   122,     0,   123,     0,   307,     0,
       0,     0,   124,     0,   125,   126,   127,   128,   129,   308,
     211,     0,     0,   130,     0,   131,   132,   133,   309,   134,
       0,     0,     0,   135,   136,   137,   138,   139,   310,     0,
       0,     0,     0,     0,   312,     0,   142,     0,     0,     0,
       0,     0,     0,   291,   292,   380,   381,     0,   382,     0,
     383,     0,     0,     0,     0,     0,     0,   313,   230,   297,
       0,    97,     0,   384,   385,     0,     0,     0,     0,    98,
       0,    99,     0,   386,     0,     0,   101,   102,   103,   387,
     104,   105,     0,     0,     0,     0,   388,   106,   107,     0,
       0,   108,   109,     0,     0,     0,   110,     0,     0,     0,
       0,   111,   303,     0,   112,   113,   114,   115,     0,     0,
       0,     0,     0,   116,     0,   389,     0,   118,     0,     0,
       0,     0,   119,   120,   121,   122,     0,   123,   390,     0,
       0,     0,     0,   124,     0,   125,   126,   127,   128,   129,
       0,     0,     0,     0,   130,     0,   131,   132,   133,   309,
     134,     0,     0,     0,   135,   136,   137,   138,   139,   391,
       0,     0,     0,   392,     0,     0,     0,   142,   291,   292,
     293,   294,    23,   295,     0,   296,     0,     0,     0,     0,
     393,     0,     0,     0,   297,     0,    97,     0,   424,   395,
       0,     0,     0,     0,    98,     0,    99,     0,   299,     0,
       0,   101,   102,   103,     0,   104,   105,     0,     0,     0,
       0,     0,   106,   107,     0,     0,   108,   109,     0,     0,
       0,   110,     0,     0,     0,     0,   111,   303,   304,   112,
     113,   114,   115,     0,     0,     0,     0,   305,   116,     0,
     117,     0,   118,     0,   306,     0,     0,   119,   120,   121,
     122,     0,   123,     0,   307,     0,     0,     0,   124,     0,
     125,   126,   127,   128,   129,   308,   211,   291,   292,   130,
       0,   131,   132,   133,   309,   134,     0,     0,     0,   135,
     136,   137,   138,   139,   310,    97,     0,     0,     0,     0,
     312,     0,   142,    98,     0,    99,     0,   100,     0,     0,
     101,   102,   103,     0,   104,   105,     0,     0,     0,     0,
       0,   106,   107,   313,   230,   108,   109,     0,     0,     0,
     110,     0,     0,     0,     0,   111,     0,     0,   112,   113,
     114,   115,     0,     0,     0,     0,     0,   116,     0,   117,
       0,   118,     0,     0,     0,     0,   119,   120,   121,   122,
       0,   123,     0,     0,     0,     0,     0,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,     0,   130,     0,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,   138,   139,     0,     0,   291,   292,   380,   381,     0,
     382,   142,   383,     0,     0,     0,     0,     0,     0,     0,
       0,   297,     0,    97,     0,   384,   385,     0,     0,     0,
       0,    98,   143,   230,     0,   422,     0,   291,   292,   380,
     381,   387,   382,     0,   383,     0,     0,     0,   388,     0,
       0,     0,     0,   297,     0,     0,     0,   384,   385,     0,
       0,     0,     0,    98,   303,     0,     0,   422,     0,     0,
       0,     0,     0,   387,     0,     0,     0,   423,     0,     0,
     388,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,     0,   303,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   423,
       0,   309,   134,     0,     0,     0,     0,     0,     0,     0,
       0,   391,   390,     0,     0,   709,     0,     0,     0,     0,
       0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
       0,     0,   393,   309,   134,     0,     0,     0,     0,     0,
     424,   425,     0,   391,     0,     0,     0,   392,     0,     0,
       0,    97,     0,     0,     0,     0,    23,     0,     0,    98,
       0,    99,     0,   100,   393,     0,   101,   102,   103,     0,
     104,   105,   424,   425,   283,     0,     0,   106,   107,     0,
       0,   108,   109,     0,     0,     0,   110,     0,     0,     0,
       0,   111,     0,     0,   112,   113,   114,   115,     0,     0,
       0,     0,     0,   116,     0,   117,     0,   118,     0,     0,
       0,     0,   119,   120,   121,   122,     0,   123,     0,     0,
       0,     0,     0,   124,     0,   125,   126,   127,   128,   129,
       0,     0,     0,     0,   130,     0,   131,   132,   133,     0,
     134,     0,     0,     0,   135,   136,   137,   138,   139,     0,
      97,   284,     0,     0,   285,     0,     0,   142,    98,     0,
      99,     0,   100,     0,     0,   101,   102,   103,     0,   104,
     105,     0,     0,   283,     0,     0,   106,   107,   143,    16,
     108,   109,     0,     0,     0,   110,     0,     0,     0,     0,
     111,     0,     0,   112,   113,   114,   115,     0,     0,     0,
       0,     0,   116,     0,   117,     0,   118,     0,     0,     0,
       0,   119,   120,   121,   122,     0,   123,     0,     0,     0,
       0,     0,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,     0,   130,     0,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,   138,   139,     0,    97,
     284,     0,     0,   357,     0,     0,   142,    98,     0,    99,
       0,   100,     0,     0,   101,   102,   103,     0,   104,   105,
       0,     0,     0,     0,     0,   106,   107,   143,    16,   108,
     109,     0,     0,     0,   110,     0,     0,     0,     0,   111,
       0,     0,   112,   113,   114,   115,     0,     0,     0,     0,
       0,   116,     0,   117,     0,   118,     0,     0,     0,     0,
     119,   120,   121,   122,     0,   123,     0,     0,     0,     0,
       0,   124,     0,   125,   126,   127,   128,   129,     0,     0,
       0,     0,   130,     0,   131,   132,   133,     0,   134,     0,
       0,     0,   135,   136,   137,   138,   139,     0,   140,     0,
       0,   141,    97,     0,     0,   142,     0,     0,     0,     0,
      98,     0,    99,     0,   100,     0,     0,   101,   102,   103,
       0,   104,   105,     0,     0,     0,   143,    16,   106,   107,
       0,     0,   108,   109,     0,     0,     0,   110,     0,   249,
       0,     0,   111,     0,     0,   112,   113,   114,   115,     0,
     250,     0,     0,     0,   116,     0,   117,     0,   118,     0,
       0,     0,     0,   119,   120,   121,   122,     0,   123,     0,
       0,     0,     0,     0,   124,     0,   125,   126,   127,   128,
     129,     0,     0,     0,     0,   130,     0,   131,   132,   133,
       0,   134,     0,     0,     0,   135,   136,   137,   138,   139,
       0,    97,     0,     0,     0,     0,     0,     0,   142,    98,
       0,    99,     0,   100,     0,     0,   101,   102,   103,     0,
     104,   105,     0,     0,   283,     0,     0,   106,   107,   143,
      16,   108,   109,     0,     0,     0,   110,     0,     0,     0,
       0,   111,     0,     0,   112,   113,   114,   115,     0,     0,
       0,     0,     0,   116,     0,   117,     0,   118,     0,     0,
       0,     0,   119,   120,   121,   122,     0,   123,     0,     0,
       0,     0,     0,   124,     0,   125,   126,   127,   128,   129,
       0,     0,     0,     0,   130,     0,   131,   132,   133,     0,
     134,     0,     0,     0,   135,   136,   137,   138,   139,     0,
      97,   562,   371,   372,     0,     0,     0,   142,    98,     0,
      99,     0,   100,     0,     0,   101,   102,   103,     0,   104,
     105,     0,     0,     0,     0,     0,   106,   107,   143,    16,
     108,   109,     0,     0,     0,   110,     0,     0,     0,     0,
     111,     0,     0,   112,   113,   114,   115,     0,     0,     0,
       0,     0,   116,     0,   117,     0,   118,     0,     0,     0,
       0,   119,   120,   121,   122,     0,   123,     0,     0,     0,
       0,     0,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,     0,   130,     0,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,   138,   139,     0,    97,
       0,     0,     0,     0,     0,     0,   142,    98,     0,    99,
       0,   100,     0,     0,   101,   102,   103,     0,   104,   105,
       0,     0,   283,     0,     0,   106,   107,   143,    16,   108,
     109,     0,     0,     0,   110,     0,     0,     0,     0,   111,
       0,     0,   112,   113,   114,   115,     0,     0,     0,     0,
       0,   116,     0,   117,     0,   118,     0,     0,     0,     0,
     119,   120,   121,   122,     0,   123,     0,     0,     0,     0,
       0,   124,     0,   125,   126,   127,   128,   129,     0,     0,
       0,     0,   130,     0,   131,   132,   133,     0,   134,     0,
       0,     0,   135,   136,   137,   138,   139,     0,    97,   625,
       0,     0,     0,     0,     0,   142,    98,     0,    99,     0,
     100,     0,     0,   101,   102,   103,     0,   104,   105,     0,
       0,   283,     0,     0,   106,   107,   143,    16,   108,   109,
       0,     0,     0,   110,     0,     0,     0,     0,   111,     0,
       0,   112,   113,   114,   115,     0,     0,     0,     0,     0,
     116,     0,   117,     0,   118,     0,     0,     0,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,     0,
     124,     0,   125,   126,   127,   128,   129,     0,     0,     0,
       0,   130,     0,   131,   132,   133,     0,   134,     0,     0,
       0,   135,   136,   137,   138,   139,     0,    97,   707,     0,
       0,     0,     0,     0,   142,    98,     0,    99,     0,   100,
       0,     0,   101,   102,   103,     0,   104,   105,     0,     0,
     283,     0,     0,   106,   107,   143,    16,   108,   109,     0,
       0,     0,   110,     0,     0,     0,     0,   111,     0,     0,
     112,   113,   114,   115,     0,     0,     0,     0,     0,   116,
       0,   117,     0,   118,     0,     0,     0,     0,   119,   120,
     121,   122,     0,   123,     0,     0,     0,     0,     0,   124,
       0,   125,   126,   127,   128,   129,     0,     0,     0,     0,
     130,     0,   131,   132,   133,     0,   134,     0,     0,     0,
     135,   136,   137,   138,   139,     0,    97,   864,     0,     0,
       0,     0,     0,   142,    98,     0,    99,     0,   100,     0,
       0,   101,   102,   103,     0,   104,   105,     0,     0,     0,
       0,     0,   106,   107,   143,    16,   108,   109,     0,     0,
       0,   110,     0,     0,     0,     0,   111,     0,     0,   112,
     113,   114,   115,     0,     0,     0,     0,     0,   116,     0,
     117,     0,   118,     0,     0,     0,     0,   119,   120,   121,
     122,     0,   123,     0,     0,     0,     0,     0,   124,     0,
     125,   126,   127,   128,   129,     0,     0,     0,     0,   130,
       0,   131,   132,   133,     0,   134,     0,     0,     0,   135,
     136,   137,   138,   139,     0,    97,     0,     0,   141,     0,
       0,     0,   142,    98,     0,    99,     0,   100,     0,     0,
     101,   102,   103,     0,   104,   105,   220,     0,     0,     0,
       0,   106,   107,   143,    16,   108,   109,     0,     0,     0,
     110,     0,     0,     0,     0,   111,     0,     0,   112,   113,
     114,   115,     0,     0,     0,     0,     0,   116,     0,   117,
       0,   118,     0,     0,     0,     0,   119,   120,   121,   122,
       0,   123,     0,     0,     0,     0,     0,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,     0,   130,     0,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,   138,   139,     0,    97,     0,     0,     0,     0,     0,
       0,   142,    98,     0,    99,     0,   100,     0,     0,   101,
     102,   103,     0,   104,   105,     0,     0,     0,     0,     0,
     106,   107,   221,    16,   108,   109,     0,     0,     0,   110,
       0,     0,     0,     0,   111,     0,     0,   112,   113,   114,
     115,     0,     0,     0,     0,     0,   116,     0,   117,     0,
     118,     0,     0,     0,     0,   119,   120,   121,   122,     0,
     123,     0,     0,     0,     0,     0,   124,     0,   125,   126,
     127,   128,   129,     0,     0,     0,     0,   130,     0,   131,
     132,   133,     0,   134,     0,     0,     0,   135,   136,   137,
     138,   139,     0,   243,     0,     0,     0,    97,     0,     0,
     142,     0,     0,     0,     0,    98,     0,    99,     0,   100,
       0,     0,   101,   102,   103,     0,   104,   105,     0,     0,
       0,   143,    16,   106,   107,     0,     0,   108,   109,     0,
       0,     0,   110,     0,     0,     0,     0,   111,     0,     0,
     112,   113,   114,   115,     0,     0,     0,     0,     0,   116,
       0,   117,     0,   118,     0,     0,     0,     0,   119,   120,
     121,   122,     0,   123,     0,     0,     0,     0,     0,   124,
       0,   125,   126,   127,   128,   129,     0,     0,     0,     0,
     130,     0,   131,   132,   133,     0,   134,     0,     0,     0,
     135,   136,   137,   138,   139,     0,    97,     0,     0,     0,
       0,     0,     0,   142,    98,   253,    99,     0,   100,     0,
       0,   101,   102,   103,     0,   104,   105,     0,     0,     0,
       0,     0,   106,   107,   143,    16,   108,   109,     0,     0,
       0,   110,     0,     0,     0,     0,   111,     0,     0,   112,
     113,   114,   115,     0,     0,     0,     0,     0,   116,     0,
     117,     0,   118,     0,     0,     0,     0,   119,   120,   121,
     122,     0,   123,     0,     0,     0,     0,     0,   124,     0,
     125,   126,   127,   128,   129,     0,     0,     0,     0,   130,
       0,   131,   132,   133,     0,   134,     0,     0,     0,   135,
     136,   137,   138,   139,     0,    97,   628,     0,     0,     0,
       0,     0,   142,    98,     0,    99,     0,   100,     0,     0,
     101,   102,   103,     0,   104,   105,     0,     0,   283,     0,
       0,   106,   107,   221,    16,   108,   109,     0,     0,     0,
     110,     0,     0,     0,     0,   111,     0,     0,   112,   113,
     114,   115,     0,     0,     0,     0,     0,   116,     0,   117,
       0,   118,     0,     0,     0,     0,   119,   120,   121,   122,
       0,   123,     0,     0,     0,     0,     0,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,     0,   130,     0,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,   138,   139,     0,    97,     0,     0,     0,     0,     0,
       0,   142,    98,     0,    99,     0,   100,     0,     0,   101,
     102,   103,     0,   104,   105,     0,     0,     0,     0,     0,
     106,   107,   143,    16,   108,   109,     0,     0,     0,   110,
       0,     0,     0,     0,   111,     0,     0,   112,   113,   114,
     115,     0,     0,     0,     0,     0,   116,     0,   117,     0,
     118,     0,     0,     0,     0,   119,   120,   121,   122,     0,
     123,     0,     0,     0,     0,     0,   124,     0,   125,   126,
     127,   128,   129,     0,     0,     0,     0,   130,     0,   131,
     132,   133,     0,   134,     0,     0,     0,   135,   136,   137,
     138,   139,     0,    97,     0,     0,     0,     0,     0,     0,
     142,    98,     0,    99,     0,   100,     0,     0,   101,   102,
     103,     0,   104,   105,     0,     0,     0,     0,     0,   106,
     107,   221,   230,   108,   109,     0,     0,     0,   110,     0,
       0,     0,     0,   111,     0,     0,   112,   113,   114,   115,
       0,     0,     0,     0,     0,   116,     0,   117,     0,   118,
       0,     0,     0,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,     0,   124,     0,   125,   126,   127,
     128,   129,     0,     0,     0,     0,   130,     0,   131,   132,
     133,     0,   134,     0,     0,     0,   135,   136,   137,   138,
     139,     0,    97,     0,     0,     0,     0,     0,     0,   142,
      98,     0,    99,     0,   100,     0,     0,   101,   102,   103,
       0,   104,   105,     0,     0,     0,     0,     0,   106,   107,
     143,    16,   108,   109,     0,     0,     0,   110,     0,     0,
       0,     0,   111,     0,     0,   112,   113,   114,   115,     0,
       0,     0,     0,     0,   116,     0,   117,     0,   118,     0,
       0,     0,     0,   119,   120,   121,   122,     0,   123,     0,
       0,     0,     0,     0,   124,     0,   125,   126,   127,   128,
     129,     0,     0,     0,     0,   130,     0,   131,   132,   133,
       0,   134,     0,     0,     0,   135,   136,   137,   138,   139,
       0,     0,     0,     0,     0,     0,     0,     0,   142,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   371,   372,     0,   221,
      16,   725,   824,   727,     0,   728,   825,   730,   731,   826,
     827,   828,   829,   830,   831,   738,   739,   740,   741,   832,
     833,   834,   745,   746,   835,   836,   749,   750,   751,   837,
     753,   754,   755,   756,   838,   839,   759,     0,     0,     0,
       0,   760,   761,   762,   763,   764,   840,   766,   841,   768,
       0,   769,   770,   771,   772,     0,   842,     0,   843,   775,
     844,   845,   778,   779,   780,   781,     0,   782,   846,   847,
     848,   849,   850,   788,   789,   790,   791,     0,   792,     0,
     851,   852,   853,   854,   797,   798,   799,     0,     0,     0,
       0,     0,   855,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   801,
       0,     0,     0,     0,     0,     0,     0,     0,   725,   824,
     727,   857,   728,   825,   730,   731,   826,   827,   828,   829,
     830,   831,   738,   739,   740,   741,   832,   833,   834,   745,
     746,   835,   836,   749,   750,   751,   837,   753,   754,   755,
     756,   838,   839,   759,     0,     0,     0,     0,   760,   761,
     762,   763,   764,   840,   766,   841,   768,     0,   769,   770,
     771,   772,     0,   842,     0,   843,   775,   844,   845,   778,
     779,   780,   781,     0,   782,   846,   847,   848,   849,   850,
     788,   789,   790,   791,     0,   792,     0,   851,   852,   853,
     854,   797,   798,   799,     0,     0,     0,     0,     0,   855,
       0,     0,     0,     0,   867,     0,     0,   856,     0,     0,
       0,     0,     0,     0,     0,     0,   801,     0,     0,     0,
       0,     0,     0,     0,     0,   725,   824,   727,   857,   728,
     825,   730,   731,   826,   827,   828,   829,   830,   831,   738,
     739,   740,   741,   832,   833,   834,   745,   746,   835,   836,
     749,   750,   751,   837,   753,   754,   755,   756,   838,   839,
     759,     0,     0,     0,     0,   760,   761,   762,   763,   764,
     840,   766,   841,   768,     0,   769,   770,   771,   772,     0,
     842,     0,   843,   775,   844,   845,   778,   779,   780,   781,
       0,   782,   846,   847,   848,   849,   850,   788,   789,   790,
     791,     0,   792,     0,   851,   852,   853,   854,   797,   798,
     799,     0,     0,     0,     0,     0,   855,     0,     0,     0,
       0,     0,     0,     0,   856,   873,     0,     0,     0,     0,
       0,     0,     0,   801,     0,     0,     0,     0,     0,     0,
       0,     0,   725,   824,   727,   857,   728,   825,   730,   731,
     826,   827,   828,   829,   830,   831,   738,   739,   740,   741,
     832,   833,   834,   745,   746,   835,   836,   749,   750,   751,
     837,   753,   754,   755,   756,   838,   839,   759,     0,     0,
       0,     0,   760,   761,   762,   763,   764,   840,   766,   841,
     768,     0,   769,   770,   771,   772,     0,   842,     0,   843,
     775,   844,   845,   778,   779,   780,   781,     0,   782,   846,
     847,   848,   849,   850,   788,   789,   790,   791,     0,   792,
       0,   851,   852,   853,   854,   797,   798,   799,     0,     0,
       0,     0,     0,   855,     0,     0,     0,     0,  -266,     0,
    -266,   856,  -266,     0,  -266,  -266,     0,     0,     0,     0,
     801,     0,  -266,  -266,  -266,  -266,     0,     0,     0,  -266,
    -266,     0,   857,  -266,  -266,  -266,     0,  -266,  -266,  -266,
    -266,     0,     0,  -266,     0,     0,     0,     0,  -266,  -266,
    -266,  -266,  -266,     0,  -266,     0,  -266,     0,  -266,  -266,
    -266,  -266,     0,     0,     0,     0,  -266,     0,     0,  -266,
    -266,  -266,  -266,     0,  -266,     0,     0,     0,     0,     0,
    -266,  -266,  -266,  -266,     0,  -266,     0,     0,     0,     0,
       0,  -266,  -266,  -266,     0,     0,  -267,     0,  -267,     0,
    -267,     0,  -267,  -267,  -266,     0,     0,     0,     0,     0,
    -267,  -267,  -267,  -267,     0,     0,  -266,  -267,  -267,     0,
       0,  -267,  -267,  -267,  -266,  -267,  -267,  -267,  -267,     0,
       0,  -267,     0,     0,     0,     0,  -267,  -267,  -267,  -267,
    -267,     0,  -267,     0,  -267,     0,  -267,  -267,  -267,  -267,
       0,     0,     0,     0,  -267,     0,     0,  -267,  -267,  -267,
    -267,     0,  -267,     0,     0,     0,     0,     0,  -267,  -267,
    -267,  -267,     0,  -267,     0,     0,     0,     0,     0,  -267,
    -267,  -267,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -267,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -267,     0,     0,     0,     0,     0,
       0,     0,  -267
  };

  const short
  asn1_parser::yycheck_[] =
  {
       9,   128,   129,   256,   140,   141,   362,   128,   129,    18,
       0,   140,   141,     3,   557,   203,   448,   246,   460,   311,
     207,   141,   210,     4,   500,   455,   284,   457,   216,   691,
      31,    22,   312,    22,     4,     5,     6,     7,     4,     9,
      22,    11,   518,     4,   213,     4,     5,   709,    22,    64,
      20,    22,    50,    33,   307,    22,    24,   487,   213,     4,
      24,    25,   476,   149,    34,     4,    54,    77,   112,   327,
     206,    89,   122,    30,    50,   122,   122,   206,    77,   112,
       9,    87,    50,   124,   211,   126,    51,    87,    50,    18,
      50,    89,     4,    63,   450,   113,   102,   138,    50,    89,
     150,   145,   102,   150,   150,    95,    50,   243,   126,    79,
      29,   525,   145,    89,   243,    95,   123,   246,   124,   124,
     126,    89,   137,   130,   124,   378,   126,    89,   126,    89,
     673,   126,   412,   138,   114,   388,   146,    89,   126,   392,
     110,   213,   311,   312,   806,    89,   141,   146,   149,   150,
     140,   141,   125,   124,   111,   585,   311,   312,   149,   150,
     130,   150,    75,    89,   137,   353,   354,   149,   421,   150,
      89,   359,   360,     0,    93,   149,   532,   304,   149,   149,
     150,   122,   149,   149,   150,   149,   258,   113,   149,   150,
     149,   150,   149,   650,   203,   123,   205,    35,   207,   124,
     862,   210,   130,   212,   149,   150,   133,   216,   217,   150,
     149,   150,   465,   125,   126,   691,   206,   674,   130,   125,
     124,    59,   126,   213,   126,    24,    25,   124,   364,    28,
     672,   137,    70,   709,   138,   364,   138,   149,   150,   311,
     312,   138,   125,   412,   364,   365,   124,   476,   126,   258,
     125,   260,   138,   243,   137,   443,   246,   412,    16,   125,
     138,   125,   137,   141,   150,   452,   256,   125,   258,   522,
     700,   137,   140,   526,   527,   528,   529,   530,    56,   137,
     572,   137,    60,   137,   126,   141,   455,   141,   457,   145,
     445,   145,   461,   551,   449,   858,   525,   126,   370,   106,
     455,   130,   457,   866,   562,   121,   461,    61,   121,   121,
     126,   121,   481,   126,   126,   484,   126,   307,   487,   141,
     676,   311,   312,   145,    17,    18,   481,   241,   871,   484,
     106,   245,   487,   124,   125,   126,   124,   432,   126,   434,
     412,   679,   469,   681,   353,   354,   106,   476,   149,   150,
     359,   360,    24,    25,    44,    45,   648,    24,    25,     4,
     432,   140,   434,   499,    71,   501,   125,   126,   621,   121,
     499,   127,   501,   445,   364,   817,   133,   449,    53,    36,
     370,    72,   635,   455,   816,   457,   862,   142,   378,   461,
     137,    66,    67,   685,   142,    70,   525,   124,   388,    74,
     592,   593,   392,   572,    56,   125,   142,   103,   103,   481,
      85,   124,   484,    91,    89,   487,   585,   572,   124,    87,
     124,   674,   412,   432,   103,   434,    69,    16,   138,   565,
     585,   421,   620,   875,   443,   121,   565,   138,   691,   448,
     124,   124,   432,   452,   434,   130,   138,   124,   124,   138,
     150,   460,   126,    87,    87,   445,   709,    87,    87,   449,
     124,   141,   124,    89,    90,   455,   141,   457,   138,   541,
     141,   461,   544,   124,    22,   465,   141,   125,   137,   648,
     126,   125,   132,   137,    87,   138,   476,   125,   137,   742,
      58,   481,    13,   648,   484,    40,   138,   487,    40,   124,
     572,   124,   137,     4,     5,     6,     7,    58,     9,   499,
      11,   501,   639,   585,   140,   141,   685,   705,   123,    20,
     130,   138,   124,   138,   150,   125,   145,   126,   125,   137,
     685,   700,   522,    34,   543,   525,   526,   527,   528,   529,
     530,   137,   126,   138,   145,   700,   138,   138,   557,   175,
     803,   541,   125,   806,   544,   126,   126,   124,   137,   149,
     124,   570,    63,   137,   125,   137,   144,   576,   127,   195,
     127,   129,   122,     4,   150,   565,   648,   252,    79,   254,
     127,   256,   572,    53,   210,   125,   212,   125,   137,    40,
     216,   217,   127,   122,   125,   585,    66,    67,   137,   127,
      70,   120,   127,   127,    74,   127,   138,   137,   125,   110,
     137,   620,   125,   685,   137,    85,   125,   243,   104,   137,
     246,   141,   137,   249,   250,   124,   138,   253,   700,   125,
     138,   621,   307,   213,   137,   137,   141,   137,   148,   265,
     138,   138,   125,   137,   137,   635,   137,     3,   149,   150,
     243,   856,   674,   596,   657,   281,   806,   803,   648,   786,
     787,   242,   671,   672,   673,   786,   787,   565,    90,   565,
     679,   141,   681,   686,   646,   301,   364,    18,   687,   688,
      32,    74,    53,   687,   674,    70,    85,   671,   543,   364,
     365,   217,   541,    11,    49,   685,   705,   620,    44,   481,
     697,   691,    -1,   378,   484,   336,   585,    -1,   461,    -1,
     700,    -1,    -1,   388,    -1,   341,    -1,   392,    -1,   709,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   353,   354,    -1,
      -1,   311,   312,   359,   360,    -1,    -1,    -1,   364,    -1,
      -1,    -1,    -1,   213,    -1,    -1,   421,    -1,    -1,    -1,
      -1,   246,   742,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   256,    -1,     4,     5,     6,     7,    -1,     9,    -1,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   258,    -1,
     465,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   816,   817,    -1,
      -1,    -1,   307,   803,    -1,    -1,   806,    -1,    -1,   445,
      -1,    -1,    63,    -1,    -1,    -1,    -1,   453,    -1,    -1,
      -1,    -1,   412,    -1,   460,    -1,    -1,    -1,    -1,    -1,
      -1,   311,   312,    -1,    -1,    -1,    -1,   522,    -1,    -1,
     476,   526,   527,   528,   529,   530,    -1,    -1,    -1,    -1,
      -1,    -1,   871,    -1,    -1,    -1,   875,    -1,    -1,   110,
      -1,    -1,    -1,   499,   500,   455,    -1,   457,    -1,    -1,
      -1,   461,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,
     565,    -1,    -1,   388,   364,   365,    -1,   392,    -1,   525,
     370,   481,    -1,    -1,   484,    -1,    -1,   487,   149,   150,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   421,    -1,    -1,    -1,
      -1,   557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   565,
      -1,    -1,   412,    -1,    -1,    -1,   621,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     635,    -1,   432,    -1,   434,    -1,    -1,    -1,    -1,    -1,
     465,    -1,   598,    -1,    -1,   445,    -1,    -1,    -1,   449,
      -1,   476,    -1,    -1,    -1,   455,    -1,   457,    -1,    -1,
      -1,   461,   572,    -1,    -1,    -1,    -1,    -1,    -1,   674,
      -1,   676,    -1,    -1,    -1,   585,    -1,    -1,    -1,    -1,
      -1,   481,    -1,    -1,   484,    -1,    -1,   487,    -1,   489,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   522,    -1,    -1,
     525,   526,   527,   528,   529,   530,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   672,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   532,    -1,    -1,   691,   536,   742,   648,    -1,
      -1,   541,    -1,    -1,   544,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   709,    -1,    -1,    -1,     4,     5,     6,
       7,    -1,     9,    -1,    11,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   572,    20,    -1,   685,    -1,    24,    25,    -1,
      -1,    -1,    -1,    30,    -1,   585,    -1,    34,    -1,    -1,
     700,    -1,    -1,    40,    -1,    -1,   621,    -1,    -1,    -1,
      47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     635,    -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    89,    -1,    -1,    -1,    -1,   803,   648,   674,
     806,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   817,    -1,   110,   111,    -1,   691,    -1,    -1,    -1,
      -1,    -1,    -1,   120,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,    -1,    -1,   709,   685,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,
     700,    -1,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   871,    -1,   742,    -1,   875,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,
       5,     6,     7,    -1,     9,    -1,    11,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    -1,    22,   803,    24,
      25,   806,    -1,    -1,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    -1,    -1,    -1,    -1,   133,    -1,
      -1,    -1,   137,    -1,    -1,    -1,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,   150,     4,     5,     6,     7,
      -1,     9,    -1,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    -1,    22,    -1,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,    -1,
     128,     4,     5,     6,     7,   133,     9,    -1,    11,   137,
      -1,    -1,    -1,   141,    -1,    -1,    -1,    20,    -1,    22,
      -1,   149,   150,    -1,    -1,    -1,    -1,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    42,
      -1,    -1,    -1,    46,    47,    48,    49,    -1,    -1,    52,
      53,    54,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
      73,    74,    -1,    76,    -1,    78,    -1,    80,    -1,    -1,
      83,    84,    85,    86,    -1,    88,    -1,    90,    -1,    -1,
      -1,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
      -1,    -1,   105,    -1,   107,   108,   109,   110,   111,    -1,
      -1,    -1,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,    -1,   126,    -1,   128,     4,     5,     6,     7,
      -1,     9,    -1,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    -1,    22,    -1,   149,   150,    -1,    -1,
      -1,    -1,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      68,    -1,    -1,    -1,    -1,    73,    74,    -1,    76,    -1,
      78,    -1,    80,    -1,    -1,    83,    84,    85,    86,    -1,
      88,    -1,    90,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,    -1,    -1,   105,    -1,   107,
     108,   109,   110,   111,    -1,    -1,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,
       7,    -1,     9,    -1,    11,    -1,    -1,    -1,    -1,    -1,
      -1,   149,   150,    20,    -1,    22,    -1,    24,    25,    -1,
      -1,    -1,    -1,    30,    -1,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    -1,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    -1,    65,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,
      -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    88,    89,    -1,    -1,    -1,    -1,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,
     107,   108,   109,   110,   111,    -1,    -1,    -1,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,
      -1,   128,     4,     5,     6,     7,   133,     9,    -1,    11,
      -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,    20,    -1,
      22,    -1,   149,   150,    -1,    -1,    -1,    -1,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
      42,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,    -1,
      52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    67,    68,    -1,    -1,    -1,
      -1,    73,    74,    -1,    76,    -1,    78,    -1,    80,    -1,
      -1,    83,    84,    85,    86,    -1,    88,    -1,    90,    -1,
      -1,    -1,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,    -1,    -1,   105,    -1,   107,   108,   109,   110,   111,
      -1,    -1,    -1,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,    -1,    -1,   126,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    -1,     4,     5,     6,     7,    -1,     9,    -1,
      11,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,    20,
      -1,    22,    -1,    24,    25,    -1,    -1,    -1,    -1,    30,
      -1,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
      -1,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    -1,    65,    66,    67,    68,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    -1,    88,    89,    -1,
      -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,   110,
     111,    -1,    -1,    -1,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,    -1,    -1,    -1,   128,     4,     5,
       6,     7,   133,     9,    -1,    11,    -1,    -1,    -1,    -1,
     141,    -1,    -1,    -1,    20,    -1,    22,    -1,   149,   150,
      -1,    -1,    -1,    -1,    30,    -1,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,
      -1,    -1,    48,    49,    -1,    -1,    52,    53,    -1,    -1,
      -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    68,    -1,    -1,    -1,    -1,    73,    74,    -1,
      76,    -1,    78,    -1,    80,    -1,    -1,    83,    84,    85,
      86,    -1,    88,    -1,    90,    -1,    -1,    -1,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,     4,     5,   105,
      -1,   107,   108,   109,   110,   111,    -1,    -1,    -1,   115,
     116,   117,   118,   119,   120,    22,    -1,    -1,    -1,    -1,
     126,    -1,   128,    30,    -1,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,
      -1,    48,    49,   149,   150,    52,    53,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,
      -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,
     107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,   118,   119,    -1,    -1,     4,     5,     6,     7,    -1,
       9,   128,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    22,    -1,    24,    25,    -1,    -1,    -1,
      -1,    30,   149,   150,    -1,    34,    -1,     4,     5,     6,
       7,    40,     9,    -1,    11,    -1,    -1,    -1,    47,    -1,
      -1,    -1,    -1,    20,    -1,    -1,    -1,    24,    25,    -1,
      -1,    -1,    -1,    30,    63,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    76,    -1,    -1,
      47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,    89,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   141,   110,   111,    -1,    -1,    -1,    -1,    -1,
     149,   150,    -1,   120,    -1,    -1,    -1,   124,    -1,    -1,
      -1,    22,    -1,    -1,    -1,    -1,   133,    -1,    -1,    30,
      -1,    32,    -1,    34,   141,    -1,    37,    38,    39,    -1,
      41,    42,   149,   150,    45,    -1,    -1,    48,    49,    -1,
      -1,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,
      22,   122,    -1,    -1,   125,    -1,    -1,   128,    30,    -1,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
      42,    -1,    -1,    45,    -1,    -1,    48,    49,   149,   150,
      52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,
      -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,
      -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,
      -1,    -1,    94,    -1,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,
      -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,    22,
     122,    -1,    -1,   125,    -1,    -1,   128,    30,    -1,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    48,    49,   149,   150,    52,
      53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    22,    -1,    -1,   128,    -1,    -1,    -1,    -1,
      30,    -1,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      -1,    41,    42,    -1,    -1,    -1,   149,   150,    48,    49,
      -1,    -1,    52,    53,    -1,    -1,    -1,    57,    -1,    59,
      -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,
      70,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,
      -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,   118,   119,
      -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,   128,    30,
      -1,    32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,
      41,    42,    -1,    -1,    45,    -1,    -1,    48,    49,   149,
     150,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,
      22,   122,    24,    25,    -1,    -1,    -1,   128,    30,    -1,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
      42,    -1,    -1,    -1,    -1,    -1,    48,    49,   149,   150,
      52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,
      -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,
      -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,
      -1,    -1,    94,    -1,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,
      -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,    22,
      -1,    -1,    -1,    -1,    -1,    -1,   128,    30,    -1,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    42,
      -1,    -1,    45,    -1,    -1,    48,    49,   149,   150,    52,
      53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,   118,   119,    -1,    22,   122,
      -1,    -1,    -1,    -1,    -1,   128,    30,    -1,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,
      -1,    45,    -1,    -1,    48,    49,   149,   150,    52,    53,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,
      74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    83,
      84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,
      94,    -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,    -1,
      -1,   115,   116,   117,   118,   119,    -1,    22,   122,    -1,
      -1,    -1,    -1,    -1,   128,    30,    -1,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,
      45,    -1,    -1,    48,    49,   149,   150,    52,    53,    -1,
      -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,
      65,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,    74,
      -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,
      85,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,
      -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
     105,    -1,   107,   108,   109,    -1,   111,    -1,    -1,    -1,
     115,   116,   117,   118,   119,    -1,    22,   122,    -1,    -1,
      -1,    -1,    -1,   128,    30,    -1,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,
      -1,    -1,    48,    49,   149,   150,    52,    53,    -1,    -1,
      -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,
      66,    67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,
      86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,
      -1,   107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,
     116,   117,   118,   119,    -1,    22,    -1,    -1,   124,    -1,
      -1,    -1,   128,    30,    -1,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    -1,    41,    42,    43,    -1,    -1,    -1,
      -1,    48,    49,   149,   150,    52,    53,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,
      -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,
     107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,   118,   119,    -1,    22,    -1,    -1,    -1,    -1,    -1,
      -1,   128,    30,    -1,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      48,    49,   149,   150,    52,    53,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,
      78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,
      88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,
     108,   109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,    -1,    22,    -1,    -1,
     128,    -1,    -1,    -1,    -1,    30,    -1,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,
      -1,   149,   150,    48,    49,    -1,    -1,    52,    53,    -1,
      -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,
      65,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,    74,
      -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,
      85,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,
      -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
     105,    -1,   107,   108,   109,    -1,   111,    -1,    -1,    -1,
     115,   116,   117,   118,   119,    -1,    22,    -1,    -1,    -1,
      -1,    -1,    -1,   128,    30,   130,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,
      -1,    -1,    48,    49,   149,   150,    52,    53,    -1,    -1,
      -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,
      66,    67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,
      86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,
      -1,   107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,
     116,   117,   118,   119,    -1,    22,   122,    -1,    -1,    -1,
      -1,    -1,   128,    30,    -1,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    -1,    41,    42,    -1,    -1,    45,    -1,
      -1,    48,    49,   149,   150,    52,    53,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,
      -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,
     107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,   118,   119,    -1,    22,    -1,    -1,    -1,    -1,    -1,
      -1,   128,    30,    -1,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      48,    49,   149,   150,    52,    53,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,
      78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,
      88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,
     108,   109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,
     118,   119,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
     128,    30,    -1,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,    48,
      49,   149,   150,    52,    53,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,
      -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,
     109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,   118,
     119,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,   128,
      30,    -1,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      -1,    41,    42,    -1,    -1,    -1,    -1,    -1,    48,    49,
     149,   150,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,
      -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    24,    25,    -1,   149,
     150,    29,    30,    31,    -1,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      -1,    79,    80,    81,    82,    -1,    84,    -1,    86,    87,
      88,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,    -1,   106,    -1,
     108,   109,   110,   111,   112,   113,   114,    -1,    -1,    -1,
      -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    30,
      31,   149,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
      81,    82,    -1,    84,    -1,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,    -1,   106,    -1,   108,   109,   110,
     111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    30,    31,   149,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    -1,    79,    80,    81,    82,    -1,
      84,    -1,    86,    87,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,    -1,   106,    -1,   108,   109,   110,   111,   112,   113,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    29,    30,    31,   149,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    -1,    79,    80,    81,    82,    -1,    84,    -1,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,    -1,   106,
      -1,   108,   109,   110,   111,   112,   113,   114,    -1,    -1,
      -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    29,    -1,
      31,   128,    33,    -1,    35,    36,    -1,    -1,    -1,    -1,
     137,    -1,    43,    44,    45,    46,    -1,    -1,    -1,    50,
      51,    -1,   149,    54,    55,    56,    -1,    58,    59,    60,
      61,    -1,    -1,    64,    -1,    -1,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    -1,    79,    80,
      81,    82,    -1,    -1,    -1,    -1,    87,    -1,    -1,    90,
      91,    92,    93,    -1,    95,    -1,    -1,    -1,    -1,    -1,
     101,   102,   103,   104,    -1,   106,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,    -1,    -1,    29,    -1,    31,    -1,
      33,    -1,    35,    36,   125,    -1,    -1,    -1,    -1,    -1,
      43,    44,    45,    46,    -1,    -1,   137,    50,    51,    -1,
      -1,    54,    55,    56,   145,    58,    59,    60,    61,    -1,
      -1,    64,    -1,    -1,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    -1,    79,    80,    81,    82,
      -1,    -1,    -1,    -1,    87,    -1,    -1,    90,    91,    92,
      93,    -1,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,
     103,   104,    -1,   106,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   145
  };

  const unsigned short
  asn1_parser::yystos_[] =
  {
       0,   149,   154,   155,   228,   375,     0,   154,    51,   124,
     229,   230,   231,    16,   236,     4,   150,   232,   233,   234,
     235,   310,   373,   133,   315,    75,    35,    59,    70,   237,
     125,   232,   126,   140,   316,   106,   106,   106,    61,   238,
     234,    17,    18,   318,   140,   317,    71,   121,   127,   318,
     133,    36,   317,    60,   239,   240,    31,   149,   150,   241,
     247,   248,   249,   372,   374,   227,    72,   242,   142,   142,
     137,   124,    56,   243,   244,   245,   247,   160,   199,   203,
     204,   205,   206,   207,   250,   251,   260,   261,   262,   372,
     374,   248,   125,   142,   245,    64,   250,    22,    30,    32,
      34,    37,    38,    39,    41,    42,    48,    49,    52,    53,
      57,    62,    65,    66,    67,    68,    74,    76,    78,    83,
      84,    85,    86,    88,    94,    96,    97,    98,    99,   100,
     105,   107,   108,   109,   111,   115,   116,   117,   118,   119,
     121,   124,   128,   149,   159,   187,   188,   197,   198,   202,
     208,   213,   214,   215,   216,   252,   254,   258,   263,   264,
     272,   274,   278,   282,   283,   286,   287,   288,   292,   293,
     294,   295,   299,   300,   301,   302,   306,   313,   314,   319,
     320,   321,   322,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   372,   373,   375,   208,   263,   372,   375,   246,
     375,   103,   103,   124,    91,   124,    87,   124,    69,   103,
      87,   102,   124,   126,   333,   357,    87,   124,   333,   357,
      43,   149,   157,   158,   159,   161,   162,   263,   375,   376,
     150,   157,   209,   210,   211,   212,   249,   263,   372,    16,
     303,   138,   121,   121,   263,   138,   124,   121,   333,    59,
      70,   263,   138,   130,   138,   263,   121,   138,   124,   307,
     124,   265,   296,   297,   298,   373,   122,   276,   279,   280,
     281,   373,   149,   157,   159,   375,   275,   276,   373,   263,
     265,   373,   333,    45,   122,   125,   263,   265,   289,   290,
     291,     4,     5,     6,     7,     9,    11,    20,    31,    34,
      46,    47,    54,    63,    64,    73,    80,    90,   101,   110,
     120,   124,   126,   149,   200,   217,   218,   219,   221,   226,
     253,   255,   259,   263,   273,   277,   323,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   347,   348,   349,
     350,   351,   352,   353,   355,   357,   358,   359,   360,   368,
     369,   374,   375,    87,    87,   263,   265,   125,   289,    87,
      87,   124,   138,   125,   137,   141,   141,    33,    95,   114,
     305,    24,    25,   165,   166,   200,   161,   263,   121,   166,
       6,     7,     9,    11,    24,    25,    34,    40,    47,    76,
      89,   120,   124,   141,   149,   150,   157,   202,   253,   256,
     257,   263,   266,   267,   268,   269,   273,   277,   315,   323,
     374,   375,   124,   270,   263,   263,   166,   372,   263,    22,
     372,   121,    34,    76,   149,   150,   202,   266,   267,   372,
     375,     4,   253,   308,   309,   310,   311,   312,   373,   284,
     285,   373,   125,   137,   263,   132,   370,   125,   137,   126,
     138,   125,   137,    87,   370,    50,    89,    50,    89,   125,
     137,    58,   344,    40,   263,    40,   333,   267,    13,    44,
      45,   122,   201,   337,   336,   124,   124,   370,   137,   112,
     145,   345,    77,   146,   346,   344,   263,   123,   130,   138,
     263,   265,   263,   265,   125,   263,   265,   263,   265,    24,
      25,    28,   163,   164,   167,   168,   171,   173,   174,   176,
     178,   149,   376,   210,   249,     4,   253,   304,   138,   267,
     267,   267,   271,   126,   125,   137,   137,   141,   145,   137,
     145,   138,   138,   336,   267,   138,   138,   253,   308,   125,
     308,   126,   125,   137,   126,   122,   265,   253,   263,   277,
     371,   122,   281,   253,   277,   276,   263,   137,    34,   149,
     349,   349,   122,   291,   347,   124,    54,   267,   333,   361,
     124,   362,   137,   125,   137,   127,   144,   222,   223,   256,
     127,   122,   340,   342,    79,   130,   349,   354,   356,   374,
     157,   263,   165,   263,   157,   125,   137,    24,    50,    89,
     169,   129,   165,   125,   267,     4,   256,   267,   267,   267,
     267,   267,    24,    25,   125,   125,   311,   285,     4,   253,
     137,   141,   370,   127,   127,   122,   290,   370,   122,   157,
     197,   212,   220,   263,   375,    40,   122,   363,   364,   373,
     337,   122,   138,   225,   373,   125,   137,   125,   137,   356,
      50,    89,   177,    89,   113,   170,   170,   170,    50,    89,
     179,   120,   180,   164,   263,   127,   127,   127,   127,   298,
     267,   137,   137,   137,   141,   125,   138,   267,   125,   137,
     125,   137,   333,   365,   366,   137,   138,   224,   138,   223,
     337,   124,   187,   189,   190,   191,   193,    50,    89,   175,
      50,    89,   172,   172,   104,   137,   280,   122,   290,   124,
     189,   267,   149,   363,   363,    29,    89,    93,   367,   337,
     224,   225,   373,    24,    25,    29,    30,    31,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    79,
      80,    81,    82,    84,    86,    87,    88,    89,    90,    91,
      92,    93,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   106,   108,   109,   110,   111,   112,   113,   114,
     120,   137,   149,   165,   186,   192,   194,   195,   196,   263,
     267,   377,   270,   349,   124,   156,   137,   137,   267,   125,
     196,   137,   125,   195,    30,    34,    37,    38,    39,    40,
      41,    42,    47,    48,    49,    52,    53,    57,    62,    63,
      74,    76,    84,    86,    88,    89,    96,    97,    98,    99,
     100,   108,   109,   110,   111,   120,   128,   149,   181,   182,
     183,   184,   185,   186,   122,   148,   181,   125,   182,   165,
     186,   137,   125,   129,   290,   137
  };

  const unsigned short
  asn1_parser::yyr1_[] =
  {
       0,   153,   154,   154,   155,   156,   157,   157,   157,   158,
     159,   159,   160,   161,   161,   162,   163,   163,   164,   164,
     164,   164,   164,   164,   165,   165,   166,   166,   167,   168,
     168,   169,   169,   169,   170,   170,   170,   171,   172,   172,
     172,   173,   174,   175,   175,   175,   176,   177,   177,   177,
     178,   179,   179,   179,   180,   180,   181,   181,   182,   182,
     183,   184,   185,   185,   185,   186,   186,   187,   187,   188,
     189,   189,   190,   190,   191,   192,   193,   194,   194,   195,
     195,   196,   196,   197,   197,   198,   199,   200,   201,   201,
     201,   201,   201,   202,   202,   203,   203,   203,   203,   204,
     205,   206,   207,   208,   209,   209,   210,   210,   211,   211,
     212,   212,   213,   214,   215,   216,   216,   217,   217,   218,
     218,   218,   219,   220,   220,   220,   220,   220,   220,   220,
     221,   221,   222,   222,   223,   223,   224,   224,   225,   225,
     226,   226,   226,   227,   228,   229,   229,   229,   230,   231,
     232,   232,   233,   233,   233,   234,   235,   236,   236,   237,
     237,   237,   237,   238,   238,   239,   239,   240,   240,   240,
     241,   241,   242,   242,   243,   243,   244,   244,   245,   246,
     246,   247,   247,   248,   249,   249,   249,   250,   250,   251,
     251,   251,   251,   251,   251,   252,   252,   252,   253,   253,
     254,   255,   256,   256,   257,   257,   257,   258,   259,   260,
     261,   262,   263,   263,   263,   263,   263,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   265,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   267,   267,   267,   268,   268,   269,
     269,   270,   271,   271,   272,   273,   273,   274,   274,   275,
     275,   276,   276,   277,   277,   278,   279,   279,   279,   279,
     280,   280,   281,   281,   282,   283,   283,   284,   284,   285,
     285,   286,   287,   288,   288,   289,   289,   289,   289,   289,
     289,   289,   289,   289,   290,   290,   291,   291,   291,   291,
     291,   291,   291,   292,   292,   293,   293,   294,   294,   295,
     296,   297,   297,   297,   298,   298,   299,   300,   301,   301,
     301,   302,   303,   303,   304,   304,   305,   305,   305,   305,
     306,   307,   307,   308,   308,   309,   309,   309,   310,   311,
     311,   312,   313,   314,   315,   316,   317,   317,   318,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     328,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   330,   331,   331,   332,   332,   332,
     332,   332,   332,   332,   332,   333,   334,   334,   335,   336,
     336,   336,   337,   337,   338,   338,   339,   340,   340,   341,
     342,   342,   343,   344,   345,   345,   346,   346,   347,   347,
     348,   348,   348,   348,   348,   348,   348,   348,   348,   349,
     349,   349,   349,   349,   349,   349,   349,   349,   349,   350,
     351,   352,   353,   353,   354,   354,   355,   355,   356,   356,
     357,   358,   359,   360,   360,   361,   362,   362,   362,   362,
     363,   363,   364,   365,   366,   366,   367,   367,   367,   367,
     368,   369,   370,   370,   371,   371,   371,   372,   373,   374,
     375,   376,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377
  };

  const unsigned char
  asn1_parser::yyr2_[] =
  {
       0,     2,     1,     2,    10,     3,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     5,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       2,     1,     2,     0,     1,     1,     0,     4,     1,     2,
       0,     4,     4,     1,     2,     0,     3,     1,     2,     0,
       3,     1,     1,     0,     3,     0,     1,     2,     1,     1,
       3,     2,     1,     2,     0,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     5,     2,     3,     1,     2,     1,
       1,     1,     1,     1,     1,     3,     4,     3,     1,     3,
       1,     3,     5,     3,     3,     1,     1,     1,     1,     4,
       5,     5,     4,     3,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     5,     3,     3,     1,     1,     1,     1,     0,
       1,     4,     1,     3,     2,     4,     2,     0,     1,     3,
       2,     3,     5,     0,     2,     1,     1,     0,     3,     2,
       1,     2,     1,     1,     1,     1,     4,     2,     0,     2,
       2,     2,     0,     2,     0,     3,     0,     3,     3,     0,
       1,     0,     3,     0,     1,     0,     1,     2,     3,     1,
       2,     1,     3,     1,     1,     3,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     4,     1,     3,     1,     1,     1,     3,     3,     3,
       4,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     4,     1,
       1,     1,     1,     3,     3,     3,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     1,     2,     1,     1,     1,     1,     4,     1,
       3,     4,     4,     1,     1,     4,     1,     4,     6,     2,
       1,     3,     1,     1,     1,     2,     5,     1,     3,     4,
       4,     2,     1,     3,     4,     1,     4,     6,     8,    10,
       4,     6,     2,     4,     1,     3,     1,     2,     3,     1,
       2,     3,     3,     3,     3,     3,     4,     3,     3,     4,
       1,     1,     3,     5,     1,     3,     3,     1,     2,     3,
       3,     5,     2,     0,     1,     1,     1,     1,     1,     0,
       2,     3,     4,     1,     2,     1,     1,     1,     1,     1,
       1,     4,     1,     1,     4,     2,     3,     0,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     1,     1,     1,     1,
       3,     5,     1,     2,     1,     3,     1,     1,     3,     1,
       1,     2,     1,     2,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     3,     1,     2,     1,     2,     1,     1,     1,     1,
       2,     1,     2,     3,     3,     1,     0,     3,     5,     3,
       1,     3,     2,     2,     1,     0,     1,     1,     1,     0,
       2,     2,     2,     0,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const asn1_parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "comment", "number",
  "negativenumber", "realnumber", "bstring", "xmlbstring", "hstring",
  "xmlhstring", "cstring", "xmlcstring", "simplestring", "xmltstring",
  "psname", "encodingreference", "integerUnicodeLabel",
  "non-integerUnicodeLabel", "extended-true", "tstring", "extended-false",
  "objectreference", "objectsetreference", "typefieldreference",
  "valuefieldreference", "valuesetfieldreference", "objectfieldreference",
  "objectsetfieldreference", "ABSENT", "ABSTRACT_SYNTAX", "ALL", "ANY",
  "APPLICATION", "ASN_NULL", "AUTOMATIC", "BEGIN", "BIT", "BMPString",
  "BOOLEAN", "BY", "CHARACTER", "CHOICE", "CLASS", "COMPONENT",
  "COMPONENTS", "CONSTRAINED", "CONTAINING", "DATE", "DATE_TIME",
  "DEFAULT", "DEFINITIONS", "DURATION", "EMBEDDED", "ENCODED",
  "ENCODING_CONTROL", "END", "ENUMERATED", "EXCEPT", "EXPLICIT", "EXPORTS",
  "EXTENSIBILITY", "EXTERNAL", "FALSE", "FROM", "GeneralizedTime",
  "GeneralString", "GraphicString", "IA5String", "IDENTIFIER", "IMPLICIT",
  "IMPLIED", "IMPORTS", "\"INCLUDES\"", "INSTANCE", "INSTRUCTIONS",
  "INTEGER", "INTERSECTION", "ISO646String", "MAX", "MIN",
  "MINUS_INFINITY", "NOT_A_NUMBER", "NumericString", "OBJECT",
  "ObjectDescriptor", "OCTET", "OF", "OID_IRI", "OPTIONAL", "PATTERN",
  "PDV", "PLUS_INFINITY", "PRESENT", "PrintableString", "PRIVATE", "REAL",
  "RELATIVE_OID", "RELATIVE_OID_IRI", "SEQUENCE", "SET", "SETTINGS",
  "SIZE", "STRING", "SYNTAX", "T61String", "TAGS", "TeletexString", "TIME",
  "TIME_OF_DAY", "TRUE", "TYPE_IDENTIFIER", "UNION", "UNIQUE", "UNIVERSAL",
  "UniversalString", "UTCTime", "UTF8String", "VideotexString",
  "VisibleString", "WITH", "\"::=\"", "\"...\"", "\"..\"", "\"{\"",
  "\"}\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"<\"", "\">\"", "\"!\"",
  "\"\\\"\"", "\"&\"", "\"'\"", "\"*\"", "\",\"", "\".\"", "\"-\"",
  "\"/\"", "\":\"", "\";\"", "\"=\"", "\"@\"", "\"|\"", "\"^\"", "PLUS",
  "STAR", "GENERIC_IDENTIFIER_UPPERCASE", "GENERIC_IDENTIFIER_LOWERCASE",
  "GENERIC_INTEGER", "xmlasn1typename", "$accept", "ModuleDefinitionList",
  "ModuleDefinition", "SyntaxList", "DefinedObjectClass",
  "ExternalObjectClassReference", "UsefulObjectClassReference",
  "ObjectClassAssignment", "ObjectClass", "ObjectClassDefn",
  "FieldSpecList", "FieldSpec", "FieldName", "FieldNameList",
  "TypeFieldSpec", "OneOrManyTypeFieldReference", "TypeOptionalitySpec",
  "OptionalUnique", "FixedTypeValueFieldSpec", "ValueOptionalitySpec",
  "VariableTypeValueFieldSpec", "FixedTypeValueSetFieldSpec",
  "ValueSetDefaultSpec", "ObjectFieldSpec", "ObjectOptionalitySpec",
  "ObjectSetFieldSpec", "ObjectSetOptionalitySpec", "WithSyntaxSpec",
  "TokenOrGroupSpecList", "TokenOrGroupSpec", "OptionalGroup",
  "RequiredToken", "LiteralList", "Literal", "DefinedObject",
  "ExternalObjectReference", "Object", "ObjectDefn", "DefaultSyntax",
  "FieldSetting", "DefinedSyntax", "DefinedSyntaxList",
  "DefinedSyntaxToken", "Setting", "DefinedObjectSet",
  "ExternalObjectSetReference", "ObjectSetAssignment", "ObjectSet",
  "ObjectSetSpec", "ObjectClassFieldType", "ParameterizedAssignment",
  "ParameterizedTypeAssignment", "ParameterizedValueAssignment",
  "ParameterizedValueSetTypeAssignment",
  "ParameterizedObjectClassAssignment", "ParameterList", "ParameterSeries",
  "Parameter", "ParamGovernor", "Governor", "ReferencedObjects",
  "TypeFromObject", "InstanceOfType", "SimpleDefinedType",
  "SimpleDefinedValue", "GeneralConstraint", "UserDefinedConstraint",
  "UserDefinedConstraintParameter", "TableConstraint", "AtNotationList",
  "AtNotation", "Level", "ComponentIdList", "ContentsConstraint",
  "EncodingControlSections", "ModuleIdentifier",
  "DefinitiveIdentification", "DefinitiveOID", "DefinitiveOIDandIRI",
  "DefinitiveObjIdComponentList", "DefinitiveObjIdComponent",
  "DefinitiveNumberForm", "DefinitiveNameAndNumberForm",
  "EncodingReferenceDefault", "TagDefault", "ExtensionDefault",
  "ModuleBody", "Exports", "SymbolsExported", "Imports", "SymbolsImported",
  "SymbolsFromModuleList", "SymbolsFromModule", "GlobalModuleReference",
  "SymbolList", "Symbol", "Reference", "AssignmentList", "Assignment",
  "DefinedType", "DefinedValue", "ParameterizedType", "ParameterizedValue",
  "ActualParameterList", "ActualParameter", "ExternalTypeReference",
  "ExternalValueReference", "TypeAssignment", "ValueAssignment",
  "ValueSetTypeAssignment", "Type", "BuiltinType", "NamedType",
  "ValueWithoutTypeIdentifier", "Value", "ValueCommaListChoice",
  "ValueChoice", "ValueSet", "SequenceOfValues", "BooleanType",
  "BooleanValue", "IntegerType", "NamedNumberList", "NamedNumber",
  "SignedNumber", "EnumeratedType", "Enumerations", "Enumeration",
  "EnumerationItem", "RealType", "BitStringType", "NamedBitList",
  "NamedBit", "OctetStringType", "NullType", "SequenceType",
  "ComponentTypeLists", "ComponentTypeList", "ComponentType",
  "SequenceOfType", "SetType", "SetOfType", "ChoiceType",
  "AlternativeTypeLists", "RootAlternativeTypeList", "AlternativeTypeList",
  "SelectionType", "PrefixedType", "TaggedType", "Tag",
  "EncodingReference", "ClassNumber", "Class", "ObjectIdentifierType",
  "ObjectIdentifierValue", "ObjIdComponentsList", "ObjIdComponents",
  "NameForm", "NumberForm", "NameAndNumberForm", "RelativeOIDType",
  "IRIType", "IRIValue", "FirstArcIdentifier", "SubsequentArcIdentifier",
  "ArcIdentifier", "RelativeIRIType", "EmbeddedPDVType", "ExternalType",
  "TimeType", "TimeValue", "DateType", "TimeOfDayType", "DateTimeType",
  "DurationType", "CharacterStringType", "RestrictedCharacterStringType",
  "UnrestrictedCharacterStringType", "ConstrainedType",
  "TypeWithConstraint", "Constraint", "ConstraintSpec",
  "SubtypeConstraint", "ElementSetSpecs", "ElementSetSpec", "Unions",
  "UElems", "Intersections", "IElems", "IntersectionElements", "Elems",
  "Exclusions", "UnionMark", "IntersectionMark", "Elements",
  "SubtypeElements", "SingleValue", "ContainedSubtype", "Includes",
  "ValueRange", "LowerEndpoint", "UpperEndpoint", "LowerEndValue",
  "UpperEndValue", "SizeConstraint", "TypeConstraint", "PermittedAlphabet",
  "InnerTypeConstraints", "SingleTypeConstraint",
  "MultipleTypeConstraints", "TypeConstraints", "NamedConstraint",
  "ComponentConstraint", "ValueConstraint", "PresenceConstraint",
  "PatternConstraint", "PropertySettings", "ExceptionSpec",
  "ExceptionIdentification", "typereference", "identifier",
  "valuereference", "modulereference", "objectclassreference", "word", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short
  asn1_parser::yyrline_[] =
  {
       0,   327,   327,   328,   331,   346,   349,   350,   351,   354,
     357,   359,   363,   367,   369,   374,   378,   380,   384,   386,
     388,   389,   390,   391,   394,   396,   404,   406,   410,   414,
     416,   420,   421,   422,   425,   426,   427,   430,   434,   435,
     436,   439,   442,   445,   446,   447,   450,   453,   454,   455,
     458,   461,   462,   463,   469,   470,   473,   474,   477,   478,
     481,   484,   487,   488,   489,   492,   493,   496,   497,   500,
     506,   507,   512,   513,   516,   519,   522,   525,   526,   529,
     530,   533,   534,   538,   539,   542,   545,   549,   552,   553,
     554,   555,   556,   565,   567,   574,   576,   578,   580,   587,
     591,   595,   599,   611,   615,   617,   621,   623,   627,   629,
     633,   635,   651,   663,   672,   680,   681,   685,   686,   689,
     690,   691,   694,   699,   700,   701,   702,   703,   704,   705,
     708,   710,   714,   715,   718,   719,   722,   723,   726,   727,
     730,   731,   732,   743,   751,   758,   759,   760,   763,   766,
     770,   771,   775,   776,   777,   780,   783,   787,   788,   791,
     793,   795,   797,   801,   802,   805,   807,   811,   812,   813,
     816,   817,   820,   822,   825,   827,   830,   832,   836,   852,
     854,   860,   862,   866,   870,   872,   874,   883,   885,   889,
     891,   893,   895,   898,   900,   904,   906,   908,   914,   916,
     919,   923,   926,   928,   932,   934,   937,   947,   951,   976,
     980,   984,   988,   990,   992,   994,   996,  1001,  1002,  1003,
    1004,  1005,  1006,  1007,  1008,  1009,  1010,  1011,  1012,  1013,
    1014,  1015,  1016,  1017,  1018,  1019,  1020,  1021,  1022,  1023,
    1024,  1025,  1026,  1027,  1028,  1029,  1030,  1031,  1034,  1038,
    1040,  1042,  1044,  1046,  1048,  1050,  1052,  1054,  1056,  1058,
    1059,  1061,  1063,  1065,  1069,  1070,  1071,  1072,  1073,  1075,
    1077,  1079,  1081,  1083,  1088,  1090,  1092,  1095,  1096,  1099,
    1100,  1103,  1106,  1108,  1116,  1119,  1121,  1125,  1127,  1131,
    1133,  1137,  1139,  1143,  1145,  1149,  1153,  1156,  1159,  1163,
    1166,  1168,  1172,  1174,  1182,  1185,  1187,  1191,  1192,  1195,
    1196,  1210,  1213,  1216,  1218,  1222,  1224,  1226,  1228,  1230,
    1232,  1234,  1236,  1238,  1242,  1244,  1248,  1251,  1254,  1257,
    1259,  1261,  1263,  1275,  1277,  1281,  1283,  1287,  1289,  1293,
    1297,  1301,  1303,  1305,  1309,  1311,  1318,  1321,  1325,  1327,
    1329,  1333,  1337,  1338,  1341,  1343,  1346,  1348,  1350,  1352,
    1362,  1365,  1367,  1371,  1373,  1377,  1379,  1381,  1385,  1389,
    1391,  1394,  1398,  1410,  1413,  1419,  1422,  1423,  1426,  1427,
    1430,  1436,  1443,  1449,  1452,  1455,  1458,  1461,  1464,  1467,
    1469,  1473,  1475,  1477,  1479,  1481,  1483,  1485,  1487,  1489,
    1491,  1493,  1495,  1497,  1501,  1505,  1507,  1511,  1513,  1515,
    1517,  1519,  1521,  1523,  1525,  1529,  1533,  1534,  1537,  1540,
    1541,  1542,  1545,  1546,  1549,  1550,  1553,  1556,  1557,  1560,
    1563,  1564,  1567,  1570,  1573,  1574,  1577,  1578,  1581,  1583,
    1586,  1587,  1588,  1589,  1590,  1591,  1592,  1593,  1594,  1600,
    1603,  1605,  1607,  1609,  1611,  1613,  1615,  1617,  1619,  1623,
    1626,  1629,  1632,  1633,  1636,  1637,  1640,  1641,  1644,  1645,
    1648,  1651,  1654,  1657,  1658,  1661,  1663,  1664,  1665,  1666,
    1669,  1670,  1673,  1676,  1679,  1680,  1683,  1684,  1685,  1686,
    1689,  1692,  1695,  1696,  1699,  1700,  1701,  1704,  1708,  1712,
    1716,  1720,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,
    1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,  1741,
    1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,
    1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,
    1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,
    1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,  1780,  1781,
    1782,  1783,  1784,  1785,  1786,  1787,  1788,  1789,  1790,  1791,
    1792,  1793,  1794,  1795,  1796,  1797,  1798,  1799,  1800
  };

  // Print the state stack on the debug stream.
  void
  asn1_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << '\n';
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  asn1_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):\n";
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG



} // yy
#line 11530 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re" // lalr1.cc:1242
#line 1802 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:1243



namespace yy {

    asn1_parser::symbol_type yylex(Context& context)
    {
        const char* start = context.cursor;
        const char* YYMARKER = nullptr;
        context.location.step();
        // Lexer

#line 11546 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *context.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '!':	goto yy11;
	case '"':	goto yy13;
	case '&':	goto yy15;
	case '\'':	goto yy16;
	case '(':	goto yy18;
	case ')':	goto yy20;
	case ',':	goto yy22;
	case '-':	goto yy24;
	case '.':	goto yy26;
	case '/':	goto yy28;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy29;
	case ':':	goto yy32;
	case ';':	goto yy34;
	case '<':	goto yy36;
	case '@':	goto yy38;
	case 'A':	goto yy40;
	case 'B':	goto yy42;
	case 'C':	goto yy43;
	case 'D':	goto yy44;
	case 'E':	goto yy45;
	case 'F':	goto yy46;
	case 'G':	goto yy47;
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'Q':
	case 'X':
	case 'Y':
	case 'Z':	goto yy48;
	case 'I':	goto yy50;
	case 'M':	goto yy51;
	case 'N':	goto yy52;
	case 'O':	goto yy53;
	case 'P':	goto yy54;
	case 'R':	goto yy55;
	case 'S':	goto yy56;
	case 'T':	goto yy57;
	case 'U':	goto yy58;
	case 'V':	goto yy59;
	case 'W':	goto yy60;
	case '[':	goto yy61;
	case ']':	goto yy63;
	case '^':	goto yy65;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy67;
	case '{':	goto yy70;
	case '|':	goto yy72;
	case '}':	goto yy74;
	default:	goto yy4;
	}
yy2:
	++context.cursor;
#line 11665 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END_OF_FILE(context.location); }
#line 11648 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy4:
	++context.cursor;
yy5:
#line 11691 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ std::cerr << "Ignoring unknown symbol: " <<  static_cast<int>(*start) << std::endl; return yylex(context); }
#line 11654 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy6:
	++context.cursor;
#line 11669 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.columns(); return yylex(context); }
#line 11659 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy8:
	++context.cursor;
#line 11668 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.lines();   return yylex(context); }
#line 11664 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy10:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy5;
	}
yy11:
	++context.cursor;
#line 11687 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCLAMATION_MARK (context.location); }
#line 11675 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy13:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy78;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy15:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':	goto yy81;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy84;
	default:	goto yy5;
	}
yy16:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy87;
	case '0':
	case '1':	goto yy16;
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy88;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy18:
	++context.cursor;
#line 11677 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_PARENTHESIS (context.location); }
#line 11775 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy20:
	++context.cursor;
#line 11678 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_PARENTHESIS (context.location); }
#line 11780 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy22:
	++context.cursor;
#line 11683 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMMA (context.location); }
#line 11785 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy24:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy90;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy93;
	default:	goto yy25;
	}
yy25:
#line 11684 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_HYPHEN_MINUS (context.location); }
#line 11805 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy26:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy96;
	default:	goto yy27;
	}
yy27:
#line 11685 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FULL_STOP (context.location); }
#line 11815 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy28:
	yych = *++context.cursor;
	switch (yych) {
	case '*':	goto yy98;
	default:	goto yy5;
	}
yy29:
	yyaccept = 0;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '.':	goto yy100;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy29;
	default:	goto yy31;
	}
yy31:
#line 11651 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_number(std::stoll(std::string(start, context.cursor)), context.location); }
#line 11842 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy32:
	yyaccept = 1;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case ':':	goto yy102;
	default:	goto yy33;
	}
yy33:
#line 11681 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COLON (context.location); }
#line 11853 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy34:
	++context.cursor;
#line 11682 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEMICOLON (context.location); }
#line 11858 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy36:
	++context.cursor;
#line 11688 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_LESS_THAN (context.location); }
#line 11863 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy38:
	++context.cursor;
#line 11690 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AT (context.location); }
#line 11868 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy40:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'B':	goto yy104;
	case 'L':	goto yy105;
	case 'N':	goto yy106;
	case 'P':	goto yy107;
	case 'U':	goto yy108;
	default:	goto yy49;
	}
yy41:
#line 11659 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 11883 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy42:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy109;
	case 'I':	goto yy110;
	case 'M':	goto yy111;
	case 'O':	goto yy112;
	case 'Y':	goto yy113;
	default:	goto yy49;
	}
yy43:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'H':	goto yy115;
	case 'L':	goto yy116;
	case 'O':	goto yy117;
	default:	goto yy49;
	}
yy44:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy118;
	case 'E':	goto yy119;
	case 'U':	goto yy120;
	default:	goto yy49;
	}
yy45:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy121;
	case 'N':	goto yy122;
	case 'X':	goto yy123;
	default:	goto yy49;
	}
yy46:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy124;
	case 'R':	goto yy125;
	default:	goto yy49;
	}
yy47:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy126;
	case 'r':	goto yy127;
	default:	goto yy49;
	}
yy48:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
yy49:
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy41;
	}
yy50:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy128;
	case 'D':	goto yy129;
	case 'M':	goto yy130;
	case 'N':	goto yy131;
	case 'S':	goto yy132;
	default:	goto yy49;
	}
yy51:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy133;
	case 'I':	goto yy134;
	default:	goto yy49;
	}
yy52:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy135;
	case 'U':	goto yy136;
	case 'u':	goto yy137;
	default:	goto yy49;
	}
yy53:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'B':	goto yy138;
	case 'C':	goto yy139;
	case 'F':	goto yy140;
	case 'I':	goto yy142;
	case 'P':	goto yy143;
	case 'b':	goto yy144;
	default:	goto yy49;
	}
yy54:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy145;
	case 'D':	goto yy146;
	case 'L':	goto yy147;
	case 'R':	goto yy148;
	case 'r':	goto yy149;
	default:	goto yy49;
	}
yy55:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy150;
	default:	goto yy49;
	}
yy56:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy151;
	case 'I':	goto yy152;
	case 'T':	goto yy153;
	case 'Y':	goto yy154;
	default:	goto yy49;
	}
yy57:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '6':	goto yy155;
	case 'A':	goto yy156;
	case 'I':	goto yy157;
	case 'R':	goto yy158;
	case 'Y':	goto yy159;
	case 'e':	goto yy160;
	default:	goto yy49;
	}
yy58:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy161;
	case 'T':	goto yy162;
	case 'n':	goto yy163;
	default:	goto yy49;
	}
yy59:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy164;
	default:	goto yy49;
	}
yy60:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy165;
	default:	goto yy49;
	}
yy61:
	++context.cursor;
#line 11679 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_SQUARE_BRACKET (context.location); }
#line 12116 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy63:
	++context.cursor;
#line 11680 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_SQUARE_BRACKET (context.location); }
#line 12121 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy65:
	++context.cursor;
#line 11689 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ACCENT (context.location); }
#line 12126 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy67:
	yyaccept = 3;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy166;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy67;
	default:	goto yy69;
	}
yy69:
#line 11660 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 12200 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy70:
	++context.cursor;
#line 11675 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_BRACE (context.location); }
#line 12205 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy72:
	++context.cursor;
#line 11686 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VERTICAL_LINE (context.location); }
#line 12210 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy74:
	++context.cursor;
#line 11676 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_BRACE (context.location); }
#line 12215 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy76:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy13;
	default:	goto yy77;
	}
yy77:
#line 11654 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_cstring(std::string(start, context.cursor), context.location); }
#line 12225 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy78:
	++context.cursor;
	goto yy77;
yy79:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy167;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy81:
	yyaccept = 4;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy169;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy81;
	default:	goto yy83;
	}
yy83:
#line 11661 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_typefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 12309 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy84:
	yyaccept = 5;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy170;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy84;
	default:	goto yy86;
	}
yy86:
#line 11662 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_valuefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 12383 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy87:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy171;
	case 'H':	goto yy173;
	default:	goto yy77;
	}
yy88:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy175;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy88;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy90:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy92;
	case '-':	goto yy176;
	default:	goto yy90;
	}
yy92:
#line 11645 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 12432 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy93:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy93;
	default:	goto yy95;
	}
yy95:
#line 11652 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_negativenumber(std::stoll(std::string(start, context.cursor)), context.location); }
#line 12451 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy96:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy177;
	default:	goto yy97;
	}
yy97:
#line 11674 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RANGE (context.location); }
#line 12461 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy98:
	yych = *++context.cursor;
	switch (yych) {
	case '*':	goto yy179;
	default:	goto yy98;
	}
yy100:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy181;
	default:	goto yy101;
	}
yy101:
	context.cursor = YYMARKER;
	switch (yyaccept) {
	case 0:
		goto yy31;
	case 1:
		goto yy33;
	case 2:
		goto yy41;
	case 3:
		goto yy69;
	case 4:
		goto yy83;
	case 5:
		goto yy86;
	case 6:
		goto yy114;
	case 7:
		goto yy141;
	case 8:
		goto yy188;
	case 9:
		goto yy190;
	case 10:
		goto yy195;
	case 11:
		goto yy209;
	case 12:
		goto yy226;
	case 13:
		goto yy228;
	case 14:
		goto yy239;
	case 15:
		goto yy248;
	case 16:
		goto yy283;
	case 17:
		goto yy296;
	case 18:
		goto yy310;
	case 19:
		goto yy323;
	case 20:
		goto yy328;
	case 21:
		goto yy333;
	case 22:
		goto yy335;
	case 23:
		goto yy337;
	case 24:
		goto yy349;
	case 25:
		goto yy355;
	case 26:
		goto yy361;
	case 27:
		goto yy378;
	case 28:
		goto yy396;
	case 29:
		goto yy415;
	case 30:
		goto yy424;
	case 31:
		goto yy432;
	case 32:
		goto yy445;
	case 33:
		goto yy467;
	case 34:
		goto yy480;
	case 35:
		goto yy482;
	case 36:
		goto yy488;
	case 37:
		goto yy500;
	case 38:
		goto yy507;
	case 39:
		goto yy512;
	case 40:
		goto yy517;
	case 41:
		goto yy526;
	case 42:
		goto yy528;
	case 43:
		goto yy533;
	case 44:
		goto yy540;
	case 45:
		goto yy544;
	case 46:
		goto yy547;
	case 47:
		goto yy549;
	case 48:
		goto yy560;
	case 49:
		goto yy576;
	case 50:
		goto yy578;
	case 51:
		goto yy582;
	case 52:
		goto yy585;
	case 53:
		goto yy592;
	case 54:
		goto yy594;
	case 55:
		goto yy596;
	case 56:
		goto yy604;
	case 57:
		goto yy610;
	case 58:
		goto yy612;
	case 59:
		goto yy625;
	case 60:
		goto yy627;
	case 61:
		goto yy629;
	case 62:
		goto yy631;
	case 63:
		goto yy635;
	case 64:
		goto yy644;
	case 65:
		goto yy657;
	case 66:
		goto yy662;
	case 67:
		goto yy670;
	case 68:
		goto yy673;
	case 69:
		goto yy677;
	case 70:
		goto yy683;
	case 71:
		goto yy698;
	case 72:
		goto yy704;
	case 73:
		goto yy706;
	case 74:
		goto yy708;
	case 75:
		goto yy725;
	case 76:
		goto yy738;
	case 77:
		goto yy740;
	case 78:
		goto yy742;
	case 79:
		goto yy745;
	case 80:
		goto yy751;
	case 81:
		goto yy760;
	case 82:
		goto yy762;
	case 83:
		goto yy765;
	case 84:
		goto yy768;
	case 85:
		goto yy771;
	case 86:
		goto yy776;
	case 87:
		goto yy780;
	case 88:
		goto yy785;
	case 89:
		goto yy792;
	case 90:
		goto yy794;
	case 91:
		goto yy797;
	case 92:
		goto yy800;
	case 93:
		goto yy803;
	case 94:
		goto yy805;
	case 95:
		goto yy807;
	case 96:
		goto yy809;
	default:
		goto yy811;
	}
yy102:
	yych = *++context.cursor;
	switch (yych) {
	case '=':	goto yy184;
	default:	goto yy101;
	}
yy103:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy101;
	}
yy104:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy186;
	default:	goto yy49;
	}
yy105:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy187;
	default:	goto yy49;
	}
yy106:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy189;
	default:	goto yy49;
	}
yy107:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy191;
	default:	goto yy49;
	}
yy108:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy192;
	default:	goto yy49;
	}
yy109:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy193;
	default:	goto yy49;
	}
yy110:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy194;
	default:	goto yy49;
	}
yy111:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy196;
	default:	goto yy49;
	}
yy112:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy197;
	default:	goto yy49;
	}
yy113:
	yyaccept = 6;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy114;
	}
yy114:
#line 11558 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BY (context.location); }
#line 12893 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy115:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy198;
	case 'O':	goto yy199;
	default:	goto yy49;
	}
yy116:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy200;
	default:	goto yy49;
	}
yy117:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy201;
	case 'N':	goto yy202;
	default:	goto yy49;
	}
yy118:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy203;
	default:	goto yy49;
	}
yy119:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy204;
	default:	goto yy49;
	}
yy120:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy205;
	default:	goto yy49;
	}
yy121:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'B':	goto yy206;
	default:	goto yy49;
	}
yy122:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy207;
	case 'D':	goto yy208;
	case 'U':	goto yy210;
	default:	goto yy49;
	}
yy123:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy211;
	case 'P':	goto yy212;
	case 'T':	goto yy213;
	default:	goto yy49;
	}
yy124:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy214;
	default:	goto yy49;
	}
yy125:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy215;
	default:	goto yy49;
	}
yy126:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy216;
	default:	goto yy49;
	}
yy127:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'a':	goto yy217;
	default:	goto yy49;
	}
yy128:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '5':	goto yy218;
	default:	goto yy49;
	}
yy129:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy219;
	default:	goto yy49;
	}
yy130:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy220;
	default:	goto yy49;
	}
yy131:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy221;
	case 'S':	goto yy222;
	case 'T':	goto yy223;
	default:	goto yy49;
	}
yy132:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy224;
	default:	goto yy49;
	}
yy133:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'X':	goto yy225;
	default:	goto yy49;
	}
yy134:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy227;
	default:	goto yy49;
	}
yy135:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy229;
	default:	goto yy49;
	}
yy136:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy230;
	default:	goto yy49;
	}
yy137:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'm':	goto yy231;
	default:	goto yy49;
	}
yy138:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'J':	goto yy232;
	default:	goto yy49;
	}
yy139:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy233;
	default:	goto yy49;
	}
yy140:
	yyaccept = 7;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy141;
	}
yy141:
#line 11606 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OF (context.location); }
#line 13150 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy142:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy234;
	default:	goto yy49;
	}
yy143:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy235;
	default:	goto yy49;
	}
yy144:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'j':	goto yy236;
	default:	goto yy49;
	}
yy145:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy237;
	default:	goto yy49;
	}
yy146:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'V':	goto yy238;
	default:	goto yy49;
	}
yy147:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy240;
	default:	goto yy49;
	}
yy148:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy241;
	case 'I':	goto yy242;
	default:	goto yy49;
	}
yy149:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy243;
	default:	goto yy49;
	}
yy150:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy244;
	case 'L':	goto yy245;
	default:	goto yy49;
	}
yy151:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Q':	goto yy246;
	case 'T':	goto yy247;
	default:	goto yy49;
	}
yy152:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Z':	goto yy249;
	default:	goto yy49;
	}
yy153:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy250;
	default:	goto yy49;
	}
yy154:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy251;
	default:	goto yy49;
	}
yy155:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '1':	goto yy252;
	default:	goto yy49;
	}
yy156:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy253;
	default:	goto yy49;
	}
yy157:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy254;
	default:	goto yy49;
	}
yy158:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy255;
	default:	goto yy49;
	}
yy159:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy256;
	default:	goto yy49;
	}
yy160:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'l':	goto yy257;
	default:	goto yy49;
	}
yy161:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy258;
	default:	goto yy49;
	}
yy162:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy259;
	case 'F':	goto yy260;
	default:	goto yy49;
	}
yy163:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy261;
	default:	goto yy49;
	}
yy164:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'd':	goto yy262;
	case 's':	goto yy263;
	default:	goto yy49;
	}
yy165:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy264;
	default:	goto yy49;
	}
yy166:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy67;
	default:	goto yy101;
	}
yy167:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy167;
	case '\'':	goto yy78;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy169:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy81;
	default:	goto yy101;
	}
yy170:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy84;
	default:	goto yy101;
	}
yy171:
	++context.cursor;
#line 11656 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_bstring(std::string(start + 1, context.cursor - 2), context.location); }
#line 13540 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy173:
	++context.cursor;
#line 11658 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_hstring(std::string(start + 1, context.cursor - 2), context.location); }
#line 13545 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy175:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy173;
	default:	goto yy77;
	}
yy176:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy92;
	case '-':	goto yy265;
	default:	goto yy90;
	}
yy177:
	++context.cursor;
#line 11673 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ELIPSIS (context.location); }
#line 13564 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy179:
	yych = *++context.cursor;
	switch (yych) {
	case '*':	goto yy179;
	case '/':	goto yy267;
	default:	goto yy98;
	}
yy181:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy181;
	default:	goto yy183;
	}
yy183:
#line 11650 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_realnumber(std::stod(std::string(start, context.cursor)), context.location); }
#line 13590 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy184:
	++context.cursor;
#line 11672 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINED_AS (context.location); }
#line 13595 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy186:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy269;
	case 'T':	goto yy270;
	default:	goto yy49;
	}
yy187:
	yyaccept = 8;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy188;
	}
yy188:
#line 11550 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ALL (context.location); }
#line 13677 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy189:
	yyaccept = 9;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy190;
	}
yy190:
#line 11551 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ANY (context.location); }
#line 13751 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy191:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy271;
	default:	goto yy49;
	}
yy192:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy272;
	default:	goto yy49;
	}
yy193:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy273;
	default:	goto yy49;
	}
yy194:
	yyaccept = 10;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy195;
	}
yy195:
#line 11555 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BIT (context.location); }
#line 13846 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy196:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy274;
	default:	goto yy49;
	}
yy197:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy275;
	default:	goto yy49;
	}
yy198:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy276;
	default:	goto yy49;
	}
yy199:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy277;
	default:	goto yy49;
	}
yy200:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy278;
	default:	goto yy49;
	}
yy201:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy279;
	default:	goto yy49;
	}
yy202:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy280;
	case 'T':	goto yy281;
	default:	goto yy49;
	}
yy203:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy282;
	default:	goto yy49;
	}
yy204:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy284;
	case 'I':	goto yy285;
	default:	goto yy49;
	}
yy205:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy286;
	default:	goto yy49;
	}
yy206:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy287;
	default:	goto yy49;
	}
yy207:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy288;
	default:	goto yy49;
	}
yy208:
	yyaccept = 11;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy209;
	}
yy209:
#line 11574 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END (context.location); }
#line 14006 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy210:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy289;
	default:	goto yy49;
	}
yy211:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy290;
	default:	goto yy49;
	}
yy212:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy291;
	case 'O':	goto yy292;
	default:	goto yy49;
	}
yy213:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy293;
	default:	goto yy49;
	}
yy214:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy294;
	default:	goto yy49;
	}
yy215:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy295;
	default:	goto yy49;
	}
yy216:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy297;
	default:	goto yy49;
	}
yy217:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'p':	goto yy298;
	default:	goto yy49;
	}
yy218:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy299;
	default:	goto yy49;
	}
yy219:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy300;
	default:	goto yy49;
	}
yy220:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy301;
	case 'O':	goto yy302;
	default:	goto yy49;
	}
yy221:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy303;
	default:	goto yy49;
	}
yy222:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy304;
	default:	goto yy49;
	}
yy223:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy305;
	default:	goto yy49;
	}
yy224:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '6':	goto yy306;
	default:	goto yy49;
	}
yy225:
	yyaccept = 12;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy226;
	}
yy226:
#line 11597 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MAX (context.location); }
#line 14187 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy227:
	yyaccept = 13;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'U':	goto yy307;
	default:	goto yy228;
	}
yy228:
#line 11598 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MIN (context.location); }
#line 14261 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy229:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy308;
	default:	goto yy49;
	}
yy230:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy309;
	default:	goto yy49;
	}
yy231:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy311;
	default:	goto yy49;
	}
yy232:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy312;
	default:	goto yy49;
	}
yy233:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy313;
	default:	goto yy49;
	}
yy234:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '_':	goto yy314;
	default:	goto yy49;
	}
yy235:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy315;
	default:	goto yy49;
	}
yy236:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy316;
	default:	goto yy49;
	}
yy237:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy317;
	default:	goto yy49;
	}
yy238:
	yyaccept = 14;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy239;
	}
yy239:
#line 11610 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PDV (context.location); }
#line 14398 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy240:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy318;
	default:	goto yy49;
	}
yy241:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy319;
	default:	goto yy49;
	}
yy242:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'V':	goto yy320;
	default:	goto yy49;
	}
yy243:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy321;
	default:	goto yy49;
	}
yy244:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy322;
	default:	goto yy49;
	}
yy245:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy324;
	default:	goto yy49;
	}
yy246:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy325;
	default:	goto yy49;
	}
yy247:
	yyaccept = 15;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'T':	goto yy326;
	default:	goto yy248;
	}
yy248:
#line 11619 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SET (context.location); }
#line 14521 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy249:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy327;
	default:	goto yy49;
	}
yy250:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy329;
	default:	goto yy49;
	}
yy251:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy330;
	default:	goto yy49;
	}
yy252:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy331;
	default:	goto yy49;
	}
yy253:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy332;
	default:	goto yy49;
	}
yy254:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy334;
	default:	goto yy49;
	}
yy255:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy336;
	default:	goto yy49;
	}
yy256:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy338;
	default:	goto yy49;
	}
yy257:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy339;
	default:	goto yy49;
	}
yy258:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy340;
	case 'Q':	goto yy341;
	case 'V':	goto yy342;
	default:	goto yy49;
	}
yy259:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy343;
	default:	goto yy49;
	}
yy260:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '8':	goto yy344;
	default:	goto yy49;
	}
yy261:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'v':	goto yy345;
	default:	goto yy49;
	}
yy262:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy346;
	default:	goto yy49;
	}
yy263:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy347;
	default:	goto yy49;
	}
yy264:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'H':	goto yy348;
	default:	goto yy49;
	}
yy265:
	++context.cursor;
#line 11643 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 14640 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy267:
	++context.cursor;
#line 11647 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ for (char c: std::string(start, context.cursor)) { context.location.columns(); if (c == '\n') context.location.lines(); } return yylex(context); }
#line 14645 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy269:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy350;
	default:	goto yy49;
	}
yy270:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy351;
	default:	goto yy49;
	}
yy271:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy352;
	default:	goto yy49;
	}
yy272:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy353;
	default:	goto yy49;
	}
yy273:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy354;
	default:	goto yy49;
	}
yy274:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy356;
	default:	goto yy49;
	}
yy275:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy357;
	default:	goto yy49;
	}
yy276:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy358;
	default:	goto yy49;
	}
yy277:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy359;
	default:	goto yy49;
	}
yy278:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy360;
	default:	goto yy49;
	}
yy279:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy362;
	default:	goto yy49;
	}
yy280:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy363;
	default:	goto yy49;
	}
yy281:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy364;
	default:	goto yy49;
	}
yy282:
	yyaccept = 16;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy365;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy283;
	}
yy283:
#line 11566 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE (context.location); }
#line 14810 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy284:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy366;
	default:	goto yy49;
	}
yy285:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy367;
	default:	goto yy49;
	}
yy286:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy368;
	default:	goto yy49;
	}
yy287:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy369;
	default:	goto yy49;
	}
yy288:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy370;
	default:	goto yy49;
	}
yy289:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy371;
	default:	goto yy49;
	}
yy290:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy372;
	default:	goto yy49;
	}
yy291:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy373;
	default:	goto yy49;
	}
yy292:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy374;
	default:	goto yy49;
	}
yy293:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy375;
	case 'R':	goto yy376;
	default:	goto yy49;
	}
yy294:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy377;
	default:	goto yy49;
	}
yy295:
	yyaccept = 17;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy296;
	}
yy296:
#line 11582 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FROM (context.location); }
#line 14962 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy297:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy379;
	default:	goto yy49;
	}
yy298:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'h':	goto yy380;
	default:	goto yy49;
	}
yy299:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy381;
	default:	goto yy49;
	}
yy300:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy382;
	default:	goto yy49;
	}
yy301:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy383;
	default:	goto yy49;
	}
yy302:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy384;
	default:	goto yy49;
	}
yy303:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy385;
	default:	goto yy49;
	}
yy304:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy386;
	case 'R':	goto yy387;
	default:	goto yy49;
	}
yy305:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy388;
	case 'R':	goto yy389;
	default:	goto yy49;
	}
yy306:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '4':	goto yy390;
	default:	goto yy49;
	}
yy307:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy391;
	default:	goto yy49;
	}
yy308:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'A':	goto yy392;
	default:	goto yy101;
	}
yy309:
	yyaccept = 18;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy310;
	}
yy310:
#line 11601 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ASN_NULL (context.location); }
#line 15183 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy311:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy393;
	default:	goto yy49;
	}
yy312:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy394;
	default:	goto yy49;
	}
yy313:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy395;
	default:	goto yy49;
	}
yy314:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy397;
	default:	goto yy49;
	}
yy315:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy398;
	default:	goto yy49;
	}
yy316:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'c':	goto yy399;
	default:	goto yy49;
	}
yy317:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy400;
	default:	goto yy49;
	}
yy318:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '_':	goto yy401;
	default:	goto yy49;
	}
yy319:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy402;
	default:	goto yy49;
	}
yy320:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy403;
	default:	goto yy49;
	}
yy321:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy404;
	default:	goto yy49;
	}
yy322:
	yyaccept = 19;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy323;
	}
yy323:
#line 11615 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_REAL (context.location); }
#line 15334 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy324:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy405;
	default:	goto yy49;
	}
yy325:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy406;
	default:	goto yy49;
	}
yy326:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy407;
	default:	goto yy49;
	}
yy327:
	yyaccept = 20;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy328;
	}
yy328:
#line 11621 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SIZE (context.location); }
#line 15429 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy329:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy408;
	default:	goto yy49;
	}
yy330:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy409;
	default:	goto yy49;
	}
yy331:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy410;
	default:	goto yy49;
	}
yy332:
	yyaccept = 21;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy333;
	}
yy333:
#line 11625 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TAGS (context.location); }
#line 15524 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy334:
	yyaccept = 22;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy411;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy335;
	}
yy335:
#line 11627 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME (context.location); }
#line 15598 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy336:
	yyaccept = 23;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy337;
	}
yy337:
#line 11629 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TRUE (context.location); }
#line 15672 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy338:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy412;
	default:	goto yy49;
	}
yy339:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy413;
	default:	goto yy49;
	}
yy340:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy414;
	default:	goto yy49;
	}
yy341:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy416;
	default:	goto yy49;
	}
yy342:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy417;
	default:	goto yy49;
	}
yy343:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy418;
	default:	goto yy49;
	}
yy344:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy419;
	default:	goto yy49;
	}
yy345:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy420;
	default:	goto yy49;
	}
yy346:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'o':	goto yy421;
	default:	goto yy49;
	}
yy347:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'b':	goto yy422;
	default:	goto yy49;
	}
yy348:
	yyaccept = 24;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy349;
	}
yy349:
#line 11639 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_WITH (context.location); }
#line 15816 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy350:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy423;
	default:	goto yy49;
	}
yy351:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy425;
	default:	goto yy49;
	}
yy352:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy426;
	default:	goto yy49;
	}
yy353:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy427;
	default:	goto yy49;
	}
yy354:
	yyaccept = 25;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy355;
	}
yy355:
#line 11554 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BEGIN (context.location); }
#line 15918 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy356:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy428;
	default:	goto yy49;
	}
yy357:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy429;
	default:	goto yy49;
	}
yy358:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy430;
	default:	goto yy49;
	}
yy359:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy431;
	default:	goto yy49;
	}
yy360:
	yyaccept = 26;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy361;
	}
yy361:
#line 11561 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLASS (context.location); }
#line 16020 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy362:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy433;
	default:	goto yy49;
	}
yy363:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy434;
	default:	goto yy49;
	}
yy364:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy435;
	default:	goto yy49;
	}
yy365:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'T':	goto yy436;
	default:	goto yy101;
	}
yy366:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy437;
	default:	goto yy49;
	}
yy367:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy438;
	default:	goto yy49;
	}
yy368:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy439;
	default:	goto yy49;
	}
yy369:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy440;
	default:	goto yy49;
	}
yy370:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy441;
	case 'I':	goto yy442;
	default:	goto yy49;
	}
yy371:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy443;
	default:	goto yy49;
	}
yy372:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy444;
	default:	goto yy49;
	}
yy373:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy446;
	default:	goto yy49;
	}
yy374:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy447;
	default:	goto yy49;
	}
yy375:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy448;
	default:	goto yy49;
	}
yy376:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy449;
	default:	goto yy49;
	}
yy377:
	yyaccept = 27;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy378;
	}
yy378:
#line 11581 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FALSE (context.location); }
#line 16261 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy379:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'a':	goto yy450;
	default:	goto yy49;
	}
yy380:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy451;
	default:	goto yy49;
	}
yy381:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy452;
	default:	goto yy49;
	}
yy382:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy453;
	default:	goto yy49;
	}
yy383:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy454;
	case 'E':	goto yy455;
	default:	goto yy49;
	}
yy384:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy456;
	default:	goto yy49;
	}
yy385:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy457;
	default:	goto yy49;
	}
yy386:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy458;
	default:	goto yy49;
	}
yy387:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy459;
	default:	goto yy49;
	}
yy388:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy460;
	default:	goto yy49;
	}
yy389:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy461;
	default:	goto yy49;
	}
yy390:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '6':	goto yy462;
	default:	goto yy49;
	}
yy391:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy463;
	default:	goto yy49;
	}
yy392:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy464;
	default:	goto yy49;
	}
yy393:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy465;
	default:	goto yy49;
	}
yy394:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy466;
	default:	goto yy49;
	}
yy395:
	yyaccept = 28;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy396;
	}
yy396:
#line 11605 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OCTET (context.location); }
#line 16448 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy397:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy468;
	default:	goto yy49;
	}
yy398:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy469;
	default:	goto yy49;
	}
yy399:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy470;
	default:	goto yy49;
	}
yy400:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy471;
	default:	goto yy49;
	}
yy401:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy472;
	default:	goto yy49;
	}
yy402:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy473;
	default:	goto yy49;
	}
yy403:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy474;
	default:	goto yy49;
	}
yy404:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'a':	goto yy475;
	default:	goto yy49;
	}
yy405:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy476;
	default:	goto yy49;
	}
yy406:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy477;
	default:	goto yy49;
	}
yy407:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy478;
	default:	goto yy49;
	}
yy408:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy479;
	default:	goto yy49;
	}
yy409:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'X':	goto yy481;
	default:	goto yy49;
	}
yy410:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy483;
	default:	goto yy49;
	}
yy411:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'O':	goto yy484;
	default:	goto yy101;
	}
yy412:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'I':	goto yy485;
	default:	goto yy101;
	}
yy413:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy486;
	default:	goto yy49;
	}
yy414:
	yyaccept = 29;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy415;
	}
yy415:
#line 11631 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNION (context.location); }
#line 16763 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy416:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy487;
	default:	goto yy49;
	}
yy417:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy489;
	default:	goto yy49;
	}
yy418:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'm':	goto yy490;
	default:	goto yy49;
	}
yy419:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy491;
	default:	goto yy49;
	}
yy420:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy492;
	default:	goto yy49;
	}
yy421:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy493;
	default:	goto yy49;
	}
yy422:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'l':	goto yy494;
	default:	goto yy49;
	}
yy423:
	yyaccept = 30;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy424;
	}
yy424:
#line 11548 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSENT (context.location); }
#line 16886 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy425:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy495;
	default:	goto yy49;
	}
yy426:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy496;
	default:	goto yy49;
	}
yy427:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy497;
	default:	goto yy49;
	}
yy428:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy498;
	default:	goto yy49;
	}
yy429:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy499;
	default:	goto yy49;
	}
yy430:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy501;
	default:	goto yy49;
	}
yy431:
	yyaccept = 31;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy432;
	}
yy432:
#line 11560 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHOICE (context.location); }
#line 17002 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy433:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy502;
	default:	goto yy49;
	}
yy434:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy503;
	default:	goto yy49;
	}
yy435:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy504;
	default:	goto yy49;
	}
yy436:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy505;
	default:	goto yy49;
	}
yy437:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy506;
	default:	goto yy49;
	}
yy438:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy508;
	default:	goto yy49;
	}
yy439:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy509;
	default:	goto yy49;
	}
yy440:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy510;
	default:	goto yy49;
	}
yy441:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy511;
	default:	goto yy49;
	}
yy442:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy513;
	default:	goto yy49;
	}
yy443:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy514;
	default:	goto yy49;
	}
yy444:
	yyaccept = 32;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy445;
	}
yy445:
#line 11576 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCEPT (context.location); }
#line 17153 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy446:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy515;
	default:	goto yy49;
	}
yy447:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy516;
	default:	goto yy49;
	}
yy448:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy518;
	default:	goto yy49;
	}
yy449:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy519;
	default:	goto yy49;
	}
yy450:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'l':	goto yy520;
	default:	goto yy49;
	}
yy451:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'c':	goto yy521;
	default:	goto yy49;
	}
yy452:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy522;
	default:	goto yy49;
	}
yy453:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy523;
	default:	goto yy49;
	}
yy454:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy524;
	default:	goto yy49;
	}
yy455:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy525;
	default:	goto yy49;
	}
yy456:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy527;
	default:	goto yy49;
	}
yy457:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy529;
	default:	goto yy49;
	}
yy458:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy530;
	default:	goto yy49;
	}
yy459:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy531;
	default:	goto yy49;
	}
yy460:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy532;
	default:	goto yy49;
	}
yy461:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy534;
	default:	goto yy49;
	}
yy462:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy535;
	default:	goto yy49;
	}
yy463:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'I':	goto yy536;
	default:	goto yy101;
	}
yy464:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'N':	goto yy537;
	default:	goto yy101;
	}
yy465:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'c':	goto yy538;
	default:	goto yy49;
	}
yy466:
	yyaccept = 33;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy467;
	}
yy467:
#line 11603 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OBJECT (context.location); }
#line 17489 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy468:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy539;
	default:	goto yy49;
	}
yy469:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy541;
	default:	goto yy49;
	}
yy470:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy542;
	default:	goto yy49;
	}
yy471:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy543;
	default:	goto yy49;
	}
yy472:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy545;
	default:	goto yy49;
	}
yy473:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy546;
	default:	goto yy49;
	}
yy474:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy548;
	default:	goto yy49;
	}
yy475:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'b':	goto yy550;
	default:	goto yy49;
	}
yy476:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'V':	goto yy551;
	default:	goto yy49;
	}
yy477:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy552;
	default:	goto yy49;
	}
yy478:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy553;
	default:	goto yy49;
	}
yy479:
	yyaccept = 34;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy480;
	}
yy480:
#line 11622 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_STRING (context.location); }
#line 17640 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy481:
	yyaccept = 35;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy482;
	}
yy482:
#line 11623 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SYNTAX (context.location); }
#line 17714 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy483:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy554;
	default:	goto yy49;
	}
yy484:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy555;
	default:	goto yy49;
	}
yy485:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy556;
	default:	goto yy49;
	}
yy486:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'x':	goto yy557;
	default:	goto yy49;
	}
yy487:
	yyaccept = 36;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy488;
	}
yy488:
#line 11632 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIQUE (context.location); }
#line 17816 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy489:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy558;
	default:	goto yy49;
	}
yy490:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy559;
	default:	goto yy49;
	}
yy491:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy561;
	default:	goto yy49;
	}
yy492:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 's':	goto yy562;
	default:	goto yy49;
	}
yy493:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy563;
	default:	goto yy49;
	}
yy494:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy564;
	default:	goto yy49;
	}
yy495:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy565;
	default:	goto yy49;
	}
yy496:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy566;
	default:	goto yy49;
	}
yy497:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy567;
	default:	goto yy49;
	}
yy498:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy568;
	default:	goto yy49;
	}
yy499:
	yyaccept = 37;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy500;
	}
yy500:
#line 11557 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BOOLEAN (context.location); }
#line 17960 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy501:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy569;
	default:	goto yy49;
	}
yy502:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy570;
	default:	goto yy49;
	}
yy503:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy571;
	default:	goto yy49;
	}
yy504:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy572;
	default:	goto yy49;
	}
yy505:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy573;
	default:	goto yy49;
	}
yy506:
	yyaccept = 38;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy507;
	}
yy507:
#line 11568 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFAULT (context.location); }
#line 18069 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy508:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy574;
	default:	goto yy49;
	}
yy509:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy575;
	default:	goto yy49;
	}
yy510:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy577;
	default:	goto yy49;
	}
yy511:
	yyaccept = 39;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy512;
	}
yy512:
#line 11572 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODED (context.location); }
#line 18164 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy513:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy579;
	default:	goto yy49;
	}
yy514:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy580;
	default:	goto yy49;
	}
yy515:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy581;
	default:	goto yy49;
	}
yy516:
	yyaccept = 40;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy517;
	}
yy517:
#line 11578 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPORTS (context.location); }
#line 18259 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy518:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'B':	goto yy583;
	default:	goto yy49;
	}
yy519:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy584;
	default:	goto yy49;
	}
yy520:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy586;
	case 'i':	goto yy587;
	default:	goto yy49;
	}
yy521:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy588;
	default:	goto yy49;
	}
yy522:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy589;
	default:	goto yy49;
	}
yy523:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy590;
	default:	goto yy49;
	}
yy524:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy591;
	default:	goto yy49;
	}
yy525:
	yyaccept = 41;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy526;
	}
yy526:
#line 11589 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLIED (context.location); }
#line 18383 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy527:
	yyaccept = 42;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy528;
	}
yy528:
#line 11590 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPORTS (context.location); }
#line 18457 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy529:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy593;
	default:	goto yy49;
	}
yy530:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy595;
	default:	goto yy49;
	}
yy531:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy597;
	default:	goto yy49;
	}
yy532:
	yyaccept = 43;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy533;
	}
yy533:
#line 11594 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTEGER (context.location); }
#line 18552 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy534:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy598;
	default:	goto yy49;
	}
yy535:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy599;
	default:	goto yy49;
	}
yy536:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy600;
	default:	goto yy49;
	}
yy537:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy601;
	default:	goto yy49;
	}
yy538:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy602;
	default:	goto yy49;
	}
yy539:
	yyaccept = 44;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy540;
	}
yy540:
#line 11607 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OID_IRI (context.location); }
#line 18661 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy541:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy603;
	default:	goto yy49;
	}
yy542:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy605;
	default:	goto yy49;
	}
yy543:
	yyaccept = 45;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy544;
	}
yy544:
#line 11609 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PATTERN (context.location); }
#line 18749 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy545:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy606;
	default:	goto yy49;
	}
yy546:
	yyaccept = 46;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy547;
	}
yy547:
#line 11612 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRESENT (context.location); }
#line 18830 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy548:
	yyaccept = 47;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy549;
	}
yy549:
#line 11614 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRIVATE (context.location); }
#line 18904 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy550:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'l':	goto yy607;
	default:	goto yy49;
	}
yy551:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy608;
	default:	goto yy49;
	}
yy552:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy609;
	default:	goto yy49;
	}
yy553:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy611;
	default:	goto yy49;
	}
yy554:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy613;
	default:	goto yy49;
	}
yy555:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy614;
	default:	goto yy49;
	}
yy556:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy615;
	default:	goto yy49;
	}
yy557:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy616;
	default:	goto yy49;
	}
yy558:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy617;
	default:	goto yy49;
	}
yy559:
	yyaccept = 48;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy560;
	}
yy560:
#line 11635 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTCTime (context.location); }
#line 19041 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy561:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy618;
	default:	goto yy49;
	}
yy562:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'a':	goto yy619;
	default:	goto yy49;
	}
yy563:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'x':	goto yy620;
	default:	goto yy49;
	}
yy564:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy621;
	default:	goto yy49;
	}
yy565:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy622;
	default:	goto yy49;
	}
yy566:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy623;
	default:	goto yy49;
	}
yy567:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy624;
	default:	goto yy49;
	}
yy568:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy626;
	default:	goto yy49;
	}
yy569:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy628;
	default:	goto yy49;
	}
yy570:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy630;
	default:	goto yy49;
	}
yy571:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy632;
	default:	goto yy49;
	}
yy572:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy633;
	default:	goto yy49;
	}
yy573:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy634;
	default:	goto yy49;
	}
yy574:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy636;
	default:	goto yy49;
	}
yy575:
	yyaccept = 49;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy576;
	}
yy576:
#line 11570 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DURATION (context.location); }
#line 19213 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy577:
	yyaccept = 50;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy578;
	}
yy578:
#line 11571 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EMBEDDED (context.location); }
#line 19287 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy579:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '_':	goto yy637;
	default:	goto yy49;
	}
yy580:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy638;
	default:	goto yy49;
	}
yy581:
	yyaccept = 51;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy582;
	}
yy582:
#line 11577 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPLICIT (context.location); }
#line 19375 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy583:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy639;
	default:	goto yy49;
	}
yy584:
	yyaccept = 52;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy585;
	}
yy585:
#line 11580 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTERNAL (context.location); }
#line 19456 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy586:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy640;
	default:	goto yy49;
	}
yy587:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'z':	goto yy641;
	default:	goto yy49;
	}
yy588:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy642;
	default:	goto yy49;
	}
yy589:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy643;
	default:	goto yy49;
	}
yy590:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy645;
	default:	goto yy49;
	}
yy591:
	yyaccept = 53;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy592;
	}
yy592:
#line 11588 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLICIT (context.location); }
#line 19565 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy593:
	yyaccept = 54;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy594;
	}
yy594:
#line 11591 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INCLUDES (context.location); }
#line 19639 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy595:
	yyaccept = 55;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy596;
	}
yy596:
#line 11592 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTANCE (context.location); }
#line 19713 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy597:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy646;
	default:	goto yy49;
	}
yy598:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy647;
	default:	goto yy49;
	}
yy599:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy648;
	default:	goto yy49;
	}
yy600:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy649;
	default:	goto yy49;
	}
yy601:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy650;
	default:	goto yy49;
	}
yy602:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy651;
	default:	goto yy49;
	}
yy603:
	yyaccept = 56;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy604;
	}
yy604:
#line 11608 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPTIONAL (context.location); }
#line 19829 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy605:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 's':	goto yy652;
	default:	goto yy49;
	}
yy606:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy653;
	default:	goto yy49;
	}
yy607:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy654;
	default:	goto yy49;
	}
yy608:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy655;
	default:	goto yy49;
	}
yy609:
	yyaccept = 57;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy610;
	}
yy610:
#line 11618 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEQUENCE (context.location); }
#line 19931 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy611:
	yyaccept = 58;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy612;
	}
yy612:
#line 11620 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SETTINGS (context.location); }
#line 20005 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy613:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy656;
	default:	goto yy49;
	}
yy614:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'D':	goto yy658;
	default:	goto yy101;
	}
yy615:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy659;
	default:	goto yy49;
	}
yy616:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy660;
	default:	goto yy49;
	}
yy617:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy661;
	default:	goto yy49;
	}
yy618:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy663;
	default:	goto yy49;
	}
yy619:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'l':	goto yy664;
	default:	goto yy49;
	}
yy620:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy665;
	default:	goto yy49;
	}
yy621:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy666;
	default:	goto yy49;
	}
yy622:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'S':	goto yy667;
	default:	goto yy101;
	}
yy623:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy668;
	default:	goto yy49;
	}
yy624:
	yyaccept = 59;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy625;
	}
yy625:
#line 11553 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AUTOMATIC (context.location); }
#line 20278 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy626:
	yyaccept = 60;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy627;
	}
yy627:
#line 11556 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BMPString (context.location); }
#line 20352 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy628:
	yyaccept = 61;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy629;
	}
yy629:
#line 11559 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHARACTER (context.location); }
#line 20426 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy630:
	yyaccept = 62;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'S':	goto yy669;
	default:	goto yy631;
	}
yy631:
#line 11562 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENT (context.location); }
#line 20500 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy632:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy671;
	default:	goto yy49;
	}
yy633:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy672;
	default:	goto yy49;
	}
yy634:
	yyaccept = 63;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy635;
	}
yy635:
#line 11567 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE_TIME (context.location); }
#line 20588 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy636:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy674;
	default:	goto yy49;
	}
yy637:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy675;
	default:	goto yy49;
	}
yy638:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy676;
	default:	goto yy49;
	}
yy639:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy678;
	default:	goto yy49;
	}
yy640:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy679;
	default:	goto yy49;
	}
yy641:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy680;
	default:	goto yy49;
	}
yy642:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy681;
	default:	goto yy49;
	}
yy643:
	yyaccept = 64;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy644;
	}
yy644:
#line 11586 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IA5String (context.location); }
#line 20711 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy645:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy682;
	default:	goto yy49;
	}
yy646:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy684;
	default:	goto yy49;
	}
yy647:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy685;
	default:	goto yy49;
	}
yy648:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy686;
	default:	goto yy49;
	}
yy649:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy687;
	default:	goto yy49;
	}
yy650:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'B':	goto yy688;
	default:	goto yy49;
	}
yy651:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy689;
	default:	goto yy49;
	}
yy652:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'c':	goto yy690;
	default:	goto yy49;
	}
yy653:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy691;
	default:	goto yy49;
	}
yy654:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy692;
	default:	goto yy49;
	}
yy655:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'O':	goto yy693;
	default:	goto yy101;
	}
yy656:
	yyaccept = 65;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy657;
	}
yy657:
#line 11624 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_T61String (context.location); }
#line 20923 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy658:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy694;
	default:	goto yy49;
	}
yy659:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy695;
	default:	goto yy49;
	}
yy660:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy696;
	default:	goto yy49;
	}
yy661:
	yyaccept = 66;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy662;
	}
yy662:
#line 11633 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIVERSAL (context.location); }
#line 21018 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy663:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy697;
	default:	goto yy49;
	}
yy664:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy699;
	default:	goto yy49;
	}
yy665:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy700;
	default:	goto yy49;
	}
yy666:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy701;
	default:	goto yy49;
	}
yy667:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy702;
	default:	goto yy49;
	}
yy668:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy703;
	default:	goto yy49;
	}
yy669:
	yyaccept = 67;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy670;
	}
yy670:
#line 11563 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENTS (context.location); }
#line 21134 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy671:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy705;
	default:	goto yy49;
	}
yy672:
	yyaccept = 68;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy673;
	}
yy673:
#line 11565 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONTAINING (context.location); }
#line 21215 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy674:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy707;
	default:	goto yy49;
	}
yy675:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy709;
	default:	goto yy49;
	}
yy676:
	yyaccept = 69;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy677;
	}
yy677:
#line 11575 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENUMERATED (context.location); }
#line 21303 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy678:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy710;
	default:	goto yy49;
	}
yy679:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy711;
	default:	goto yy49;
	}
yy680:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'd':	goto yy712;
	default:	goto yy49;
	}
yy681:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy713;
	default:	goto yy49;
	}
yy682:
	yyaccept = 70;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy683;
	}
yy683:
#line 11587 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IDENTIFIER (context.location); }
#line 21405 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy684:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy714;
	default:	goto yy49;
	}
yy685:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy715;
	default:	goto yy49;
	}
yy686:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy716;
	default:	goto yy49;
	}
yy687:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy717;
	default:	goto yy49;
	}
yy688:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy718;
	default:	goto yy49;
	}
yy689:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy719;
	default:	goto yy49;
	}
yy690:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy720;
	default:	goto yy49;
	}
yy691:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy721;
	default:	goto yy49;
	}
yy692:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy722;
	default:	goto yy49;
	}
yy693:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy723;
	default:	goto yy49;
	}
yy694:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy724;
	default:	goto yy49;
	}
yy695:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy726;
	default:	goto yy49;
	}
yy696:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy727;
	default:	goto yy49;
	}
yy697:
	yyaccept = 71;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy698;
	}
yy698:
#line 11636 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTF8String (context.location); }
#line 21570 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy699:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy728;
	default:	goto yy49;
	}
yy700:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy729;
	default:	goto yy49;
	}
yy701:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy730;
	default:	goto yy49;
	}
yy702:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy731;
	default:	goto yy49;
	}
yy703:
	yyaccept = 72;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy704;
	}
yy704:
#line 11552 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_APPLICATION (context.location); }
#line 21672 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy705:
	yyaccept = 73;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy706;
	}
yy706:
#line 11564 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONSTRAINED (context.location); }
#line 21746 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy707:
	yyaccept = 74;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy708;
	}
yy708:
#line 11569 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINITIONS (context.location); }
#line 21820 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy709:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy732;
	default:	goto yy49;
	}
yy710:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy733;
	default:	goto yy49;
	}
yy711:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy734;
	default:	goto yy49;
	}
yy712:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy735;
	default:	goto yy49;
	}
yy713:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy736;
	default:	goto yy49;
	}
yy714:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy737;
	default:	goto yy49;
	}
yy715:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy739;
	default:	goto yy49;
	}
yy716:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy741;
	default:	goto yy49;
	}
yy717:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy743;
	default:	goto yy49;
	}
yy718:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy744;
	default:	goto yy49;
	}
yy719:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy746;
	default:	goto yy49;
	}
yy720:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy747;
	default:	goto yy49;
	}
yy721:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy748;
	default:	goto yy49;
	}
yy722:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy749;
	default:	goto yy49;
	}
yy723:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy750;
	default:	goto yy49;
	}
yy724:
	yyaccept = 75;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy725;
	}
yy725:
#line 11628 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME_OF_DAY (context.location); }
#line 21999 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy726:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy752;
	default:	goto yy49;
	}
yy727:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy753;
	default:	goto yy49;
	}
yy728:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy754;
	default:	goto yy49;
	}
yy729:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy755;
	default:	goto yy49;
	}
yy730:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy756;
	default:	goto yy49;
	}
yy731:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy757;
	default:	goto yy49;
	}
yy732:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy758;
	default:	goto yy49;
	}
yy733:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy759;
	default:	goto yy49;
	}
yy734:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy761;
	default:	goto yy49;
	}
yy735:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy763;
	default:	goto yy49;
	}
yy736:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy764;
	default:	goto yy49;
	}
yy737:
	yyaccept = 76;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy738;
	}
yy738:
#line 11593 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTRUCTIONS (context.location); }
#line 22150 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy739:
	yyaccept = 77;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy740;
	}
yy740:
#line 11595 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTERSECTION (context.location); }
#line 22224 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy741:
	yyaccept = 78;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy742;
	}
yy742:
#line 11596 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ISO646String (context.location); }
#line 22298 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy743:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy766;
	default:	goto yy49;
	}
yy744:
	yyaccept = 79;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy745;
	}
yy745:
#line 11600 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NOT_A_NUMBER (context.location); }
#line 22379 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy746:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy767;
	default:	goto yy49;
	}
yy747:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'p':	goto yy769;
	default:	goto yy49;
	}
yy748:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy770;
	default:	goto yy49;
	}
yy749:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy772;
	default:	goto yy49;
	}
yy750:
	yyaccept = 80;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy773;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy751;
	}
yy751:
#line 11616 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID (context.location); }
#line 22481 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy752:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy774;
	default:	goto yy49;
	}
yy753:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy775;
	default:	goto yy49;
	}
yy754:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy777;
	default:	goto yy49;
	}
yy755:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy778;
	default:	goto yy49;
	}
yy756:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy779;
	default:	goto yy49;
	}
yy757:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy781;
	default:	goto yy49;
	}
yy758:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy782;
	default:	goto yy49;
	}
yy759:
	yyaccept = 81;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy760;
	}
yy760:
#line 11579 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTENSIBILITY (context.location); }
#line 22604 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy761:
	yyaccept = 82;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy762;
	}
yy762:
#line 11584 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralString (context.location); }
#line 22678 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy763:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'm':	goto yy783;
	default:	goto yy49;
	}
yy764:
	yyaccept = 83;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy765;
	}
yy765:
#line 11585 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GraphicString (context.location); }
#line 22759 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy766:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy784;
	default:	goto yy49;
	}
yy767:
	yyaccept = 84;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy768;
	}
yy768:
#line 11602 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NumericString (context.location); }
#line 22840 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy769:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy786;
	default:	goto yy49;
	}
yy770:
	yyaccept = 85;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy771;
	}
yy771:
#line 11611 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PLUS_INFINITY (context.location); }
#line 22921 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy772:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy787;
	default:	goto yy49;
	}
yy773:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'I':	goto yy788;
	default:	goto yy101;
	}
yy774:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy789;
	default:	goto yy49;
	}
yy775:
	yyaccept = 86;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy776;
	}
yy776:
#line 11626 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TeletexString (context.location); }
#line 23077 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy777:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy790;
	default:	goto yy49;
	}
yy778:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy791;
	default:	goto yy49;
	}
yy779:
	yyaccept = 87;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy780;
	}
yy780:
#line 11638 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VisibleString (context.location); }
#line 23165 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy781:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'X':	goto yy793;
	default:	goto yy49;
	}
yy782:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy795;
	default:	goto yy49;
	}
yy783:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy796;
	default:	goto yy49;
	}
yy784:
	yyaccept = 88;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy785;
	}
yy785:
#line 11599 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MINUS_INFINITY (context.location); }
#line 23260 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy786:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'o':	goto yy798;
	default:	goto yy49;
	}
yy787:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy799;
	default:	goto yy49;
	}
yy788:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy801;
	default:	goto yy49;
	}
yy789:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy802;
	default:	goto yy49;
	}
yy790:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy804;
	default:	goto yy49;
	}
yy791:
	yyaccept = 89;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy792;
	}
yy792:
#line 11637 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VideotexString (context.location); }
#line 23369 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy793:
	yyaccept = 90;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy794;
	}
yy794:
#line 11549 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSTRACT_SYNTAX (context.location); }
#line 23443 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy795:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy806;
	default:	goto yy49;
	}
yy796:
	yyaccept = 91;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy797;
	}
yy797:
#line 11583 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralizedTime (context.location); }
#line 23524 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy798:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy808;
	default:	goto yy49;
	}
yy799:
	yyaccept = 92;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy800;
	}
yy800:
#line 11613 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PrintableString (context.location); }
#line 23605 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy801:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy810;
	default:	goto yy49;
	}
yy802:
	yyaccept = 93;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy803;
	}
yy803:
#line 11630 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TYPE_IDENTIFIER (context.location); }
#line 23686 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy804:
	yyaccept = 94;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy805;
	}
yy805:
#line 11634 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UniversalString (context.location); }
#line 23760 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy806:
	yyaccept = 95;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy807;
	}
yy807:
#line 11573 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODING_CONTROL (context.location); }
#line 23834 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy808:
	yyaccept = 96;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy809;
	}
yy809:
#line 11604 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ObjectDescriptor (context.location); }
#line 23908 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
yy810:
	yyaccept = 97;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy811;
	}
yy811:
#line 11617 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID_IRI (context.location); }
#line 23982 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.hpp"
}
#line 11692 "/home/styler/git/fast_ber/build_debug/src/autogen/asn_compiler.re"

    }
}
