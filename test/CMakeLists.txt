project(fast_ber_tests)

include(${CMAKE_SOURCE_DIR}/cmake/fast_ber_generate.cmake)
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/autogen)

function(fast_ber_generate2 input_file1 input_file2 output_name)
    add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/autogen/${output_name}.hpp
        COMMAND fast_ber_compiler ${input_file1} ${input_file2} ${CMAKE_CURRENT_BINARY_DIR}/autogen/${output_name}
        DEPENDS fast_ber_compiler ${input_file1} ${input_file2}
    )
endfunction(fast_ber_generate2)

fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/simple5.asn simple)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/choice.asn choice)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/tags.asn tags)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/prefixed_types.asn prefixed_types)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/enumeration.asn enum)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/object_identifier.asn object_identifier)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/top_level_encodings.asn top_level_encodings)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/all_types_test.asn all_types)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/import.asn import)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/value_assignment.asn value_assign)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/embedded.asn embedded)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/parameterized_types.asn parameterized_types)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/sequence_of.asn sequence_of)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/time.asn time)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/circular.asn circular)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/defaults.asn defaults)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/anonymous_members.asn anonymous_members)
fast_ber_generate(${CMAKE_SOURCE_DIR}/testfiles/SGSN-CDR-def-v2009A.asn real_schema)
fast_ber_generate2(${CMAKE_SOURCE_DIR}/testfiles/multi_file_import_1.asn
                   ${CMAKE_SOURCE_DIR}/testfiles/multi_file_import_2.asn multi_file_import)

aux_source_directory(ber_types TEST_SRC)
aux_source_directory(util TEST_SRC)
aux_source_directory(compiler TEST_SRC)

add_executable(fast_ber_tests Test ${TEST_SRC} autogen/choice.hpp
                                               autogen/simple.hpp
                                               autogen/tags.hpp
                                               autogen/prefixed_types.hpp
                                               autogen/top_level_encodings.hpp
                                               autogen/enum.hpp
                                               autogen/real_schema.hpp
                                               autogen/all_types.hpp
                                               autogen/import.hpp
                                               autogen/multi_file_import.hpp
                                               autogen/object_identifier.hpp
                                               autogen/value_assign.hpp
                                               autogen/embedded.hpp
                                               autogen/parameterized_types.hpp
                                               autogen/sequence_of.hpp
                                               autogen/time.hpp
                                               autogen/circular.hpp
                                               autogen/defaults.hpp
                                               autogen/anonymous_members.hpp)
target_include_directories(fast_ber_tests PRIVATE SYSTEM ${CMAKE_SOURCE_DIR}/3rd_party/Catch2/single_include)
target_include_directories(fast_ber_tests PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
target_link_libraries (fast_ber_tests fast_ber_lib)

# Generate a header file from an asn1 input spec
# Create a library including the header
# Compile when running tests, check that the include file can be succesfully compiled
function(generate_and_compile test_case should_succeed)
    fast_ber_generate(${CMAKE_SOURCE_DIR}/3rd_party/asn1c/tests/${test_case}.asn1 ${test_case})

    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/autogen/${test_case}.cpp "\#include \"${test_case}.hpp\"")
    add_library(${test_case} ${CMAKE_CURRENT_BINARY_DIR}/autogen/${test_case}.cpp autogen/${test_case}.hpp)
    target_link_libraries(${test_case} fast_ber_lib)
    set_target_properties(${test_case} PROPERTIES EXCLUDE_FROM_ALL TRUE
                                       EXCLUDE_FROM_DEFAULT_BUILD TRUE)

    add_test(NAME fast_ber_parse_${test_case}
             COMMAND ${CMAKE_COMMAND} --build . --target ${test_case} --config $<CONFIGURATION>
             WORKING_DIRECTORY ${CMAKE_BINARY_DIR})

    if(NOT ${should_succeed})
        set_tests_properties(fast_ber_parse_${test_case} PROPERTIES WILL_FAIL TRUE)
    endif()

endfunction(generate_and_compile)

generate_and_compile(00-empty-OK TRUE)
generate_and_compile(01-empty-OK TRUE)
generate_and_compile(02-garbage-NP FALSE)
generate_and_compile(03-enum-OK TRUE)
generate_and_compile(04-enum-SE FALSE)
generate_and_compile(05-enum-SE FALSE)
generate_and_compile(06-enum-SE FALSE)
generate_and_compile(07-int-OK TRUE)
#generate_and_compile(08-int-SE FALSE)
#generate_and_compile(09-int-SE FALSE)
#generate_and_compile(10-int-OK TRUE)
generate_and_compile(11-int-SE.asn1 FALSE)
generate_and_compile(12-int-SE.asn1 FALSE)
#generate_and_compile(13-resolver-OK TRUE)
#generate_and_compile(14-resolver-OK TRUE)
generate_and_compile(15-resolver-SE.asn1 FALSE)
#generate_and_compile(16-constraint-OK TRUE)
generate_and_compile(17-tags-OK TRUE)
generate_and_compile(18-class-OK TRUE)
#generate_and_compile(19-param-OK TRUE)
generate_and_compile(20-constr-OK TRUE)
generate_and_compile(21-tags-OK TRUE)
generate_and_compile(22-tags-OK TRUE)
generate_and_compile(23-bits-OK TRUE)
generate_and_compile(24-sequence-OK TRUE)
generate_and_compile(25-misc-OK TRUE)
generate_and_compile(26-sequence-SE TRUE)
generate_and_compile(27-set-SE TRUE)
generate_and_compile(28-tags-SE TRUE)
generate_and_compile(29-tags-OK TRUE)
generate_and_compile(30-set-OK TRUE)
generate_and_compile(31-set-of-OK TRUE)
generate_and_compile(32-sequence-of-OK TRUE)
generate_and_compile(33-misc-OK TRUE)
#generate_and_compile(34-class-OK TRUE)
#generate_and_compile(35-set-choice-OK TRUE)
#generate_and_compile(36-indirect-choice-SE TRUE)
generate_and_compile(37-indirect-choice-OK TRUE)
#generate_and_compile(38-comments-OK TRUE)
generate_and_compile(39-sequence-of-OK TRUE)
generate_and_compile(40-int-optional-SE TRUE)
generate_and_compile(41-int-optional-OK TRUE)
generate_and_compile(42-real-life-OK TRUE)
#generate_and_compile(43-recursion-OK TRUE)
generate_and_compile(44-choice-in-sequence-OK TRUE)
#generate_and_compile(45-undefined-type-SE TRUE)
generate_and_compile(46-redefine-OK TRUE)
generate_and_compile(47-set-ext-OK TRUE)
generate_and_compile(48-real-life-OK TRUE)
#generate_and_compile(49-real-life-OK TRUE)
generate_and_compile(50-constraint-OK TRUE)
generate_and_compile(51-constraint-SE TRUE)
generate_and_compile(52-constraint-SE TRUE)
generate_and_compile(53-constraint-SE TRUE)
generate_and_compile(54-constraint-SE TRUE)
generate_and_compile(55-components-of-OK TRUE)
generate_and_compile(56-components-of-SE FALSE)
#generate_and_compile(57-components-of-OK TRUE)
generate_and_compile(58-param-OK TRUE)
#generate_and_compile(59-choice-extended-OK TRUE)
generate_and_compile(60-any-OK TRUE)
generate_and_compile(61-any-1-SE TRUE)
generate_and_compile(62-any-OK TRUE)
generate_and_compile(63-any-2-SE TRUE)
generate_and_compile(64-oid-constr-OK TRUE)
generate_and_compile(65-multi-tag-OK TRUE)
generate_and_compile(66-ref-simple-OK TRUE)
generate_and_compile(67-embedded-choice-OK TRUE)
generate_and_compile(68-enum-default-OK TRUE)
generate_and_compile(69-reserved-words-OK TRUE)
#generate_and_compile(70-xer-test-OK TRUE)
generate_and_compile(71-duplicate-types-SE TRUE)
#generate_and_compile(72-same-names-OK TRUE)
#generate_and_compile(73-circular-OK TRUE)
generate_and_compile(74-int-enum-constraints-OK TRUE)
generate_and_compile(75-duplicate-modules-SE FALSE)
generate_and_compile(76-duplicate-modules-SW FALSE)
generate_and_compile(77-str-default-OK TRUE)
generate_and_compile(78-str-default-SE TRUE)
generate_and_compile(79-constrained-by-OK TRUE)
#generate_and_compile(80-chardefs-OK TRUE)
#generate_and_compile(81-type-default-OK TRUE)
generate_and_compile(82-with-comps-OK TRUE)
#generate_and_compile(83-with-comps-OK TRUE)
generate_and_compile(84-param-tags-OK TRUE)
#generate_and_compile(85-comments-OK TRUE)
generate_and_compile(86-atags-OK TRUE)
#generate_and_compile(87-old-syntax-OK TRUE)
generate_and_compile(88-integer-enum-OK TRUE)
generate_and_compile(89-bit-string-enum-OK TRUE)
generate_and_compile(90-cond-int-type-OK TRUE)
generate_and_compile(91-cond-int-blessSize-OK TRUE)
#generate_and_compile(92-circular-loops-OK TRUE)
generate_and_compile(93-asn1c-controls-OK TRUE)
generate_and_compile(94-set-optionals-OK TRUE)
#generate_and_compile(95-choice-per-order-OK TRUE)
#generate_and_compile(96-type-identifier-OK TRUE)
#generate_and_compile(97-type-identifier-SW TRUE)
#generate_and_compile(98-attribute-class-OK TRUE)
#generate_and_compile(99-class-sample-OK TRUE)
#generate_and_compile(100-class-ref-OK TRUE)
#generate_and_compile(101-class-ref-SE FALSE)
generate_and_compile(102-class-ref-SE FALSE)
generate_and_compile(103-reference-SE FALSE)
generate_and_compile(104-param-1-OK TRUE)
generate_and_compile(105-param-2-OK TRUE)
generate_and_compile(106-param-constr-OK TRUE)
generate_and_compile(107-param-constr-2-OK TRUE)
#generate_and_compile(108-param-constr-3-OK TRUE)
#generate_and_compile(109-bit-string-SE TRUE)
generate_and_compile(110-param-3-OK TRUE)
generate_and_compile(111-param-4-SE TRUE)
#generate_and_compile(112-param-class-OK TRUE)
generate_and_compile(113-bit-string-SE TRUE)
#generate_and_compile(114-bit-string-SE TRUE)
generate_and_compile(115-bit-string-OK TRUE)
generate_and_compile(116-bit-string-SE TRUE)
generate_and_compile(117-real-constraint-OK TRUE)
generate_and_compile(118-per-constraint-OK TRUE)
#generate_and_compile(119-per-strings-OK TRUE)
generate_and_compile(121-empty-imports-OK TRUE)
generate_and_compile(122-pattern-OK TRUE)
generate_and_compile(123-valueassignment-OK TRUE)
generate_and_compile(124-multiconstraint-OK TRUE)
generate_and_compile(125-bitstring-constraint-OK TRUE)
generate_and_compile(126-per-extensions-OK TRUE)
generate_and_compile(127-per-long-OK TRUE)
#generate_and_compile(128-enum-SE TRUE)
generate_and_compile(129-enum-OK TRUE)
generate_and_compile(130-enum-OK TRUE)
generate_and_compile(131-per-empty-OK TRUE)
generate_and_compile(132-per-choice-OK TRUE)
generate_and_compile(133-per-constraints-OK TRUE)
generate_and_compile(134-per-long-OK TRUE)

add_test(NAME fast_ber_compiler_0 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/simple0.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/simple0)
add_test(NAME fast_ber_compiler_1 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/simple1.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/simple1)
add_test(NAME fast_ber_compiler_2 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/simple2.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/simple2)
add_test(NAME fast_ber_compiler_3 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/simple3.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/simple3)
add_test(NAME fast_ber_compiler_4 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/simple4.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/simple4)
add_test(NAME fast_ber_compiler_5 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/simple5.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/simple5)
add_test(NAME fast_ber_compiler_6 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/sequence_of.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/sequence_of)
add_test(NAME fast_ber_compiler_7 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/extension.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/extension)
add_test(NAME fast_ber_compiler_8 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/SGSN-CDR-def-v2009A.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/real_schema)
add_test(NAME fast_ber_compiler_9 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/class.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/class)
add_test(NAME fast_ber_compiler_10 COMMAND fast_ber_compiler ${CMAKE_SOURCE_DIR}/testfiles/integer.asn ${CMAKE_CURRENT_BINARY_DIR}/autogen/integer)
add_test(NAME fast_ber_tests COMMAND fast_ber_tests)
